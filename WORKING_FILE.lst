

HI-TECH Software PIC LITE Macro Assembler V9.82 build 9453 
                                                                                               Thu May 30 21:06:40 2013

HI-TECH Software Omniscient Code Generator (Lite mode) build 9453
     1  0000                     opt subtitle "HI-TECH Software Omniscient Code Generator (Lite mode) build 9453"
     2                           
     3                           opt pagewidth 120
     4                           
     5                           	opt lm
     6                           
     7                           	processor	16F877A
     8                           clrc	macro
     9                           	bcf	3,0
    10  0000                     	endm
    11                           clrz	macro
    12                           	bcf	3,2
    13  0000                     	endm
    14                           setc	macro
    15                           	bsf	3,0
    16  0000                     	endm
    17                           setz	macro
    18                           	bsf	3,2
    19  0000                     	endm
    20                           skipc	macro
    21                           	btfss	3,0
    22  0000                     	endm
    23                           skipz	macro
    24                           	btfss	3,2
    25  0000                     	endm
    26                           skipnc	macro
    27                           	btfsc	3,0
    28  0000                     	endm
    29                           skipnz	macro
    30                           	btfsc	3,2
    31  0000                     	endm
    32  0000                     indf	equ	0
    33  0000                     indf0	equ	0
    34  0002                     pc	equ	2
    35  0002                     pcl	equ	2
    36  0003                     status	equ	3
    37  0004                     fsr	equ	4
    38  0004                     fsr0	equ	4
    39  0001                     c	equ	1
    40  0000                     z	equ	0
    41  000A                     pclath	equ	10
    42                           # 21 "C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
    43                           	psect config,class=CONFIG,delta=2 ;#
    44                           # 21 "C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
    45  2007  FF32               	dw 0xFFFE & 0xFFFB & 0xFFFF & 0xFFBF & 0xFFF7 & 0xFFFF & 0xFF7F & 0xFFFF ;#
    46                           	FNCALL	_main,_init
    47                           	FNCALL	_main,_drive
    48                           	FNCALL	_main,_lcd_set_cursor
    49                           	FNCALL	_main,_lcd_write_string
    50                           	FNCALL	_main,_checkForFinalDestination
    51                           	FNCALL	_main,_lookForVictim
    52                           	FNCALL	_main,_findWalls
    53                           	FNCALL	_main,_play_iCreate_song
    54                           	FNCALL	_main,_rotateIR
    55                           	FNCALL	_main,_wallFollow
    56                           	FNCALL	_main,_frontWallCorrect
    57                           	FNCALL	_main,_goToNextCell
    58                           	FNCALL	_main,_goRight
    59                           	FNCALL	_main,_getOrientation
    60                           	FNCALL	_main,_goForward
    61                           	FNCALL	_main,_goLeft
    62                           	FNCALL	_main,_getSuccessfulDrive
    63                           	FNCALL	_main,_updateMapData
    64                           	FNCALL	_main,_updateLocation
    65                           	FNCALL	_main,_updateNode
    66                           	FNCALL	_main,_checkIfHome
    67                           	FNCALL	_goToNextCell,_getSomethingInTheWay
    68                           	FNCALL	_goToNextCell,_goLeft
    69                           	FNCALL	_goToNextCell,_goForward
    70                           	FNCALL	_goToNextCell,_goRight
    71                           	FNCALL	_goToNextCell,_goBackward
    72                           	FNCALL	_findWalls,_rotateIR
    73                           	FNCALL	_findWalls,_lcd_set_cursor
    74                           	FNCALL	_findWalls,_findWall
    75                           	FNCALL	_findWalls,_lcd_write_data
    76                           	FNCALL	_findWalls,_play_iCreate_song
    77                           	FNCALL	_goRight,_lcd_set_cursor
    78                           	FNCALL	_goRight,_lcd_write_data
    79                           	FNCALL	_goRight,_turnRight90
    80                           	FNCALL	_goRight,_updateOrientation
    81                           	FNCALL	_goRight,_driveForDistance
    82                           	FNCALL	_goLeft,_lcd_set_cursor
    83                           	FNCALL	_goLeft,_lcd_write_data
    84                           	FNCALL	_goLeft,_turnLeft90
    85                           	FNCALL	_goLeft,_updateOrientation
    86                           	FNCALL	_goLeft,_driveForDistance
    87                           	FNCALL	_goForward,_lcd_set_cursor
    88                           	FNCALL	_goForward,_lcd_write_data
    89                           	FNCALL	_goForward,_getCurrentX
    90                           	FNCALL	_goForward,_getCurrentY
    91                           	FNCALL	_goForward,_driveForDistance
    92                           	FNCALL	_goBackward,_lcd_set_cursor
    93                           	FNCALL	_goBackward,_lcd_write_data
    94                           	FNCALL	_goBackward,_turnAround
    95                           	FNCALL	_goBackward,_updateOrientation
    96                           	FNCALL	_goBackward,_driveForDistance
    97                           	FNCALL	_wallFollow,_readIR
    98                           	FNCALL	_wallFollow,_drive
    99                           	FNCALL	_wallFollow,_waitFor
   100                           	FNCALL	_findWall,_readIR
   101                           	FNCALL	_frontWallCorrect,_readIR
   102                           	FNCALL	_frontWallCorrect,_drive
   103                           	FNCALL	_frontWallCorrect,_clearSuccessfulDrive
   104                           	FNCALL	_driveForDistance,_drive
   105                           	FNCALL	_driveForDistance,_ser_putch
   106                           	FNCALL	_driveForDistance,_ser_getch
   107                           	FNCALL	_driveForDistance,_goReverse
   108                           	FNCALL	_driveForDistance,_clearSuccessfulDrive
   109                           	FNCALL	_driveForDistance,_getCurrentY
   110                           	FNCALL	_driveForDistance,_getCurrentX
   111                           	FNCALL	_driveForDistance,_findFinalDestination
   112                           	FNCALL	_driveForDistance,_turnRight90
   113                           	FNCALL	_driveForDistance,_updateOrientation
   114                           	FNCALL	_driveForDistance,_turnLeft90
   115                           	FNCALL	_updateLocation,_lcd_set_cursor
   116                           	FNCALL	_updateLocation,_lcd_write_data
   117                           	FNCALL	_updateLocation,_getOrientation
   118                           	FNCALL	_updateLocation,_lcd_write_1_digit_bcd
   119                           	FNCALL	_lookForVictim,_ser_putch
   120                           	FNCALL	_lookForVictim,_ser_getch
   121                           	FNCALL	_lookForVictim,_play_iCreate_song
   122                           	FNCALL	_lookForVictim,_lcd_set_cursor
   123                           	FNCALL	_lookForVictim,_lcd_write_data
   124                           	FNCALL	_lookForVictim,_getVictimZone
   125                           	FNCALL	_lookForVictim,_lcd_write_1_digit_bcd
   126                           	FNCALL	_checkForFinalDestination,_getFinalX
   127                           	FNCALL	_checkForFinalDestination,_getFinalY
   128                           	FNCALL	_checkForFinalDestination,_play_iCreate_song
   129                           	FNCALL	_checkForFinalDestination,_lcd_set_cursor
   130                           	FNCALL	_checkForFinalDestination,_lcd_write_data
   131                           	FNCALL	_init,_init_adc
   132                           	FNCALL	_init,_lcd_init
   133                           	FNCALL	_init,_ser_init
   134                           	FNCALL	_init,_initIRobot
   135                           	FNCALL	_init,_initSongs
   136                           	FNCALL	_goReverse,_lcd_set_cursor
   137                           	FNCALL	_goReverse,_lcd_write_data
   138                           	FNCALL	_goReverse,_drive
   139                           	FNCALL	_goReverse,_waitFor
   140                           	FNCALL	_readIR,_adc_read_channel
   141                           	FNCALL	_readIR,_convert
   142                           	FNCALL	_findFinalDestination,_lcd_set_cursor
   143                           	FNCALL	_findFinalDestination,_lcd_write_1_digit_bcd
   144                           	FNCALL	_updateMapData,_addNewData
   145                           	FNCALL	_checkIfHome,_drive
   146                           	FNCALL	_checkIfHome,_play_iCreate_song
   147                           	FNCALL	_turnAround,_drive
   148                           	FNCALL	_turnAround,_waitFor
   149                           	FNCALL	_turnLeft90,_drive
   150                           	FNCALL	_turnLeft90,_getCurrentX
   151                           	FNCALL	_turnLeft90,_getCurrentY
   152                           	FNCALL	_turnLeft90,_waitFor
   153                           	FNCALL	_turnRight90,_drive
   154                           	FNCALL	_turnRight90,_waitFor
   155                           	FNCALL	_initSongs,_ser_putArr
   156                           	FNCALL	_lcd_init,_lcd_write_control
   157                           	FNCALL	_lcd_write_1_digit_bcd,_lcd_write_data
   158                           	FNCALL	_lcd_set_cursor,_lcd_write_control
   159                           	FNCALL	_addNewData,_writeEEPROM
   160                           	FNCALL	_lcd_write_string,_lcd_write_data
   161                           	FNCALL	_adc_read_channel,_adc_read
   162                           	FNCALL	_initIRobot,_ser_putch
   163                           	FNCALL	_waitFor,_ser_putch
   164                           	FNCALL	_drive,_ser_putch
   165                           	FNCALL	_convert,___wmul
   166                           	FNCALL	_convert,___awdiv
   167                           	FNCALL	_play_iCreate_song,_ser_putch
   168                           	FNCALL	_ser_putArr,_ser_putch
   169                           	FNCALL	_ser_getch,_ser_isrx
   170                           	FNCALL	_writeEEPROM,_initEEPROMMode
   171                           	FNCALL	_writeEEPROM,_writeSPIByte
   172                           	FNCALL	_adc_read,___awdiv
   173                           	FNROOT	_main
   174                           	FNCALL	intlevel1,_isr1
   175                           	global	intlevel1
   176                           	FNROOT	intlevel1
   177                           	global	_finalX
   178                           	global	_finalY
   179                           	global	_somethingInTheWay
   180                           	global	_xCoord
   181                           	global	_yCoord
   182                           	global	_beep
   183                           	global	_longbeep
   184                           	global	_lookingForU2
   185                           	global	_finalCountdown
   186                           	global	_superMarioBros
   187                           	global	_champions
   188                           psect	idataBANK0,class=CODE,space=0,delta=2
   189                           global __pidataBANK0
   190  159F                     __pidataBANK0:
   191                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\map.c"
   192                           	line	7
   193                           
   194                           ;initializer for _finalX
   195  159F  3403               	retlw	03h
   196                           	line	8
   197                           
   198                           ;initializer for _finalY
   199  15A0  3401               	retlw	01h
   200                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
   201                           	line	15
   202                           
   203                           ;initializer for _somethingInTheWay
   204  15A1  3402               	retlw	02h
   205                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
   206                           	line	51
   207                           
   208                           ;initializer for _xCoord
   209  15A2  3401               	retlw	01h
   210                           	line	52
   211                           
   212                           ;initializer for _yCoord
   213  15A3  3403               	retlw	03h
   214                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\songs.c"
   215                           	line	14
   216                           
   217                           ;initializer for _beep
   218  15A4  348C               	retlw	08Ch
   219  15A5  3405               	retlw	05h
   220  15A6  3401               	retlw	01h
   221  15A7  3448               	retlw	048h
   222  15A8  3404               	retlw	04h
   223                           	line	15
   224                           
   225                           ;initializer for _longbeep
   226  15A9  348C               	retlw	08Ch
   227  15AA  3406               	retlw	06h
   228  15AB  3401               	retlw	01h
   229  15AC  3448               	retlw	048h
   230  15AD  3410               	retlw	010h
   231                           psect	idataBANK3,class=CODE,space=0,delta=2
   232                           global __pidataBANK3
   233  0967                     __pidataBANK3:
   234                           	line	11
   235                           
   236                           ;initializer for _lookingForU2
   237  0967  348C               	retlw	08Ch
   238  0968  3402               	retlw	02h
   239  0969  340D               	retlw	0Dh
   240  096A  3448               	retlw	048h
   241  096B  341C               	retlw	01Ch
   242  096C  3448               	retlw	048h
   243  096D  341C               	retlw	01Ch
   244  096E  344F               	retlw	04Fh
   245  096F  3440               	retlw	040h
   246  0970  3480               	retlw	080h
   247  0971  3410               	retlw	010h
   248  0972  344D               	retlw	04Dh
   249  0973  341C               	retlw	01Ch
   250  0974  344C               	retlw	04Ch
   251  0975  341C               	retlw	01Ch
   252  0976  3448               	retlw	048h
   253  0977  3440               	retlw	040h
   254  0978  3480               	retlw	080h
   255  0979  3410               	retlw	010h
   256  097A  3445               	retlw	045h
   257  097B  341C               	retlw	01Ch
   258  097C  3445               	retlw	045h
   259  097D  341C               	retlw	01Ch
   260  097E  3445               	retlw	045h
   261  097F  341C               	retlw	01Ch
   262  0980  3448               	retlw	048h
   263  0981  341C               	retlw	01Ch
   264  0982  3448               	retlw	048h
   265  0983  3440               	retlw	040h
   266                           	line	12
   267                           
   268                           ;initializer for _finalCountdown
   269  0984  348C               	retlw	08Ch
   270  0985  3403               	retlw	03h
   271  0986  340C               	retlw	0Ch
   272  0987  3449               	retlw	049h
   273  0988  3408               	retlw	08h
   274  0989  3447               	retlw	047h
   275  098A  3408               	retlw	08h
   276  098B  3449               	retlw	049h
   277  098C  3420               	retlw	020h
   278  098D  3442               	retlw	042h
   279  098E  3440               	retlw	040h
   280  098F  3480               	retlw	080h
   281  0990  3420               	retlw	020h
   282  0991  344A               	retlw	04Ah
   283  0992  3408               	retlw	08h
   284  0993  3449               	retlw	049h
   285  0994  3408               	retlw	08h
   286  0995  344A               	retlw	04Ah
   287  0996  3408               	retlw	08h
   288  0997  3480               	retlw	080h
   289  0998  340C               	retlw	0Ch
   290  0999  3449               	retlw	049h
   291  099A  3406               	retlw	06h
   292  099B  3480               	retlw	080h
   293  099C  340C               	retlw	0Ch
   294  099D  3447               	retlw	047h
   295  099E  3430               	retlw	030h
   296                           psect	idataBANK1,class=CODE,space=0,delta=2
   297                           global __pidataBANK1
   298  08CC                     __pidataBANK1:
   299                           	line	10
   300                           
   301                           ;initializer for _superMarioBros
   302  08CC  348C               	retlw	08Ch
   303  08CD  3401               	retlw	01h
   304  08CE  340B               	retlw	0Bh
   305  08CF  344C               	retlw	04Ch
   306  08D0  3408               	retlw	08h
   307  08D1  3480               	retlw	080h
   308  08D2  3404               	retlw	04h
   309  08D3  344C               	retlw	04Ch
   310  08D4  3410               	retlw	010h
   311  08D5  3480               	retlw	080h
   312  08D6  3404               	retlw	04h
   313  08D7  344C               	retlw	04Ch
   314  08D8  3410               	retlw	010h
   315  08D9  3480               	retlw	080h
   316  08DA  3404               	retlw	04h
   317  08DB  3448               	retlw	048h
   318  08DC  3408               	retlw	08h
   319  08DD  344C               	retlw	04Ch
   320  08DE  3410               	retlw	010h
   321  08DF  344F               	retlw	04Fh
   322  08E0  3420               	retlw	020h
   323  08E1  3480               	retlw	080h
   324  08E2  3408               	retlw	08h
   325  08E3  3443               	retlw	043h
   326  08E4  3410               	retlw	010h
   327                           	line	13
   328                           
   329                           ;initializer for _champions
   330  08E5  348C               	retlw	08Ch
   331  08E6  3404               	retlw	04h
   332  08E7  3409               	retlw	09h
   333  08E8  344A               	retlw	04Ah
   334  08E9  3440               	retlw	040h
   335  08EA  3449               	retlw	049h
   336  08EB  3410               	retlw	010h
   337  08EC  344A               	retlw	04Ah
   338  08ED  3410               	retlw	010h
   339  08EE  3449               	retlw	049h
   340  08EF  3430               	retlw	030h
   341  08F0  3445               	retlw	045h
   342  08F1  3430               	retlw	030h
   343  08F2  3480               	retlw	080h
   344  08F3  3420               	retlw	020h
   345  08F4  3442               	retlw	042h
   346  08F5  341C               	retlw	01Ch
   347  08F6  3447               	retlw	047h
   348  08F7  3420               	retlw	020h
   349  08F8  3442               	retlw	042h
   350  08F9  3430               	retlw	030h
   351                           	global	_start
   352                           	global	_RTC_Counter
   353                           	global	_closestObject
   354                           	global	_addressCount
   355                           	global	_addressCurrent
   356                           	global	_currentOrientation
   357                           	global	_lastMove
   358                           	global	_node
   359                           	global	_rxoptr
   360                           	global	_ser_tmp
   361                           	global	_stepPosition
   362                           	global	_stepsToPerpendicular
   363                           	global	_txoptr
   364                           	global	_vicZone
   365                           	global	_victimZone
   366                           	global	_wayWent
   367                           	global	_rxiptr
   368                           	global	_txiptr
   369                           	global	_RTC_FLAG_10MS
   370                           	global	_RTC_FLAG_1MS
   371                           	global	_RTC_FLAG_500MS
   372                           	global	_RTC_FLAG_50MS
   373                           	global	_frontWall
   374                           	global	_goingHome
   375                           	global	_home
   376                           	global	_leftWall
   377                           	global	_moving
   378                           	global	_ready
   379                           	global	_rightWall
   380                           	global	_successfulDrive
   381                           	global	_rxfifo
   382                           	global	_txfifo
   383                           	global	_ADCON0
   384  001F                     _ADCON0	set	31
   385                           	global	_ADRESH
   386  001E                     _ADRESH	set	30
   387                           	global	_PORTA
   388  0005                     _PORTA	set	5
   389                           	global	_PORTC
   390  0007                     _PORTC	set	7
   391                           	global	_PORTD
   392  0008                     _PORTD	set	8
   393                           	global	_PORTE
   394  0009                     _PORTE	set	9
   395                           	global	_RCREG
   396  001A                     _RCREG	set	26
   397                           	global	_SSPBUF
   398  0013                     _SSPBUF	set	19
   399                           	global	_SSPCON
   400  0014                     _SSPCON	set	20
   401                           	global	_TMR0
   402  0001                     _TMR0	set	1
   403                           	global	_TXREG
   404  0019                     _TXREG	set	25
   405                           	global	_CARRY
   406  0018                     _CARRY	set	24
   407                           	global	_CHS0
   408  00FB                     _CHS0	set	251
   409                           	global	_CHS1
   410  00FC                     _CHS1	set	252
   411                           	global	_CHS2
   412  00FD                     _CHS2	set	253
   413                           	global	_CREN
   414  00C4                     _CREN	set	196
   415                           	global	_GIE
   416  005F                     _GIE	set	95
   417                           	global	_GO
   418  00FA                     _GO	set	250
   419                           	global	_OERR
   420  00C1                     _OERR	set	193
   421                           	global	_PEIE
   422  005E                     _PEIE	set	94
   423                           	global	_RB0
   424  0030                     _RB0	set	48
   425                           	global	_RCIF
   426  0065                     _RCIF	set	101
   427                           	global	_RE0
   428  0048                     _RE0	set	72
   429                           	global	_RE1
   430  0049                     _RE1	set	73
   431                           	global	_RE2
   432  004A                     _RE2	set	74
   433                           	global	_RX9
   434  00C6                     _RX9	set	198
   435                           	global	_SPEN
   436  00C7                     _SPEN	set	199
   437                           	global	_SSPIF
   438  0063                     _SSPIF	set	99
   439                           	global	_TMR0IE
   440  005D                     _TMR0IE	set	93
   441                           	global	_TMR0IF
   442  005A                     _TMR0IF	set	90
   443                           	global	_TXIF
   444  0064                     _TXIF	set	100
   445                           	global	_ADCON1
   446  009F                     _ADCON1	set	159
   447                           	global	_ADRESL
   448  009E                     _ADRESL	set	158
   449                           	global	_OPTION_REG
   450  0081                     _OPTION_REG	set	129
   451                           	global	_SPBRG
   452  0099                     _SPBRG	set	153
   453                           	global	_SSPSTAT
   454  0094                     _SSPSTAT	set	148
   455                           	global	_TRISA
   456  0085                     _TRISA	set	133
   457                           	global	_TRISB
   458  0086                     _TRISB	set	134
   459                           	global	_TRISC
   460  0087                     _TRISC	set	135
   461                           	global	_TRISD
   462  0088                     _TRISD	set	136
   463                           	global	_TRISE
   464  0089                     _TRISE	set	137
   465                           	global	_BRGH
   466  04C2                     _BRGH	set	1218
   467                           	global	_RCIE
   468  0465                     _RCIE	set	1125
   469                           	global	_SYNC
   470  04C4                     _SYNC	set	1220
   471                           	global	_TX9
   472  04C6                     _TX9	set	1222
   473                           	global	_TXEN
   474  04C5                     _TXEN	set	1221
   475                           	global	_TXIE
   476  0464                     _TXIE	set	1124
   477                           	global	_EEADR
   478  010D                     _EEADR	set	269
   479                           	global	_EEDATA
   480  010C                     _EEDATA	set	268
   481                           	global	_EECON1
   482  018C                     _EECON1	set	396
   483                           	global	_EECON2
   484  018D                     _EECON2	set	397
   485                           	global	_RD
   486  0C60                     _RD	set	3168
   487                           	global	_WR
   488  0C61                     _WR	set	3169
   489                           	global	_WREN
   490  0C62                     _WREN	set	3170
   491                           psect	strings,class=STRING,delta=2
   492                           global __pstrings
   493  0800                     __pstrings:
   494                           ;	global	stringdir,stringtab,__stringbase
   495  0800                     stringtab:
   496                           ;	String table - string pointers are 1 byte each
   497  0800                     stringcode:stringdir:
      + 0800                     stringdir:	
   498  0800  3008               movlw high(stringdir)
   499  0801  008A               movwf pclath
   500  0802  0804               movf fsr,w
   501  0803  0A84               incf fsr
   502  0804  0782               	addwf pc
   503  0805                     __stringbase:
   504  0805  3400               	retlw	0
   505                           psect	strings
   506                           	
   507  0806                     STR_3:	
   508  0806  3428               	retlw	40	;'('
   509  0807  342D               	retlw	45	;'-'
   510  0808  342C               	retlw	44	;','
   511  0809  342D               	retlw	45	;'-'
   512  080A  3429               	retlw	41	;')'
   513  080B  3420               	retlw	32	;' '
   514  080C  342D               	retlw	45	;'-'
   515  080D  3420               	retlw	32	;' '
   516  080E  342D               	retlw	45	;'-'
   517  080F  342D               	retlw	45	;'-'
   518  0810  3420               	retlw	32	;' '
   519  0811  342D               	retlw	45	;'-'
   520  0812  342D               	retlw	45	;'-'
   521  0813  342D               	retlw	45	;'-'
   522  0814  3420               	retlw	32	;' '
   523  0815  342D               	retlw	45	;'-'
   524  0816  3400               	retlw	0
   525                           psect	strings
   526                           	
   527  0817                     STR_4:	
   528  0817  342D               	retlw	45	;'-'
   529  0818  3420               	retlw	32	;' '
   530  0819  342D               	retlw	45	;'-'
   531  081A  3420               	retlw	32	;' '
   532  081B  342D               	retlw	45	;'-'
   533  081C  3420               	retlw	32	;' '
   534  081D  3428               	retlw	40	;'('
   535  081E  3433               	retlw	51	;'3'
   536  081F  342C               	retlw	44	;','
   537  0820  3431               	retlw	49	;'1'
   538  0821  3429               	retlw	41	;')'
   539  0822  3420               	retlw	32	;' '
   540  0823  3447               	retlw	71	;'G'
   541  0824  3452               	retlw	82	;'R'
   542  0825  3445               	retlw	69	;'E'
   543  0826  3447               	retlw	71	;'G'
   544  0827  3400               	retlw	0
   545                           psect	strings
   546                           	
   547  0828                     STR_1:	
   548  0828  3445               	retlw	69	;'E'
   549  0829  3445               	retlw	69	;'E'
   550  082A  3450               	retlw	80	;'P'
   551  082B  3452               	retlw	82	;'R'
   552  082C  344F               	retlw	79	;'O'
   553  082D  344D               	retlw	77	;'M'
   554  082E  3420               	retlw	32	;' '
   555  082F  3453               	retlw	83	;'S'
   556  0830  3475               	retlw	117	;'u'
   557  0831  3463               	retlw	99	;'c'
   558  0832  3463               	retlw	99	;'c'
   559  0833  3465               	retlw	101	;'e'
   560  0834  3473               	retlw	115	;'s'
   561  0835  3473               	retlw	115	;'s'
   562  0836  3400               	retlw	0
   563                           psect	strings
   564                           	
   565  0837                     STR_2:	
   566  0837  3445               	retlw	69	;'E'
   567  0838  3445               	retlw	69	;'E'
   568  0839  3450               	retlw	80	;'P'
   569  083A  3452               	retlw	82	;'R'
   570  083B  344F               	retlw	79	;'O'
   571  083C  344D               	retlw	77	;'M'
   572  083D  3420               	retlw	32	;' '
   573  083E  3446               	retlw	70	;'F'
   574  083F  3461               	retlw	97	;'a'
   575  0840  3469               	retlw	105	;'i'
   576  0841  346C               	retlw	108	;'l'
   577  0842  3465               	retlw	101	;'e'
   578  0843  3464               	retlw	100	;'d'
   579  0844  3400               	retlw	0
   580                           psect	strings
   581                           	file	"WORKING_FILE.as"
   582                           	line	#
   583                           psect cinit,class=CODE,delta=2
   584                           global start_initialization
   585  0B0E                     start_initialization:
   586                           
   587                           psect	bitbssCOMMON,class=COMMON,bit,space=1
   588                           global __pbitbssCOMMON
   589  0380                     __pbitbssCOMMON:
   590  0380                     _RTC_FLAG_10MS:
   591  0380                            ds      1
   592                           
   593  0381                     _RTC_FLAG_1MS:
   594  0381                            ds      1
   595                           
   596  0382                     _RTC_FLAG_500MS:
   597  0382                            ds      1
   598                           
   599  0383                     _RTC_FLAG_50MS:
   600  0383                            ds      1
   601                           
   602  0384                     _frontWall:
   603  0384                            ds      1
   604                           
   605  0385                     _goingHome:
   606  0385                            ds      1
   607                           
   608  0386                     _home:
   609  0386                            ds      1
   610                           
   611  0387                     _leftWall:
   612  0387                            ds      1
   613                           
   614  0388                     _moving:
   615  0388                            ds      1
   616                           
   617  0389                     _ready:
   618  0389                            ds      1
   619                           
   620  038A                     _rightWall:
   621  038A                            ds      1
   622                           
   623  038B                     _successfulDrive:
   624  038B                            ds      1
   625                           
   626                           psect	bssCOMMON,class=COMMON,space=1
   627                           global __pbssCOMMON
   628  007C                     __pbssCOMMON:
   629  007C                     _rxiptr:
   630  007C                            ds      1
   631                           
   632  007D                     _txiptr:
   633  007D                            ds      1
   634                           
   635                           psect	bssBANK0,class=BANK0,space=1
   636                           global __pbssBANK0
   637  0049                     __pbssBANK0:
   638  0049                     _start:
   639  0049                            ds      3
   640                           
   641  004C                     _RTC_Counter:
   642  004C                            ds      2
   643                           
   644  004E                     _closestObject:
   645  004E                            ds      2
   646                           
   647  0050                     _addressCount:
   648  0050                            ds      1
   649                           
   650  0051                     _addressCurrent:
   651  0051                            ds      1
   652                           
   653  0052                     _currentOrientation:
   654  0052                            ds      1
   655                           
   656  0053                     _lastMove:
   657  0053                            ds      1
   658                           
   659  0054                     _node:
   660  0054                            ds      1
   661                           
   662  0055                     _rxoptr:
   663  0055                            ds      1
   664                           
   665  0056                     _ser_tmp:
   666  0056                            ds      1
   667                           
   668  0057                     _stepPosition:
   669  0057                            ds      1
   670                           
   671  0058                     _stepsToPerpendicular:
   672  0058                            ds      1
   673                           
   674  0059                     _txoptr:
   675  0059                            ds      1
   676                           
   677  005A                     _vicZone:
   678  005A                            ds      1
   679                           
   680  005B                     _victimZone:
   681  005B                            ds      1
   682                           
   683  005C                     _wayWent:
   684  005C                            ds      1
   685                           
   686                           psect	dataBANK0,class=BANK0,space=1
   687                           global __pdataBANK0
   688  005D                     __pdataBANK0:
   689                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\map.c"
   690                           	line	7
   691  005D                     _finalX:
   692  005D                            ds      1
   693                           
   694                           psect	dataBANK0
   695                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\map.c"
   696                           	line	8
   697  005E                     _finalY:
   698  005E                            ds      1
   699                           
   700                           psect	dataBANK0
   701                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
   702                           	line	15
   703  005F                     _somethingInTheWay:
   704  005F                            ds      1
   705                           
   706                           psect	dataBANK0
   707                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
   708                           	line	51
   709  0060                     _xCoord:
   710  0060                            ds      1
   711                           
   712                           psect	dataBANK0
   713                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
   714                           	line	52
   715  0061                     _yCoord:
   716  0061                            ds      1
   717                           
   718                           psect	dataBANK0
   719                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\songs.c"
   720                           	line	14
   721  0062                     _beep:
   722  0062                            ds      5
   723                           
   724                           psect	dataBANK0
   725                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\songs.c"
   726                           	line	15
   727  0067                     _longbeep:
   728  0067                            ds      5
   729                           
   730                           psect	bssBANK1,class=BANK1,space=1
   731                           global __pbssBANK1
   732  00CE                     __pbssBANK1:
   733  00CE                     _rxfifo:
   734  00CE                            ds      16
   735                           
   736  00DE                     _txfifo:
   737  00DE                            ds      16
   738                           
   739                           psect	dataBANK1,class=BANK1,space=1
   740                           global __pdataBANK1
   741  00A0                     __pdataBANK1:
   742                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\songs.c"
   743                           	line	10
   744  00A0                     _superMarioBros:
   745  00A0                            ds      25
   746                           
   747                           psect	dataBANK1
   748                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\songs.c"
   749                           	line	13
   750  00B9                     _champions:
   751  00B9                            ds      21
   752                           
   753                           psect	dataBANK3,class=BANK3,space=1
   754                           global __pdataBANK3
   755  0190                     __pdataBANK3:
   756                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\songs.c"
   757                           	line	11
   758  0190                     _lookingForU2:
   759  0190                            ds      29
   760                           
   761                           psect	dataBANK3
   762                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\songs.c"
   763                           	line	12
   764  01AD                     _finalCountdown:
   765  01AD                            ds      27
   766                           
   767                           psect clrtext,class=CODE,delta=2
   768                           global clear_ram
   769                           ;	Called with FSR containing the base address, and
   770                           ;	W with the last address+1
   771  1575                     clear_ram:
   772  1575  0064               	clrwdt			;clear the watchdog before getting into this loop
   773  1576                     clrloop:
   774  1576  0180               	clrf	indf		;clear RAM location pointed to by FSR
   775  1577  0A84               	incf	fsr,f		;increment pointer
   776  1578  0604               	xorwf	fsr,w		;XOR with final address
   777  1579  1903               	btfsc	status,2	;have we reached the end yet?
   778  157A  3400               	retlw	0		;all done for this memory range, return
   779  157B  0604               	xorwf	fsr,w		;XOR again to restore value
   780  157C  2D76               	goto	clrloop		;do the next byte
   781                           
   782                           ; Clear objects allocated to BITCOMMON
   783                           psect cinit,class=CODE,delta=2
   784  0B0E  01F0               	clrf	((__pbitbssCOMMON/8)+0)&07Fh
   785  0B0F  01F1               	clrf	((__pbitbssCOMMON/8)+1)&07Fh
   786                           ; Clear objects allocated to COMMON
   787                           psect cinit,class=CODE,delta=2
   788  0B10  01FC               	clrf	((__pbssCOMMON)+0)&07Fh
   789  0B11  01FD               	clrf	((__pbssCOMMON)+1)&07Fh
   790                           ; Clear objects allocated to BANK0
   791                           psect cinit,class=CODE,delta=2
   792  0B12  1383               	bcf	status, 7	;select IRP bank0
   793  0B13  3049               	movlw	low(__pbssBANK0)
   794  0B14  0084               	movwf	fsr
   795  0B15  305D               	movlw	low((__pbssBANK0)+014h)
   796  0B16  160A  118A  2575   	fcall	clear_ram
              120A  158A         
   797                           ; Clear objects allocated to BANK1
   798                           psect cinit,class=CODE,delta=2
   799  0B1B  30CE               	movlw	low(__pbssBANK1)
   800  0B1C  0084               	movwf	fsr
   801  0B1D  30EE               	movlw	low((__pbssBANK1)+020h)
   802  0B1E  160A  118A  2575   	fcall	clear_ram
              120A  158A         
   803                           global btemp
   804                           psect inittext,class=CODE,delta=2
   805                           global init_fetch,btemp
   806                           ;	Called with low address in FSR and high address in W
   807  15E4                     init_fetch:
   808  15E4  087E               	movf btemp,w
   809  15E5  008A               	movwf pclath
   810  15E6  087F               	movf btemp+1,w
   811  15E7  0082               	movwf pc
   812                           global init_ram
   813                           ;Called with:
   814                           ;	high address of idata address in btemp 
   815                           ;	low address of idata address in btemp+1 
   816                           ;	low address of data in FSR
   817                           ;	high address + 1 of data in btemp-1
   818  15E8                     init_ram:
   819  15E8  160A  118A  25E4   	fcall init_fetch
              160A  118A         
   820  15ED  0080               	movwf indf,f
   821  15EE  0A84               	incf fsr,f
   822  15EF  0804               	movf fsr,w
   823  15F0  067D               	xorwf btemp-1,w
   824  15F1  1903               	btfsc status,2
   825  15F2  3400               	retlw 0
   826  15F3  0AFF               	incf btemp+1,f
   827  15F4  1903               	btfsc status,2
   828  15F5  0AFE               	incf btemp,f
   829  15F6  2DE8               	goto init_ram
   830                           ; Initialize objects allocated to BANK3
   831                           psect cinit,class=CODE,delta=2
   832                           global init_ram, __pidataBANK3
   833  0B23  1783               	bsf	status, 7	;select IRP bank2
   834  0B24  30C8               	movlw low(__pdataBANK3+56)
   835  0B25  00FD               	movwf btemp-1,f
   836  0B26  3009               	movlw high(__pidataBANK3)
   837  0B27  00FE               	movwf btemp,f
   838  0B28  3067               	movlw low(__pidataBANK3)
   839  0B29  00FF               	movwf btemp+1,f
   840  0B2A  3090               	movlw low(__pdataBANK3)
   841  0B2B  0084               	movwf fsr,f
   842  0B2C  160A  118A  25E8   	fcall init_ram
              120A  158A         
   843                           ; Initialize objects allocated to BANK1
   844                           psect cinit,class=CODE,delta=2
   845                           global init_ram, __pidataBANK1
   846  0B31  1383               	bcf	status, 7	;select IRP bank0
   847  0B32  30CE               	movlw low(__pdataBANK1+46)
   848  0B33  00FD               	movwf btemp-1,f
   849  0B34  3008               	movlw high(__pidataBANK1)
   850  0B35  00FE               	movwf btemp,f
   851  0B36  30CC               	movlw low(__pidataBANK1)
   852  0B37  00FF               	movwf btemp+1,f
   853  0B38  30A0               	movlw low(__pdataBANK1)
   854  0B39  0084               	movwf fsr,f
   855  0B3A  160A  118A  25E8   	fcall init_ram
              120A  158A         
   856                           ; Initialize objects allocated to BANK0
   857                           psect cinit,class=CODE,delta=2
   858                           global init_ram, __pidataBANK0
   859  0B3F  306C               	movlw low(__pdataBANK0+15)
   860  0B40  00FD               	movwf btemp-1,f
   861  0B41  3015               	movlw high(__pidataBANK0)
   862  0B42  00FE               	movwf btemp,f
   863  0B43  309F               	movlw low(__pidataBANK0)
   864  0B44  00FF               	movwf btemp+1,f
   865  0B45  305D               	movlw low(__pdataBANK0)
   866  0B46  0084               	movwf fsr,f
   867  0B47  160A  118A  25E8   	fcall init_ram
              120A  158A         
   868                           psect cinit,class=CODE,delta=2
   869                           global end_of_initialization
   870                           
   871                           ;End of C runtime variable initialization code
   872                           
   873  0B4C                     end_of_initialization:
   874  0B4C  0183               clrf status
   875  0B4D  120A  118A  2815   ljmp _main	;jump to C main() function
   876                           psect	cstackCOMMON,class=COMMON,space=1
   877                           global __pcstackCOMMON
   878  0072                     __pcstackCOMMON:
   879                           	global	?_lcd_write_string
   880  0072                     ?_lcd_write_string:	; 0 bytes @ 0x0
   881                           	global	?_ser_putch
   882  0072                     ?_ser_putch:	; 0 bytes @ 0x0
   883                           	global	?_goReverse
   884  0072                     ?_goReverse:	; 0 bytes @ 0x0
   885                           	global	?_clearSuccessfulDrive
   886  0072                     ?_clearSuccessfulDrive:	; 0 bytes @ 0x0
   887                           	global	?_turnRight90
   888  0072                     ?_turnRight90:	; 0 bytes @ 0x0
   889                           	global	?_updateOrientation
   890  0072                     ?_updateOrientation:	; 0 bytes @ 0x0
   891                           	global	?_turnLeft90
   892  0072                     ?_turnLeft90:	; 0 bytes @ 0x0
   893                           	global	?_turnAround
   894  0072                     ?_turnAround:	; 0 bytes @ 0x0
   895                           	global	?_initIRobot
   896  0072                     ?_initIRobot:	; 0 bytes @ 0x0
   897                           	global	?_findWall
   898  0072                     ?_findWall:	; 1 bit 
   899                           	global	?_wallFollow
   900  0072                     ?_wallFollow:	; 0 bytes @ 0x0
   901                           	global	?_init_adc
   902  0072                     ?_init_adc:	; 0 bytes @ 0x0
   903                           	global	?_writeSPIByte
   904  0072                     ?_writeSPIByte:	; 0 bytes @ 0x0
   905                           	global	?_initEEPROMMode
   906  0072                     ?_initEEPROMMode:	; 0 bytes @ 0x0
   907                           	global	?_addNewData
   908  0072                     ?_addNewData:	; 0 bytes @ 0x0
   909                           	global	?_lcd_write_control
   910  0072                     ?_lcd_write_control:	; 0 bytes @ 0x0
   911                           	global	?_lcd_write_data
   912  0072                     ?_lcd_write_data:	; 0 bytes @ 0x0
   913                           	global	?_lcd_set_cursor
   914  0072                     ?_lcd_set_cursor:	; 0 bytes @ 0x0
   915                           	global	?_lcd_write_1_digit_bcd
   916  0072                     ?_lcd_write_1_digit_bcd:	; 0 bytes @ 0x0
   917                           	global	?_lcd_init
   918  0072                     ?_lcd_init:	; 0 bytes @ 0x0
   919                           	global	?_ser_isrx
   920  0072                     ?_ser_isrx:	; 1 bit 
   921                           	global	?_ser_init
   922  0072                     ?_ser_init:	; 0 bytes @ 0x0
   923                           	global	?_play_iCreate_song
   924  0072                     ?_play_iCreate_song:	; 0 bytes @ 0x0
   925                           	global	?_initSongs
   926  0072                     ?_initSongs:	; 0 bytes @ 0x0
   927                           	global	?_getSuccessfulDrive
   928  0072                     ?_getSuccessfulDrive:	; 1 bit 
   929                           	global	?_goBackward
   930  0072                     ?_goBackward:	; 0 bytes @ 0x0
   931                           	global	?_goForward
   932  0072                     ?_goForward:	; 0 bytes @ 0x0
   933                           	global	?_goLeft
   934  0072                     ?_goLeft:	; 0 bytes @ 0x0
   935                           	global	?_goRight
   936  0072                     ?_goRight:	; 0 bytes @ 0x0
   937                           	global	?_frontWallCorrect
   938  0072                     ?_frontWallCorrect:	; 0 bytes @ 0x0
   939                           	global	?_isr1
   940  0072                     ?_isr1:	; 0 bytes @ 0x0
   941                           	global	??_isr1
   942  0072                     ??_isr1:	; 0 bytes @ 0x0
   943                           	global	?_init
   944  0072                     ?_init:	; 0 bytes @ 0x0
   945                           	global	?_checkForFinalDestination
   946  0072                     ?_checkForFinalDestination:	; 0 bytes @ 0x0
   947                           	global	?_lookForVictim
   948  0072                     ?_lookForVictim:	; 0 bytes @ 0x0
   949                           	global	?_findWalls
   950  0072                     ?_findWalls:	; 0 bytes @ 0x0
   951                           	global	?_goToNextCell
   952  0072                     ?_goToNextCell:	; 0 bytes @ 0x0
   953                           	global	?_updateLocation
   954  0072                     ?_updateLocation:	; 0 bytes @ 0x0
   955                           	global	?_updateNode
   956  0072                     ?_updateNode:	; 0 bytes @ 0x0
   957                           	global	?_checkIfHome
   958  0072                     ?_checkIfHome:	; 0 bytes @ 0x0
   959                           	global	?_main
   960  0072                     ?_main:	; 0 bytes @ 0x0
   961                           	global	?_getCurrentX
   962  0072                     ?_getCurrentX:	; 1 bytes @ 0x0
   963                           	global	?_getCurrentY
   964  0072                     ?_getCurrentY:	; 1 bytes @ 0x0
   965                           	global	?_getFinalX
   966  0072                     ?_getFinalX:	; 1 bytes @ 0x0
   967                           	global	?_getFinalY
   968  0072                     ?_getFinalY:	; 1 bytes @ 0x0
   969                           	global	?_ser_getch
   970  0072                     ?_ser_getch:	; 1 bytes @ 0x0
   971                           	global	?_getOrientation
   972  0072                     ?_getOrientation:	; 1 bytes @ 0x0
   973                           	global	?_getSomethingInTheWay
   974  0072                     ?_getSomethingInTheWay:	; 1 bytes @ 0x0
   975  0072                     	ds	10
   976                           psect	cstackBANK0,class=BANK0,space=1
   977                           global __pcstackBANK0
   978  0020                     __pcstackBANK0:
   979                           	global	??_ser_putch
   980  0020                     ??_ser_putch:	; 0 bytes @ 0x0
   981                           	global	??_clearSuccessfulDrive
   982  0020                     ??_clearSuccessfulDrive:	; 0 bytes @ 0x0
   983                           	global	??_getCurrentX
   984  0020                     ??_getCurrentX:	; 0 bytes @ 0x0
   985                           	global	??_getCurrentY
   986  0020                     ??_getCurrentY:	; 0 bytes @ 0x0
   987                           	global	??_updateOrientation
   988  0020                     ??_updateOrientation:	; 0 bytes @ 0x0
   989                           	global	??_init_adc
   990  0020                     ??_init_adc:	; 0 bytes @ 0x0
   991                           	global	??_writeSPIByte
   992  0020                     ??_writeSPIByte:	; 0 bytes @ 0x0
   993                           	global	??_initEEPROMMode
   994  0020                     ??_initEEPROMMode:	; 0 bytes @ 0x0
   995                           	global	??_lcd_write_control
   996  0020                     ??_lcd_write_control:	; 0 bytes @ 0x0
   997                           	global	??_lcd_write_data
   998  0020                     ??_lcd_write_data:	; 0 bytes @ 0x0
   999                           	global	??_getFinalX
  1000  0020                     ??_getFinalX:	; 0 bytes @ 0x0
  1001                           	global	??_getFinalY
  1002  0020                     ??_getFinalY:	; 0 bytes @ 0x0
  1003                           	global	??_ser_isrx
  1004  0020                     ??_ser_isrx:	; 0 bytes @ 0x0
  1005                           	global	??_ser_getch
  1006  0020                     ??_ser_getch:	; 0 bytes @ 0x0
  1007                           	global	??_ser_init
  1008  0020                     ??_ser_init:	; 0 bytes @ 0x0
  1009                           	global	?_rotateIR
  1010  0020                     ?_rotateIR:	; 0 bytes @ 0x0
  1011                           	global	??_getOrientation
  1012  0020                     ??_getOrientation:	; 0 bytes @ 0x0
  1013                           	global	??_getSomethingInTheWay
  1014  0020                     ??_getSomethingInTheWay:	; 0 bytes @ 0x0
  1015                           	global	??_getSuccessfulDrive
  1016  0020                     ??_getSuccessfulDrive:	; 0 bytes @ 0x0
  1017                           	global	??_updateNode
  1018  0020                     ??_updateNode:	; 0 bytes @ 0x0
  1019                           	global	?_getVictimZone
  1020  0020                     ?_getVictimZone:	; 1 bytes @ 0x0
  1021                           	global	?___wmul
  1022  0020                     ?___wmul:	; 2 bytes @ 0x0
  1023                           	global	writeSPIByte@data
  1024  0020                     writeSPIByte@data:	; 1 bytes @ 0x0
  1025                           	global	getVictimZone@victimY
  1026  0020                     getVictimZone@victimY:	; 1 bytes @ 0x0
  1027                           	global	rotateIR@direction
  1028  0020                     rotateIR@direction:	; 1 bytes @ 0x0
  1029                           	global	___wmul@multiplier
  1030  0020                     ___wmul@multiplier:	; 2 bytes @ 0x0
  1031  0020                     	ds	1
  1032                           	global	?_writeEEPROM
  1033  0021                     ?_writeEEPROM:	; 0 bytes @ 0x1
  1034                           	global	??_getVictimZone
  1035  0021                     ??_getVictimZone:	; 0 bytes @ 0x1
  1036                           	global	??_rotateIR
  1037  0021                     ??_rotateIR:	; 0 bytes @ 0x1
  1038                           	global	writeEEPROM@addressH
  1039  0021                     writeEEPROM@addressH:	; 1 bytes @ 0x1
  1040                           	global	ser_getch@c
  1041  0021                     ser_getch@c:	; 1 bytes @ 0x1
  1042                           	global	ser_putch@c
  1043  0021                     ser_putch@c:	; 1 bytes @ 0x1
  1044                           	global	updateOrientation@moved
  1045  0021                     updateOrientation@moved:	; 1 bytes @ 0x1
  1046  0021                     	ds	1
  1047                           	global	?_waitFor
  1048  0022                     ?_waitFor:	; 0 bytes @ 0x2
  1049                           	global	??_initIRobot
  1050  0022                     ??_initIRobot:	; 0 bytes @ 0x2
  1051                           	global	?_ser_putArr
  1052  0022                     ?_ser_putArr:	; 0 bytes @ 0x2
  1053                           	global	??_play_iCreate_song
  1054  0022                     ??_play_iCreate_song:	; 0 bytes @ 0x2
  1055                           	global	?_drive
  1056  0022                     ?_drive:	; 0 bytes @ 0x2
  1057                           	global	writeEEPROM@addressL
  1058  0022                     writeEEPROM@addressL:	; 1 bytes @ 0x2
  1059                           	global	lcd_write_control@databyte
  1060  0022                     lcd_write_control@databyte:	; 1 bytes @ 0x2
  1061                           	global	lcd_write_data@databyte
  1062  0022                     lcd_write_data@databyte:	; 1 bytes @ 0x2
  1063                           	global	getVictimZone@victimX
  1064  0022                     getVictimZone@victimX:	; 1 bytes @ 0x2
  1065                           	global	play_iCreate_song@song
  1066  0022                     play_iCreate_song@song:	; 1 bytes @ 0x2
  1067                           	global	drive@lowByteSpeed
  1068  0022                     drive@lowByteSpeed:	; 1 bytes @ 0x2
  1069                           	global	waitFor@highByte
  1070  0022                     waitFor@highByte:	; 1 bytes @ 0x2
  1071                           	global	ser_putArr@array
  1072  0022                     ser_putArr@array:	; 2 bytes @ 0x2
  1073                           	global	___wmul@multiplicand
  1074  0022                     ___wmul@multiplicand:	; 2 bytes @ 0x2
  1075  0022                     	ds	1
  1076                           	global	??_lcd_write_string
  1077  0023                     ??_lcd_write_string:	; 0 bytes @ 0x3
  1078                           	global	??_writeEEPROM
  1079  0023                     ??_writeEEPROM:	; 0 bytes @ 0x3
  1080                           	global	??_lcd_set_cursor
  1081  0023                     ??_lcd_set_cursor:	; 0 bytes @ 0x3
  1082                           	global	??_lcd_write_1_digit_bcd
  1083  0023                     ??_lcd_write_1_digit_bcd:	; 0 bytes @ 0x3
  1084                           	global	??_lcd_init
  1085  0023                     ??_lcd_init:	; 0 bytes @ 0x3
  1086                           	global	lcd_set_cursor@address
  1087  0023                     lcd_set_cursor@address:	; 1 bytes @ 0x3
  1088                           	global	lcd_write_1_digit_bcd@data
  1089  0023                     lcd_write_1_digit_bcd@data:	; 1 bytes @ 0x3
  1090                           	global	drive@highByteRadius
  1091  0023                     drive@highByteRadius:	; 1 bytes @ 0x3
  1092                           	global	waitFor@lowByte
  1093  0023                     waitFor@lowByte:	; 1 bytes @ 0x3
  1094  0023                     	ds	1
  1095                           	global	??_waitFor
  1096  0024                     ??_waitFor:	; 0 bytes @ 0x4
  1097                           	global	?_findFinalDestination
  1098  0024                     ?_findFinalDestination:	; 0 bytes @ 0x4
  1099                           	global	??_checkForFinalDestination
  1100  0024                     ??_checkForFinalDestination:	; 0 bytes @ 0x4
  1101                           	global	??_lookForVictim
  1102  0024                     ??_lookForVictim:	; 0 bytes @ 0x4
  1103                           	global	??_updateLocation
  1104  0024                     ??_updateLocation:	; 0 bytes @ 0x4
  1105                           	global	??___wmul
  1106  0024                     ??___wmul:	; 0 bytes @ 0x4
  1107                           	global	lcd_write_string@s
  1108  0024                     lcd_write_string@s:	; 1 bytes @ 0x4
  1109                           	global	findFinalDestination@virtualWallY
  1110  0024                     findFinalDestination@virtualWallY:	; 1 bytes @ 0x4
  1111                           	global	rotateIR@steps
  1112  0024                     rotateIR@steps:	; 1 bytes @ 0x4
  1113                           	global	drive@lowByteRadius
  1114  0024                     drive@lowByteRadius:	; 1 bytes @ 0x4
  1115                           	global	ser_putArr@length
  1116  0024                     ser_putArr@length:	; 2 bytes @ 0x4
  1117                           	global	___wmul@product
  1118  0024                     ___wmul@product:	; 2 bytes @ 0x4
  1119  0024                     	ds	1
  1120                           	global	??_drive
  1121  0025                     ??_drive:	; 0 bytes @ 0x5
  1122                           	global	findFinalDestination@robotOrientation
  1123  0025                     findFinalDestination@robotOrientation:	; 1 bytes @ 0x5
  1124                           	global	rotateIR@stepNum
  1125  0025                     rotateIR@stepNum:	; 1 bytes @ 0x5
  1126  0025                     	ds	1
  1127                           	global	??_findFinalDestination
  1128  0026                     ??_findFinalDestination:	; 0 bytes @ 0x6
  1129                           	global	??_ser_putArr
  1130  0026                     ??_ser_putArr:	; 0 bytes @ 0x6
  1131                           	global	?___awdiv
  1132  0026                     ?___awdiv:	; 2 bytes @ 0x6
  1133                           	global	writeEEPROM@data
  1134  0026                     writeEEPROM@data:	; 1 bytes @ 0x6
  1135                           	global	lookForVictim@victim
  1136  0026                     lookForVictim@victim:	; 1 bytes @ 0x6
  1137                           	global	___awdiv@divisor
  1138  0026                     ___awdiv@divisor:	; 2 bytes @ 0x6
  1139  0026                     	ds	1
  1140                           	global	??_addNewData
  1141  0027                     ??_addNewData:	; 0 bytes @ 0x7
  1142                           	global	findFinalDestination@virtualWallX
  1143  0027                     findFinalDestination@virtualWallX:	; 1 bytes @ 0x7
  1144                           	global	waitFor@type
  1145  0027                     waitFor@type:	; 1 bytes @ 0x7
  1146  0027                     	ds	1
  1147                           	global	addNewData@data
  1148  0028                     addNewData@data:	; 1 bytes @ 0x8
  1149                           	global	drive@highByteSpeed
  1150  0028                     drive@highByteSpeed:	; 1 bytes @ 0x8
  1151                           	global	___awdiv@dividend
  1152  0028                     ___awdiv@dividend:	; 2 bytes @ 0x8
  1153  0028                     	ds	1
  1154                           	global	??_goReverse
  1155  0029                     ??_goReverse:	; 0 bytes @ 0x9
  1156                           	global	??_turnRight90
  1157  0029                     ??_turnRight90:	; 0 bytes @ 0x9
  1158                           	global	??_turnLeft90
  1159  0029                     ??_turnLeft90:	; 0 bytes @ 0x9
  1160                           	global	??_turnAround
  1161  0029                     ??_turnAround:	; 0 bytes @ 0x9
  1162                           	global	?_updateMapData
  1163  0029                     ?_updateMapData:	; 0 bytes @ 0x9
  1164                           	global	??_checkIfHome
  1165  0029                     ??_checkIfHome:	; 0 bytes @ 0x9
  1166                           	global	updateMapData@virtualS
  1167  0029                     updateMapData@virtualS:	; 1 bytes @ 0x9
  1168                           	global	ser_putArr@i
  1169  0029                     ser_putArr@i:	; 2 bytes @ 0x9
  1170  0029                     	ds	1
  1171                           	global	??___awdiv
  1172  002A                     ??___awdiv:	; 0 bytes @ 0xA
  1173                           	global	updateMapData@virtualE
  1174  002A                     updateMapData@virtualE:	; 1 bytes @ 0xA
  1175  002A                     	ds	1
  1176                           	global	??_initSongs
  1177  002B                     ??_initSongs:	; 0 bytes @ 0xB
  1178                           	global	??_init
  1179  002B                     ??_init:	; 0 bytes @ 0xB
  1180                           	global	updateMapData@virtualN
  1181  002B                     updateMapData@virtualN:	; 1 bytes @ 0xB
  1182                           	global	___awdiv@counter
  1183  002B                     ___awdiv@counter:	; 1 bytes @ 0xB
  1184  002B                     	ds	1
  1185                           	global	?_driveForDistance
  1186  002C                     ?_driveForDistance:	; 0 bytes @ 0xC
  1187                           	global	updateMapData@victim
  1188  002C                     updateMapData@victim:	; 1 bytes @ 0xC
  1189                           	global	___awdiv@sign
  1190  002C                     ___awdiv@sign:	; 1 bytes @ 0xC
  1191                           	global	driveForDistance@moveDistance
  1192  002C                     driveForDistance@moveDistance:	; 2 bytes @ 0xC
  1193  002C                     	ds	1
  1194                           	global	updateMapData@move
  1195  002D                     updateMapData@move:	; 1 bytes @ 0xD
  1196                           	global	___awdiv@quotient
  1197  002D                     ___awdiv@quotient:	; 2 bytes @ 0xD
  1198  002D                     	ds	1
  1199                           	global	??_updateMapData
  1200  002E                     ??_updateMapData:	; 0 bytes @ 0xE
  1201                           	global	??_driveForDistance
  1202  002E                     ??_driveForDistance:	; 0 bytes @ 0xE
  1203  002E                     	ds	1
  1204                           	global	?_adc_read
  1205  002F                     ?_adc_read:	; 2 bytes @ 0xF
  1206  002F                     	ds	1
  1207                           	global	updateMapData@virtualW
  1208  0030                     updateMapData@virtualW:	; 1 bytes @ 0x10
  1209                           	global	driveForDistance@deltaDistance
  1210  0030                     driveForDistance@deltaDistance:	; 2 bytes @ 0x10
  1211  0030                     	ds	1
  1212                           	global	??_adc_read
  1213  0031                     ??_adc_read:	; 0 bytes @ 0x11
  1214                           	global	updateMapData@completeData
  1215  0031                     updateMapData@completeData:	; 1 bytes @ 0x11
  1216  0031                     	ds	1
  1217                           	global	driveForDistance@distance
  1218  0032                     driveForDistance@distance:	; 2 bytes @ 0x12
  1219  0032                     	ds	2
  1220                           	global	driveForDistance@high
  1221  0034                     driveForDistance@high:	; 1 bytes @ 0x14
  1222  0034                     	ds	1
  1223                           	global	driveForDistance@low
  1224  0035                     driveForDistance@low:	; 1 bytes @ 0x15
  1225                           	global	adc_read@adc_value
  1226  0035                     adc_read@adc_value:	; 2 bytes @ 0x15
  1227  0035                     	ds	1
  1228                           	global	driveForDistance@virtualWall
  1229  0036                     driveForDistance@virtualWall:	; 1 bytes @ 0x16
  1230  0036                     	ds	1
  1231                           	global	?_convert
  1232  0037                     ?_convert:	; 2 bytes @ 0x17
  1233                           	global	driveForDistance@cliff
  1234  0037                     driveForDistance@cliff:	; 1 bytes @ 0x17
  1235                           	global	convert@adc_value
  1236  0037                     convert@adc_value:	; 2 bytes @ 0x17
  1237  0037                     	ds	1
  1238                           	global	??_goBackward
  1239  0038                     ??_goBackward:	; 0 bytes @ 0x18
  1240                           	global	??_goForward
  1241  0038                     ??_goForward:	; 0 bytes @ 0x18
  1242                           	global	??_goLeft
  1243  0038                     ??_goLeft:	; 0 bytes @ 0x18
  1244                           	global	??_goRight
  1245  0038                     ??_goRight:	; 0 bytes @ 0x18
  1246  0038                     	ds	1
  1247                           	global	??_convert
  1248  0039                     ??_convert:	; 0 bytes @ 0x19
  1249                           	global	??_goToNextCell
  1250  0039                     ??_goToNextCell:	; 0 bytes @ 0x19
  1251  0039                     	ds	2
  1252                           	global	?_adc_read_channel
  1253  003B                     ?_adc_read_channel:	; 2 bytes @ 0x1B
  1254  003B                     	ds	2
  1255                           	global	??_adc_read_channel
  1256  003D                     ??_adc_read_channel:	; 0 bytes @ 0x1D
  1257  003D                     	ds	1
  1258                           	global	adc_read_channel@channel
  1259  003E                     adc_read_channel@channel:	; 1 bytes @ 0x1E
  1260  003E                     	ds	1
  1261                           	global	?_readIR
  1262  003F                     ?_readIR:	; 2 bytes @ 0x1F
  1263  003F                     	ds	2
  1264                           	global	??_readIR
  1265  0041                     ??_readIR:	; 0 bytes @ 0x21
  1266                           	global	readIR@cm
  1267  0041                     readIR@cm:	; 2 bytes @ 0x21
  1268  0041                     	ds	2
  1269                           	global	??_findWall
  1270  0043                     ??_findWall:	; 0 bytes @ 0x23
  1271                           	global	??_wallFollow
  1272  0043                     ??_wallFollow:	; 0 bytes @ 0x23
  1273                           	global	??_frontWallCorrect
  1274  0043                     ??_frontWallCorrect:	; 0 bytes @ 0x23
  1275                           	global	??_findWalls
  1276  0043                     ??_findWalls:	; 0 bytes @ 0x23
  1277  0043                     	ds	2
  1278                           	global	frontWallCorrect@distToWall
  1279  0045                     frontWallCorrect@distToWall:	; 2 bytes @ 0x25
  1280  0045                     	ds	1
  1281                           	global	wallFollow@distanceToWall
  1282  0046                     wallFollow@distanceToWall:	; 2 bytes @ 0x26
  1283  0046                     	ds	2
  1284                           	global	??_main
  1285  0048                     ??_main:	; 0 bytes @ 0x28
  1286  0048                     	ds	1
  1287 ;;Data sizes: Strings 63, constant 0, data 117, bss 54, persistent 0 stack 0
  1288 ;;Auto spaces:   Size  Autos    Used
  1289 ;; COMMON          14     10      14
  1290 ;; BANK0           80     41      76
  1291 ;; BANK1           80      0      78
  1292 ;; BANK3           96      0      56
  1293 ;; BANK2           96      0       0
  1294                           
  1295 ;;
  1296 ;; Pointer list with targets:
  1297                           
  1298 ;; ?_readIR	int  size(1) Largest target is 0
  1299 ;;
  1300 ;; ?_convert	int  size(1) Largest target is 2
  1301 ;;		 -> convert@adc_value(BANK0[2]), 
  1302 ;;
  1303 ;; ?___wmul	unsigned int  size(1) Largest target is 0
  1304 ;;
  1305 ;; ?_adc_read	int  size(1) Largest target is 0
  1306 ;;
  1307 ;; ?___awdiv	int  size(1) Largest target is 0
  1308 ;;
  1309 ;; ?_adc_read_channel	int  size(1) Largest target is 0
  1310 ;;
  1311 ;; ser_putArr@array	PTR unsigned char  size(2) Largest target is 29
  1312 ;;		 -> longbeep(BANK0[5]), beep(BANK0[5]), champions(BANK1[21]), lookingForU2(BANK3[29]), 
  1313 ;;		 -> superMarioBros(BANK1[25]), finalCountdown(BANK3[27]), 
  1314 ;;
  1315 ;; lcd_write_string@s	PTR const unsigned char  size(1) Largest target is 17
  1316 ;;		 -> STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[14]), STR_1(CODE[15]), 
  1317 ;;
  1318                           
  1319                           
  1320 ;;
  1321 ;; Critical Paths under _main in COMMON
  1322 ;;
  1323 ;;   None.
  1324 ;;
  1325 ;; Critical Paths under _isr1 in COMMON
  1326 ;;
  1327 ;;   None.
  1328 ;;
  1329 ;; Critical Paths under _main in BANK0
  1330 ;;
  1331 ;;   _main->_wallFollow
  1332 ;;   _goToNextCell->_goRight
  1333 ;;   _goToNextCell->_goBackward
  1334 ;;   _goRight->_driveForDistance
  1335 ;;   _goLeft->_driveForDistance
  1336 ;;   _goForward->_driveForDistance
  1337 ;;   _goBackward->_driveForDistance
  1338 ;;   _wallFollow->_readIR
  1339 ;;   _findWall->_readIR
  1340 ;;   _frontWallCorrect->_readIR
  1341 ;;   _driveForDistance->_goReverse
  1342 ;;   _driveForDistance->_turnRight90
  1343 ;;   _driveForDistance->_turnLeft90
  1344 ;;   _updateLocation->_lcd_set_cursor
  1345 ;;   _updateLocation->_lcd_write_1_digit_bcd
  1346 ;;   _lookForVictim->_lcd_set_cursor
  1347 ;;   _lookForVictim->_lcd_write_1_digit_bcd
  1348 ;;   _checkForFinalDestination->_lcd_set_cursor
  1349 ;;   _goReverse->_drive
  1350 ;;   _readIR->_adc_read_channel
  1351 ;;   _findFinalDestination->_lcd_set_cursor
  1352 ;;   _findFinalDestination->_lcd_write_1_digit_bcd
  1353 ;;   _updateMapData->_addNewData
  1354 ;;   _checkIfHome->_drive
  1355 ;;   _turnAround->_drive
  1356 ;;   _turnLeft90->_drive
  1357 ;;   _turnRight90->_drive
  1358 ;;   _initSongs->_ser_putArr
  1359 ;;   _lcd_init->_lcd_write_control
  1360 ;;   _lcd_write_1_digit_bcd->_lcd_write_data
  1361 ;;   _lcd_set_cursor->_lcd_write_control
  1362 ;;   _addNewData->_writeEEPROM
  1363 ;;   _lcd_write_string->_lcd_write_data
  1364 ;;   _adc_read_channel->_convert
  1365 ;;   _initIRobot->_ser_putch
  1366 ;;   _waitFor->_ser_putch
  1367 ;;   _drive->_ser_putch
  1368 ;;   _convert->_adc_read
  1369 ;;   _play_iCreate_song->_ser_putch
  1370 ;;   _ser_putArr->_ser_putch
  1371 ;;   _writeEEPROM->_initEEPROMMode
  1372 ;;   _writeEEPROM->_writeSPIByte
  1373 ;;   _adc_read->___awdiv
  1374 ;;   ___awdiv->___wmul
  1375 ;;
  1376 ;; Critical Paths under _isr1 in BANK0
  1377 ;;
  1378 ;;   None.
  1379 ;;
  1380 ;; Critical Paths under _main in BANK1
  1381 ;;
  1382 ;;   None.
  1383 ;;
  1384 ;; Critical Paths under _isr1 in BANK1
  1385 ;;
  1386 ;;   None.
  1387 ;;
  1388 ;; Critical Paths under _main in BANK3
  1389 ;;
  1390 ;;   None.
  1391 ;;
  1392 ;; Critical Paths under _isr1 in BANK3
  1393 ;;
  1394 ;;   None.
  1395 ;;
  1396 ;; Critical Paths under _main in BANK2
  1397 ;;
  1398 ;;   None.
  1399 ;;
  1400 ;; Critical Paths under _isr1 in BANK2
  1401 ;;
  1402 ;;   None.
  1403                           
  1404 ;;
  1405 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1406 ;;
  1407                           
  1408 ;;
  1409 ;;Call Graph Tables:
  1410 ;;
  1411 ;; ---------------------------------------------------------------------------------
  1412 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1413 ;; ---------------------------------------------------------------------------------
  1414 ;; (0) _main                                                 1     1      0   16191
  1415 ;;                                             40 BANK0      1     1      0
  1416 ;;                               _init
  1417 ;;                              _drive
  1418 ;;                     _lcd_set_cursor
  1419 ;;                   _lcd_write_string
  1420 ;;           _checkForFinalDestination
  1421 ;;                      _lookForVictim
  1422 ;;                          _findWalls
  1423 ;;                  _play_iCreate_song
  1424 ;;                           _rotateIR
  1425 ;;                         _wallFollow
  1426 ;;                   _frontWallCorrect
  1427 ;;                       _goToNextCell
  1428 ;;                            _goRight
  1429 ;;                     _getOrientation
  1430 ;;                          _goForward
  1431 ;;                             _goLeft
  1432 ;;                 _getSuccessfulDrive
  1433 ;;                      _updateMapData
  1434 ;;                     _updateLocation
  1435 ;;                         _updateNode
  1436 ;;                        _checkIfHome
  1437 ;; ---------------------------------------------------------------------------------
  1438 ;; (1) _goToNextCell                                         0     0      0    6256
  1439 ;;               _getSomethingInTheWay
  1440 ;;                             _goLeft
  1441 ;;                          _goForward
  1442 ;;                            _goRight
  1443 ;;                         _goBackward
  1444 ;; ---------------------------------------------------------------------------------
  1445 ;; (1) _findWalls                                            1     1      0    1225
  1446 ;;                                             35 BANK0      1     1      0
  1447 ;;                           _rotateIR
  1448 ;;                     _lcd_set_cursor
  1449 ;;                           _findWall
  1450 ;;                     _lcd_write_data
  1451 ;;                  _play_iCreate_song
  1452 ;; ---------------------------------------------------------------------------------
  1453 ;; (1) _goRight                                              1     1      0    1619
  1454 ;;                                             24 BANK0      1     1      0
  1455 ;;                     _lcd_set_cursor
  1456 ;;                     _lcd_write_data
  1457 ;;                        _turnRight90
  1458 ;;                  _updateOrientation
  1459 ;;                   _driveForDistance
  1460 ;; ---------------------------------------------------------------------------------
  1461 ;; (1) _goLeft                                               0     0      0    1619
  1462 ;;                     _lcd_set_cursor
  1463 ;;                     _lcd_write_data
  1464 ;;                         _turnLeft90
  1465 ;;                  _updateOrientation
  1466 ;;                   _driveForDistance
  1467 ;; ---------------------------------------------------------------------------------
  1468 ;; (1) _goForward                                            0     0      0    1399
  1469 ;;                     _lcd_set_cursor
  1470 ;;                     _lcd_write_data
  1471 ;;                        _getCurrentX
  1472 ;;                        _getCurrentY
  1473 ;;                   _driveForDistance
  1474 ;; ---------------------------------------------------------------------------------
  1475 ;; (2) _goBackward                                           1     1      0    1619
  1476 ;;                                             24 BANK0      1     1      0
  1477 ;;                     _lcd_set_cursor
  1478 ;;                     _lcd_write_data
  1479 ;;                         _turnAround
  1480 ;;                  _updateOrientation
  1481 ;;                   _driveForDistance
  1482 ;; ---------------------------------------------------------------------------------
  1483 ;; (1) _wallFollow                                           5     5      0    1311
  1484 ;;                                             35 BANK0      5     5      0
  1485 ;;                             _readIR
  1486 ;;                              _drive
  1487 ;;                            _waitFor
  1488 ;; ---------------------------------------------------------------------------------
  1489 ;; (2) _findWall                                             0     0      0    1046
  1490 ;;                             _readIR
  1491 ;; ---------------------------------------------------------------------------------
  1492 ;; (1) _frontWallCorrect                                     4     4      0    1247
  1493 ;;                                             35 BANK0      4     4      0
  1494 ;;                             _readIR
  1495 ;;                              _drive
  1496 ;;               _clearSuccessfulDrive
  1497 ;; ---------------------------------------------------------------------------------
  1498 ;; (2) _driveForDistance                                    12    10      2    1332
  1499 ;;                                             12 BANK0     12    10      2
  1500 ;;                              _drive
  1501 ;;                          _ser_putch
  1502 ;;                          _ser_getch
  1503 ;;                          _goReverse
  1504 ;;               _clearSuccessfulDrive
  1505 ;;                        _getCurrentY
  1506 ;;                        _getCurrentX
  1507 ;;               _findFinalDestination
  1508 ;;                        _turnRight90
  1509 ;;                  _updateOrientation
  1510 ;;                         _turnLeft90
  1511 ;; ---------------------------------------------------------------------------------
  1512 ;; (1) _updateLocation                                       1     1      0     111
  1513 ;;                                              4 BANK0      1     1      0
  1514 ;;                     _lcd_set_cursor
  1515 ;;                     _lcd_write_data
  1516 ;;                     _getOrientation
  1517 ;;              _lcd_write_1_digit_bcd
  1518 ;; ---------------------------------------------------------------------------------
  1519 ;; (1) _lookForVictim                                        3     3      0     377
  1520 ;;                                              4 BANK0      3     3      0
  1521 ;;                          _ser_putch
  1522 ;;                          _ser_getch
  1523 ;;                  _play_iCreate_song
  1524 ;;                     _lcd_set_cursor
  1525 ;;                     _lcd_write_data
  1526 ;;                      _getVictimZone
  1527 ;;              _lcd_write_1_digit_bcd
  1528 ;; ---------------------------------------------------------------------------------
  1529 ;; (1) _checkForFinalDestination                             0     0      0     111
  1530 ;;                          _getFinalX
  1531 ;;                          _getFinalY
  1532 ;;                  _play_iCreate_song
  1533 ;;                     _lcd_set_cursor
  1534 ;;                     _lcd_write_data
  1535 ;; ---------------------------------------------------------------------------------
  1536 ;; (1) _init                                                 0     0      0     156
  1537 ;;                           _init_adc
  1538 ;;                           _lcd_init
  1539 ;;                           _ser_init
  1540 ;;                         _initIRobot
  1541 ;;                          _initSongs
  1542 ;; ---------------------------------------------------------------------------------
  1543 ;; (3) _goReverse                                            3     3      0     265
  1544 ;;                                              9 BANK0      3     3      0
  1545 ;;                     _lcd_set_cursor
  1546 ;;                     _lcd_write_data
  1547 ;;                              _drive
  1548 ;;                            _waitFor
  1549 ;; ---------------------------------------------------------------------------------
  1550 ;; (2) _readIR                                               4     2      2    1046
  1551 ;;                                             31 BANK0      4     2      2
  1552 ;;                   _adc_read_channel
  1553 ;;                            _convert
  1554 ;; ---------------------------------------------------------------------------------
  1555 ;; (3) _findFinalDestination                                 4     2      2     287
  1556 ;;                                              4 BANK0      4     2      2
  1557 ;;                     _lcd_set_cursor
  1558 ;;              _lcd_write_1_digit_bcd
  1559 ;;                        _getCurrentY (ARG)
  1560 ;;                        _getCurrentX (ARG)
  1561 ;; ---------------------------------------------------------------------------------
  1562 ;; (1) _updateMapData                                        9     4      5     272
  1563 ;;                                              9 BANK0      9     4      5
  1564 ;;                         _addNewData
  1565 ;;                     _getOrientation (ARG)
  1566 ;; ---------------------------------------------------------------------------------
  1567 ;; (1) _checkIfHome                                          0     0      0     154
  1568 ;;                              _drive
  1569 ;;                  _play_iCreate_song
  1570 ;; ---------------------------------------------------------------------------------
  1571 ;; (3) _turnAround                                           3     3      0     198
  1572 ;;                                              9 BANK0      3     3      0
  1573 ;;                              _drive
  1574 ;;                            _waitFor
  1575 ;; ---------------------------------------------------------------------------------
  1576 ;; (3) _turnLeft90                                           3     3      0     198
  1577 ;;                                              9 BANK0      3     3      0
  1578 ;;                              _drive
  1579 ;;                        _getCurrentX
  1580 ;;                        _getCurrentY
  1581 ;;                            _waitFor
  1582 ;; ---------------------------------------------------------------------------------
  1583 ;; (3) _turnRight90                                          3     3      0     198
  1584 ;;                                              9 BANK0      3     3      0
  1585 ;;                              _drive
  1586 ;;                            _waitFor
  1587 ;; ---------------------------------------------------------------------------------
  1588 ;; (2) _initSongs                                            0     0      0     112
  1589 ;;                         _ser_putArr
  1590 ;; ---------------------------------------------------------------------------------
  1591 ;; (2) _lcd_init                                             0     0      0      22
  1592 ;;                  _lcd_write_control
  1593 ;; ---------------------------------------------------------------------------------
  1594 ;; (2) _lcd_write_1_digit_bcd                                1     1      0      44
  1595 ;;                                              3 BANK0      1     1      0
  1596 ;;                     _lcd_write_data
  1597 ;; ---------------------------------------------------------------------------------
  1598 ;; (2) _lcd_set_cursor                                       1     1      0      45
  1599 ;;                                              3 BANK0      1     1      0
  1600 ;;                  _lcd_write_control
  1601 ;; ---------------------------------------------------------------------------------
  1602 ;; (2) _addNewData                                           2     2      0     110
  1603 ;;                                              7 BANK0      2     2      0
  1604 ;;                        _writeEEPROM
  1605 ;; ---------------------------------------------------------------------------------
  1606 ;; (1) _lcd_write_string                                     2     2      0      67
  1607 ;;                                              3 BANK0      2     2      0
  1608 ;;                     _lcd_write_data
  1609 ;; ---------------------------------------------------------------------------------
  1610 ;; (3) _adc_read_channel                                     4     2      2     345
  1611 ;;                                             27 BANK0      4     2      2
  1612 ;;                           _adc_read
  1613 ;;                            _convert (ARG)
  1614 ;; ---------------------------------------------------------------------------------
  1615 ;; (2) _initIRobot                                           3     3      0      22
  1616 ;;                                              2 BANK0      3     3      0
  1617 ;;                          _ser_putch
  1618 ;; ---------------------------------------------------------------------------------
  1619 ;; (4) _waitFor                                              6     4      2      88
  1620 ;;                                              2 BANK0      6     4      2
  1621 ;;                          _ser_putch
  1622 ;; ---------------------------------------------------------------------------------
  1623 ;; (2) _drive                                                7     4      3     110
  1624 ;;                                              2 BANK0      7     4      3
  1625 ;;                          _ser_putch
  1626 ;; ---------------------------------------------------------------------------------
  1627 ;; (1) _rotateIR                                             6     5      1      68
  1628 ;;                                              0 BANK0      6     5      1
  1629 ;; ---------------------------------------------------------------------------------
  1630 ;; (3) _convert                                              4     2      2     678
  1631 ;;                                             23 BANK0      4     2      2
  1632 ;;                             ___wmul
  1633 ;;                            ___awdiv
  1634 ;;                           _adc_read (ARG)
  1635 ;; ---------------------------------------------------------------------------------
  1636 ;; (2) _play_iCreate_song                                    1     1      0      44
  1637 ;;                                              2 BANK0      1     1      0
  1638 ;;                          _ser_putch
  1639 ;; ---------------------------------------------------------------------------------
  1640 ;; (3) _ser_putArr                                           9     5      4     112
  1641 ;;                                              2 BANK0      9     5      4
  1642 ;;                          _ser_putch
  1643 ;; ---------------------------------------------------------------------------------
  1644 ;; (3) _ser_getch                                            2     2      0      23
  1645 ;;                                              0 BANK0      2     2      0
  1646 ;;                           _ser_isrx
  1647 ;; ---------------------------------------------------------------------------------
  1648 ;; (3) _lcd_write_data                                       3     3      0      22
  1649 ;;                                              0 BANK0      3     3      0
  1650 ;; ---------------------------------------------------------------------------------
  1651 ;; (3) _lcd_write_control                                    3     3      0      22
  1652 ;;                                              0 BANK0      3     3      0
  1653 ;; ---------------------------------------------------------------------------------
  1654 ;; (3) _writeEEPROM                                          6     4      2      88
  1655 ;;                                              1 BANK0      6     4      2
  1656 ;;                     _initEEPROMMode
  1657 ;;                       _writeSPIByte
  1658 ;; ---------------------------------------------------------------------------------
  1659 ;; (2) _init_adc                                             1     1      0       0
  1660 ;;                                              0 BANK0      1     1      0
  1661 ;; ---------------------------------------------------------------------------------
  1662 ;; (4) _adc_read                                             8     6      2     323
  1663 ;;                                             15 BANK0      8     6      2
  1664 ;;                            ___awdiv
  1665 ;; ---------------------------------------------------------------------------------
  1666 ;; (4) ___awdiv                                              9     5      4     300
  1667 ;;                                              6 BANK0      9     5      4
  1668 ;;                             ___wmul (ARG)
  1669 ;; ---------------------------------------------------------------------------------
  1670 ;; (4) ___wmul                                               6     2      4      92
  1671 ;;                                              0 BANK0      6     2      4
  1672 ;; ---------------------------------------------------------------------------------
  1673 ;; (1) _updateNode                                           1     1      0       0
  1674 ;;                                              0 BANK0      1     1      0
  1675 ;; ---------------------------------------------------------------------------------
  1676 ;; (1) _getSuccessfulDrive                                   0     0      0       0
  1677 ;; ---------------------------------------------------------------------------------
  1678 ;; (2) _getSomethingInTheWay                                 0     0      0       0
  1679 ;; ---------------------------------------------------------------------------------
  1680 ;; (2) _getOrientation                                       0     0      0       0
  1681 ;; ---------------------------------------------------------------------------------
  1682 ;; (3) _updateOrientation                                    2     2      0      22
  1683 ;;                                              0 BANK0      2     2      0
  1684 ;; ---------------------------------------------------------------------------------
  1685 ;; (4) _getCurrentY                                          0     0      0       0
  1686 ;; ---------------------------------------------------------------------------------
  1687 ;; (4) _getCurrentX                                          0     0      0       0
  1688 ;; ---------------------------------------------------------------------------------
  1689 ;; (3) _clearSuccessfulDrive                                 0     0      0       0
  1690 ;; ---------------------------------------------------------------------------------
  1691 ;; (2) _ser_init                                             1     1      0       0
  1692 ;;                                              0 BANK0      1     1      0
  1693 ;; ---------------------------------------------------------------------------------
  1694 ;; (4) _ser_isrx                                             0     0      0       0
  1695 ;; ---------------------------------------------------------------------------------
  1696 ;; (2) _getVictimZone                                        3     2      1     132
  1697 ;;                                              0 BANK0      3     2      1
  1698 ;; ---------------------------------------------------------------------------------
  1699 ;; (2) _getFinalY                                            0     0      0       0
  1700 ;; ---------------------------------------------------------------------------------
  1701 ;; (2) _getFinalX                                            0     0      0       0
  1702 ;; ---------------------------------------------------------------------------------
  1703 ;; (3) _ser_putch                                            2     2      0      22
  1704 ;;                                              0 BANK0      2     2      0
  1705 ;; ---------------------------------------------------------------------------------
  1706 ;; (4) _initEEPROMMode                                       1     1      0       0
  1707 ;;                                              0 BANK0      1     1      0
  1708 ;; ---------------------------------------------------------------------------------
  1709 ;; (4) _writeSPIByte                                         1     1      0      22
  1710 ;;                                              0 BANK0      1     1      0
  1711 ;; ---------------------------------------------------------------------------------
  1712 ;; Estimated maximum stack depth 4
  1713 ;; ---------------------------------------------------------------------------------
  1714 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1715 ;; ---------------------------------------------------------------------------------
  1716 ;; (7) _isr1                                                10    10      0       0
  1717 ;;                                              0 COMMON    10    10      0
  1718 ;; ---------------------------------------------------------------------------------
  1719 ;; Estimated maximum stack depth 7
  1720 ;; ---------------------------------------------------------------------------------
  1721                           
  1722 ;; Call Graph Graphs:
  1723                           
  1724 ;; _main (ROOT)
  1725 ;;   _init
  1726 ;;     _init_adc
  1727 ;;     _lcd_init
  1728 ;;       _lcd_write_control
  1729 ;;     _ser_init
  1730 ;;     _initIRobot
  1731 ;;       _ser_putch
  1732 ;;     _initSongs
  1733 ;;       _ser_putArr
  1734 ;;         _ser_putch
  1735 ;;   _drive
  1736 ;;     _ser_putch
  1737 ;;   _lcd_set_cursor
  1738 ;;     _lcd_write_control
  1739 ;;   _lcd_write_string
  1740 ;;     _lcd_write_data
  1741 ;;   _checkForFinalDestination
  1742 ;;     _getFinalX
  1743 ;;     _getFinalY
  1744 ;;     _play_iCreate_song
  1745 ;;       _ser_putch
  1746 ;;     _lcd_set_cursor
  1747 ;;       _lcd_write_control
  1748 ;;     _lcd_write_data
  1749 ;;   _lookForVictim
  1750 ;;     _ser_putch
  1751 ;;     _ser_getch
  1752 ;;       _ser_isrx
  1753 ;;     _play_iCreate_song
  1754 ;;       _ser_putch
  1755 ;;     _lcd_set_cursor
  1756 ;;       _lcd_write_control
  1757 ;;     _lcd_write_data
  1758 ;;     _getVictimZone
  1759 ;;     _lcd_write_1_digit_bcd
  1760 ;;       _lcd_write_data
  1761 ;;   _findWalls
  1762 ;;     _rotateIR
  1763 ;;     _lcd_set_cursor
  1764 ;;       _lcd_write_control
  1765 ;;     _findWall
  1766 ;;       _readIR
  1767 ;;         _adc_read_channel
  1768 ;;           _adc_read
  1769 ;;             ___awdiv
  1770 ;;               ___wmul (ARG)
  1771 ;;           _convert (ARG)
  1772 ;;             ___wmul
  1773 ;;             ___awdiv
  1774 ;;               ___wmul (ARG)
  1775 ;;             _adc_read (ARG)
  1776 ;;               ___awdiv
  1777 ;;                 ___wmul (ARG)
  1778 ;;         _convert
  1779 ;;           ___wmul
  1780 ;;           ___awdiv
  1781 ;;             ___wmul (ARG)
  1782 ;;           _adc_read (ARG)
  1783 ;;             ___awdiv
  1784 ;;               ___wmul (ARG)
  1785 ;;     _lcd_write_data
  1786 ;;     _play_iCreate_song
  1787 ;;       _ser_putch
  1788 ;;   _play_iCreate_song
  1789 ;;     _ser_putch
  1790 ;;   _rotateIR
  1791 ;;   _wallFollow
  1792 ;;     _readIR
  1793 ;;       _adc_read_channel
  1794 ;;         _adc_read
  1795 ;;           ___awdiv
  1796 ;;             ___wmul (ARG)
  1797 ;;         _convert (ARG)
  1798 ;;           ___wmul
  1799 ;;           ___awdiv
  1800 ;;             ___wmul (ARG)
  1801 ;;           _adc_read (ARG)
  1802 ;;             ___awdiv
  1803 ;;               ___wmul (ARG)
  1804 ;;       _convert
  1805 ;;         ___wmul
  1806 ;;         ___awdiv
  1807 ;;           ___wmul (ARG)
  1808 ;;         _adc_read (ARG)
  1809 ;;           ___awdiv
  1810 ;;             ___wmul (ARG)
  1811 ;;     _drive
  1812 ;;       _ser_putch
  1813 ;;     _waitFor
  1814 ;;       _ser_putch
  1815 ;;   _frontWallCorrect
  1816 ;;     _readIR
  1817 ;;       _adc_read_channel
  1818 ;;         _adc_read
  1819 ;;           ___awdiv
  1820 ;;             ___wmul (ARG)
  1821 ;;         _convert (ARG)
  1822 ;;           ___wmul
  1823 ;;           ___awdiv
  1824 ;;             ___wmul (ARG)
  1825 ;;           _adc_read (ARG)
  1826 ;;             ___awdiv
  1827 ;;               ___wmul (ARG)
  1828 ;;       _convert
  1829 ;;         ___wmul
  1830 ;;         ___awdiv
  1831 ;;           ___wmul (ARG)
  1832 ;;         _adc_read (ARG)
  1833 ;;           ___awdiv
  1834 ;;             ___wmul (ARG)
  1835 ;;     _drive
  1836 ;;       _ser_putch
  1837 ;;     _clearSuccessfulDrive
  1838 ;;   _goToNextCell
  1839 ;;     _getSomethingInTheWay
  1840 ;;     _goLeft
  1841 ;;       _lcd_set_cursor
  1842 ;;         _lcd_write_control
  1843 ;;       _lcd_write_data
  1844 ;;       _turnLeft90
  1845 ;;         _drive
  1846 ;;           _ser_putch
  1847 ;;         _getCurrentX
  1848 ;;         _getCurrentY
  1849 ;;         _waitFor
  1850 ;;           _ser_putch
  1851 ;;       _updateOrientation
  1852 ;;       _driveForDistance
  1853 ;;         _drive
  1854 ;;           _ser_putch
  1855 ;;         _ser_putch
  1856 ;;         _ser_getch
  1857 ;;           _ser_isrx
  1858 ;;         _goReverse
  1859 ;;           _lcd_set_cursor
  1860 ;;             _lcd_write_control
  1861 ;;           _lcd_write_data
  1862 ;;           _drive
  1863 ;;             _ser_putch
  1864 ;;           _waitFor
  1865 ;;             _ser_putch
  1866 ;;         _clearSuccessfulDrive
  1867 ;;         _getCurrentY
  1868 ;;         _getCurrentX
  1869 ;;         _findFinalDestination
  1870 ;;           _lcd_set_cursor
  1871 ;;             _lcd_write_control
  1872 ;;           _lcd_write_1_digit_bcd
  1873 ;;             _lcd_write_data
  1874 ;;           _getCurrentY (ARG)
  1875 ;;           _getCurrentX (ARG)
  1876 ;;         _turnRight90
  1877 ;;           _drive
  1878 ;;             _ser_putch
  1879 ;;           _waitFor
  1880 ;;             _ser_putch
  1881 ;;         _updateOrientation
  1882 ;;         _turnLeft90
  1883 ;;           _drive
  1884 ;;             _ser_putch
  1885 ;;           _getCurrentX
  1886 ;;           _getCurrentY
  1887 ;;           _waitFor
  1888 ;;             _ser_putch
  1889 ;;     _goForward
  1890 ;;       _lcd_set_cursor
  1891 ;;         _lcd_write_control
  1892 ;;       _lcd_write_data
  1893 ;;       _getCurrentX
  1894 ;;       _getCurrentY
  1895 ;;       _driveForDistance
  1896 ;;         _drive
  1897 ;;           _ser_putch
  1898 ;;         _ser_putch
  1899 ;;         _ser_getch
  1900 ;;           _ser_isrx
  1901 ;;         _goReverse
  1902 ;;           _lcd_set_cursor
  1903 ;;             _lcd_write_control
  1904 ;;           _lcd_write_data
  1905 ;;           _drive
  1906 ;;             _ser_putch
  1907 ;;           _waitFor
  1908 ;;             _ser_putch
  1909 ;;         _clearSuccessfulDrive
  1910 ;;         _getCurrentY
  1911 ;;         _getCurrentX
  1912 ;;         _findFinalDestination
  1913 ;;           _lcd_set_cursor
  1914 ;;             _lcd_write_control
  1915 ;;           _lcd_write_1_digit_bcd
  1916 ;;             _lcd_write_data
  1917 ;;           _getCurrentY (ARG)
  1918 ;;           _getCurrentX (ARG)
  1919 ;;         _turnRight90
  1920 ;;           _drive
  1921 ;;             _ser_putch
  1922 ;;           _waitFor
  1923 ;;             _ser_putch
  1924 ;;         _updateOrientation
  1925 ;;         _turnLeft90
  1926 ;;           _drive
  1927 ;;             _ser_putch
  1928 ;;           _getCurrentX
  1929 ;;           _getCurrentY
  1930 ;;           _waitFor
  1931 ;;             _ser_putch
  1932 ;;     _goRight
  1933 ;;       _lcd_set_cursor
  1934 ;;         _lcd_write_control
  1935 ;;       _lcd_write_data
  1936 ;;       _turnRight90
  1937 ;;         _drive
  1938 ;;           _ser_putch
  1939 ;;         _waitFor
  1940 ;;           _ser_putch
  1941 ;;       _updateOrientation
  1942 ;;       _driveForDistance
  1943 ;;         _drive
  1944 ;;           _ser_putch
  1945 ;;         _ser_putch
  1946 ;;         _ser_getch
  1947 ;;           _ser_isrx
  1948 ;;         _goReverse
  1949 ;;           _lcd_set_cursor
  1950 ;;             _lcd_write_control
  1951 ;;           _lcd_write_data
  1952 ;;           _drive
  1953 ;;             _ser_putch
  1954 ;;           _waitFor
  1955 ;;             _ser_putch
  1956 ;;         _clearSuccessfulDrive
  1957 ;;         _getCurrentY
  1958 ;;         _getCurrentX
  1959 ;;         _findFinalDestination
  1960 ;;           _lcd_set_cursor
  1961 ;;             _lcd_write_control
  1962 ;;           _lcd_write_1_digit_bcd
  1963 ;;             _lcd_write_data
  1964 ;;           _getCurrentY (ARG)
  1965 ;;           _getCurrentX (ARG)
  1966 ;;         _turnRight90
  1967 ;;           _drive
  1968 ;;             _ser_putch
  1969 ;;           _waitFor
  1970 ;;             _ser_putch
  1971 ;;         _updateOrientation
  1972 ;;         _turnLeft90
  1973 ;;           _drive
  1974 ;;             _ser_putch
  1975 ;;           _getCurrentX
  1976 ;;           _getCurrentY
  1977 ;;           _waitFor
  1978 ;;             _ser_putch
  1979 ;;     _goBackward
  1980 ;;       _lcd_set_cursor
  1981 ;;         _lcd_write_control
  1982 ;;       _lcd_write_data
  1983 ;;       _turnAround
  1984 ;;         _drive
  1985 ;;           _ser_putch
  1986 ;;         _waitFor
  1987 ;;           _ser_putch
  1988 ;;       _updateOrientation
  1989 ;;       _driveForDistance
  1990 ;;         _drive
  1991 ;;           _ser_putch
  1992 ;;         _ser_putch
  1993 ;;         _ser_getch
  1994 ;;           _ser_isrx
  1995 ;;         _goReverse
  1996 ;;           _lcd_set_cursor
  1997 ;;             _lcd_write_control
  1998 ;;           _lcd_write_data
  1999 ;;           _drive
  2000 ;;             _ser_putch
  2001 ;;           _waitFor
  2002 ;;             _ser_putch
  2003 ;;         _clearSuccessfulDrive
  2004 ;;         _getCurrentY
  2005 ;;         _getCurrentX
  2006 ;;         _findFinalDestination
  2007 ;;           _lcd_set_cursor
  2008 ;;             _lcd_write_control
  2009 ;;           _lcd_write_1_digit_bcd
  2010 ;;             _lcd_write_data
  2011 ;;           _getCurrentY (ARG)
  2012 ;;           _getCurrentX (ARG)
  2013 ;;         _turnRight90
  2014 ;;           _drive
  2015 ;;             _ser_putch
  2016 ;;           _waitFor
  2017 ;;             _ser_putch
  2018 ;;         _updateOrientation
  2019 ;;         _turnLeft90
  2020 ;;           _drive
  2021 ;;             _ser_putch
  2022 ;;           _getCurrentX
  2023 ;;           _getCurrentY
  2024 ;;           _waitFor
  2025 ;;             _ser_putch
  2026 ;;   _goRight
  2027 ;;     _lcd_set_cursor
  2028 ;;       _lcd_write_control
  2029 ;;     _lcd_write_data
  2030 ;;     _turnRight90
  2031 ;;       _drive
  2032 ;;         _ser_putch
  2033 ;;       _waitFor
  2034 ;;         _ser_putch
  2035 ;;     _updateOrientation
  2036 ;;     _driveForDistance
  2037 ;;       _drive
  2038 ;;         _ser_putch
  2039 ;;       _ser_putch
  2040 ;;       _ser_getch
  2041 ;;         _ser_isrx
  2042 ;;       _goReverse
  2043 ;;         _lcd_set_cursor
  2044 ;;           _lcd_write_control
  2045 ;;         _lcd_write_data
  2046 ;;         _drive
  2047 ;;           _ser_putch
  2048 ;;         _waitFor
  2049 ;;           _ser_putch
  2050 ;;       _clearSuccessfulDrive
  2051 ;;       _getCurrentY
  2052 ;;       _getCurrentX
  2053 ;;       _findFinalDestination
  2054 ;;         _lcd_set_cursor
  2055 ;;           _lcd_write_control
  2056 ;;         _lcd_write_1_digit_bcd
  2057 ;;           _lcd_write_data
  2058 ;;         _getCurrentY (ARG)
  2059 ;;         _getCurrentX (ARG)
  2060 ;;       _turnRight90
  2061 ;;         _drive
  2062 ;;           _ser_putch
  2063 ;;         _waitFor
  2064 ;;           _ser_putch
  2065 ;;       _updateOrientation
  2066 ;;       _turnLeft90
  2067 ;;         _drive
  2068 ;;           _ser_putch
  2069 ;;         _getCurrentX
  2070 ;;         _getCurrentY
  2071 ;;         _waitFor
  2072 ;;           _ser_putch
  2073 ;;   _getOrientation
  2074 ;;   _goForward
  2075 ;;     _lcd_set_cursor
  2076 ;;       _lcd_write_control
  2077 ;;     _lcd_write_data
  2078 ;;     _getCurrentX
  2079 ;;     _getCurrentY
  2080 ;;     _driveForDistance
  2081 ;;       _drive
  2082 ;;         _ser_putch
  2083 ;;       _ser_putch
  2084 ;;       _ser_getch
  2085 ;;         _ser_isrx
  2086 ;;       _goReverse
  2087 ;;         _lcd_set_cursor
  2088 ;;           _lcd_write_control
  2089 ;;         _lcd_write_data
  2090 ;;         _drive
  2091 ;;           _ser_putch
  2092 ;;         _waitFor
  2093 ;;           _ser_putch
  2094 ;;       _clearSuccessfulDrive
  2095 ;;       _getCurrentY
  2096 ;;       _getCurrentX
  2097 ;;       _findFinalDestination
  2098 ;;         _lcd_set_cursor
  2099 ;;           _lcd_write_control
  2100 ;;         _lcd_write_1_digit_bcd
  2101 ;;           _lcd_write_data
  2102 ;;         _getCurrentY (ARG)
  2103 ;;         _getCurrentX (ARG)
  2104 ;;       _turnRight90
  2105 ;;         _drive
  2106 ;;           _ser_putch
  2107 ;;         _waitFor
  2108 ;;           _ser_putch
  2109 ;;       _updateOrientation
  2110 ;;       _turnLeft90
  2111 ;;         _drive
  2112 ;;           _ser_putch
  2113 ;;         _getCurrentX
  2114 ;;         _getCurrentY
  2115 ;;         _waitFor
  2116 ;;           _ser_putch
  2117 ;;   _goLeft
  2118 ;;     _lcd_set_cursor
  2119 ;;       _lcd_write_control
  2120 ;;     _lcd_write_data
  2121 ;;     _turnLeft90
  2122 ;;       _drive
  2123 ;;         _ser_putch
  2124 ;;       _getCurrentX
  2125 ;;       _getCurrentY
  2126 ;;       _waitFor
  2127 ;;         _ser_putch
  2128 ;;     _updateOrientation
  2129 ;;     _driveForDistance
  2130 ;;       _drive
  2131 ;;         _ser_putch
  2132 ;;       _ser_putch
  2133 ;;       _ser_getch
  2134 ;;         _ser_isrx
  2135 ;;       _goReverse
  2136 ;;         _lcd_set_cursor
  2137 ;;           _lcd_write_control
  2138 ;;         _lcd_write_data
  2139 ;;         _drive
  2140 ;;           _ser_putch
  2141 ;;         _waitFor
  2142 ;;           _ser_putch
  2143 ;;       _clearSuccessfulDrive
  2144 ;;       _getCurrentY
  2145 ;;       _getCurrentX
  2146 ;;       _findFinalDestination
  2147 ;;         _lcd_set_cursor
  2148 ;;           _lcd_write_control
  2149 ;;         _lcd_write_1_digit_bcd
  2150 ;;           _lcd_write_data
  2151 ;;         _getCurrentY (ARG)
  2152 ;;         _getCurrentX (ARG)
  2153 ;;       _turnRight90
  2154 ;;         _drive
  2155 ;;           _ser_putch
  2156 ;;         _waitFor
  2157 ;;           _ser_putch
  2158 ;;       _updateOrientation
  2159 ;;       _turnLeft90
  2160 ;;         _drive
  2161 ;;           _ser_putch
  2162 ;;         _getCurrentX
  2163 ;;         _getCurrentY
  2164 ;;         _waitFor
  2165 ;;           _ser_putch
  2166 ;;   _getSuccessfulDrive
  2167 ;;   _updateMapData
  2168 ;;     _addNewData
  2169 ;;       _writeEEPROM
  2170 ;;         _initEEPROMMode
  2171 ;;         _writeSPIByte
  2172 ;;     _getOrientation (ARG)
  2173 ;;   _updateLocation
  2174 ;;     _lcd_set_cursor
  2175 ;;       _lcd_write_control
  2176 ;;     _lcd_write_data
  2177 ;;     _getOrientation
  2178 ;;     _lcd_write_1_digit_bcd
  2179 ;;       _lcd_write_data
  2180 ;;   _updateNode
  2181 ;;   _checkIfHome
  2182 ;;     _drive
  2183 ;;       _ser_putch
  2184 ;;     _play_iCreate_song
  2185 ;;       _ser_putch
  2186 ;;
  2187 ;; _isr1 (ROOT)
  2188 ;;
  2189                           
  2190 ;; Address spaces:
  2191                           
  2192 ;;Name               Size   Autos  Total    Cost      Usage
  2193 ;;BANK3               60      0      38       9       58.3%
  2194 ;;BITBANK3            60      0       0       8        0.0%
  2195 ;;SFR3                 0      0       0       4        0.0%
  2196 ;;BITSFR3              0      0       0       4        0.0%
  2197 ;;BANK2               60      0       0      11        0.0%
  2198 ;;BITBANK2            60      0       0      10        0.0%
  2199 ;;SFR2                 0      0       0       5        0.0%
  2200 ;;BITSFR2              0      0       0       5        0.0%
  2201 ;;SFR1                 0      0       0       2        0.0%
  2202 ;;BITSFR1              0      0       0       2        0.0%
  2203 ;;BANK1               50      0      4E       7       97.5%
  2204 ;;BITBANK1            50      0       0       6        0.0%
  2205 ;;CODE                 0      0       0       0        0.0%
  2206 ;;DATA                 0      0      E6      12        0.0%
  2207 ;;ABS                  0      0      E0       3        0.0%
  2208 ;;NULL                 0      0       0       0        0.0%
  2209 ;;STACK                0      0       6       2        0.0%
  2210 ;;BANK0               50     29      4C       5       95.0%
  2211 ;;BITBANK0            50      0       0       4        0.0%
  2212 ;;SFR0                 0      0       0       1        0.0%
  2213 ;;BITSFR0              0      0       0       1        0.0%
  2214 ;;COMMON               E      A       E       1      100.0%
  2215 ;;BITCOMMON            E      0       2       0       14.3%
  2216 ;;EEDATA             100      0       0       0        0.0%
  2217                           
  2218                           	global	_main
  2219                           psect	maintext,global,class=CODE,delta=2
  2220                           global __pmaintext
  2221  0015                     __pmaintext:
  2222                           
  2223 ;; *************** function _main *****************
  2224 ;; Defined at:
  2225 ;;		line 317 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  2226 ;; Parameters:    Size  Location     Type
  2227 ;;		None
  2228 ;; Auto vars:     Size  Location     Type
  2229 ;;		None
  2230 ;; Return value:  Size  Location     Type
  2231 ;;		None               void
  2232 ;; Registers used:
  2233 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2234 ;; Tracked objects:
  2235 ;;		On entry : 17F/0
  2236 ;;		On exit  : 0/0
  2237 ;;		Unchanged: 0/0
  2238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2239 ;;      Params:         0       0       0       0       0
  2240 ;;      Locals:         0       0       0       0       0
  2241 ;;      Temps:          0       1       0       0       0
  2242 ;;      Totals:         0       1       0       0       0
  2243 ;;Total ram usage:        1 bytes
  2244 ;; Hardware stack levels required when called:    7
  2245 ;; This function calls:
  2246 ;;		_init
  2247 ;;		_drive
  2248 ;;		_lcd_set_cursor
  2249 ;;		_lcd_write_string
  2250 ;;		_checkForFinalDestination
  2251 ;;		_lookForVictim
  2252 ;;		_findWalls
  2253 ;;		_play_iCreate_song
  2254 ;;		_rotateIR
  2255 ;;		_wallFollow
  2256 ;;		_frontWallCorrect
  2257 ;;		_goToNextCell
  2258 ;;		_goRight
  2259 ;;		_getOrientation
  2260 ;;		_goForward
  2261 ;;		_goLeft
  2262 ;;		_getSuccessfulDrive
  2263 ;;		_updateMapData
  2264 ;;		_updateLocation
  2265 ;;		_updateNode
  2266 ;;		_checkIfHome
  2267 ;; This function is called by:
  2268 ;;		Startup code after reset
  2269 ;; This function uses a non-reentrant model
  2270 ;;
  2271                           psect	maintext
  2272                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  2273                           	line	317
  2274                           	global	__size_of_main
  2275  01D2                     	__size_of_main	equ	__end_of_main-_main
  2276                           	
  2277  0015                     _main:	
  2278                           	opt	stack 1
  2279                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2280                           	line	318
  2281                           	
  2282  0015                     l11227:	
  2283                           ;main.c: 318: init();
  2284  0015  120A  158A  20FA   	fcall	_init
              120A  118A         
  2285                           	line	319
  2286                           ;main.c: 319: drive(0, 0, 0, 0);
  2287  001A  1283               	bcf	status, 5	;RP0=0, select bank0
  2288  001B  1303               	bcf	status, 6	;RP1=0, select bank0
  2289  001C  01A2               	clrf	(?_drive)
  2290  001D  01A3               	clrf	0+(?_drive)+01h
  2291  001E  01A4               	clrf	0+(?_drive)+02h
  2292  001F  3000               	movlw	(0)
  2293  0020  120A  158A  2130   	fcall	_drive
              120A  118A         
  2294                           	line	321
  2295                           	
  2296  0025                     l11229:	
  2297                           ;main.c: 321: lcd_set_cursor(0x00);
  2298  0025  3000               	movlw	(0)
  2299  0026  160A  118A  2587   	fcall	_lcd_set_cursor
              120A  118A         
  2300                           	line	322
  2301                           	
  2302  002B                     l11231:	
  2303                           ;main.c: 322: lcd_write_string("(-,-) - -- --- -");
  2304  002B  3001               	movlw	((STR_3-__stringbase))&0ffh
  2305  002C  160A  118A  2714   	fcall	_lcd_write_string
              120A  118A         
  2306                           	line	323
  2307                           ;main.c: 323: lcd_set_cursor(0x40);
  2308  0031  3040               	movlw	(040h)
  2309  0032  160A  118A  2587   	fcall	_lcd_set_cursor
              120A  118A         
  2310                           	line	324
  2311                           	
  2312  0037                     l11233:	
  2313                           ;main.c: 324: lcd_write_string("- - - (3,1) GREG");
  2314  0037  3012               	movlw	((STR_4-__stringbase))&0ffh
  2315  0038  160A  118A  2714   	fcall	_lcd_write_string
              120A  118A         
  2316                           	line	326
  2317                           ;main.c: 326: while(!home)
  2318  003D  29DF               	goto	l11341
  2319                           	
  2320  003E                     l6773:	
  2321                           	line	344
  2322                           ;main.c: 327: {
  2323                           ;main.c: 344: ready = 1;
  2324  003E  14F1               	bsf	(_ready/8),(_ready)&7
  2325                           	line	346
  2326                           	
  2327  003F                     l11235:	
  2328                           ;main.c: 346: if(start.pressed && ready == 1)
  2329  003F  1283               	bcf	status, 5	;RP0=0, select bank0
  2330  0040  1303               	bcf	status, 6	;RP1=0, select bank0
  2331  0041  0849               	movf	(_start),w
  2332  0042  1D03               	skipz
  2333  0043  2845               	goto	u4620
  2334  0044  29DF               	goto	l11341
  2335  0045                     u4620:
  2336                           	
  2337  0045                     l11237:	
  2338  0045  1CF1               	btfss	(_ready/8),(_ready)&7
  2339  0046  2848               	goto	u4631
  2340  0047  2849               	goto	u4630
  2341  0048                     u4631:
  2342  0048  29DF               	goto	l11341
  2343  0049                     u4630:
  2344                           	line	348
  2345                           	
  2346  0049                     l11239:	
  2347                           ;main.c: 347: {
  2348                           ;main.c: 348: checkForFinalDestination();
  2349  0049  120A  158A  209F   	fcall	_checkForFinalDestination
              120A  118A         
  2350                           	line	350
  2351                           ;main.c: 350: lookForVictim();
  2352  004E  120A  158A  25C5   	fcall	_lookForVictim
              120A  118A         
  2353                           	line	352
  2354                           	
  2355  0053                     l11241:	
  2356                           ;main.c: 352: findWalls();
  2357  0053  120A  118A  2763   	fcall	_findWalls
              120A  118A         
  2358                           	line	353
  2359                           	
  2360  0058                     l11243:	
  2361                           ;main.c: 353: play_iCreate_song(5);
  2362  0058  3005               	movlw	(05h)
  2363  0059  160A  118A  25BF   	fcall	_play_iCreate_song
              120A  118A         
  2364                           	line	354
  2365                           	
  2366  005E                     l11245:	
  2367                           ;main.c: 354: if(leftWall)
  2368  005E  1FF0               	btfss	(_leftWall/8),(_leftWall)&7
  2369  005F  2861               	goto	u4641
  2370  0060  2862               	goto	u4640
  2371  0061                     u4641:
  2372  0061  2880               	goto	l11253
  2373  0062                     u4640:
  2374                           	line	356
  2375                           	
  2376  0062                     l11247:	
  2377                           ;main.c: 355: {
  2378                           ;main.c: 356: rotateIR(24,0b00001101);
  2379  0062  300D               	movlw	(0Dh)
  2380  0063  1283               	bcf	status, 5	;RP0=0, select bank0
  2381  0064  1303               	bcf	status, 6	;RP1=0, select bank0
  2382  0065  00C8               	movwf	(??_main+0)+0
  2383  0066  0848               	movf	(??_main+0)+0,w
  2384  0067  00A0               	movwf	(?_rotateIR)
  2385  0068  3018               	movlw	(018h)
  2386  0069  120A  158A  21D8   	fcall	_rotateIR
              120A  118A         
  2387                           	line	357
  2388                           	
  2389  006E                     l11249:	
  2390                           ;main.c: 357: wallFollow();
  2391  006E  120A  118A  2605   	fcall	_wallFollow
              120A  118A         
  2392                           	line	358
  2393                           	
  2394  0073                     l11251:	
  2395                           ;main.c: 358: rotateIR(24,0b00001111);
  2396  0073  300F               	movlw	(0Fh)
  2397  0074  1283               	bcf	status, 5	;RP0=0, select bank0
  2398  0075  1303               	bcf	status, 6	;RP1=0, select bank0
  2399  0076  00C8               	movwf	(??_main+0)+0
  2400  0077  0848               	movf	(??_main+0)+0,w
  2401  0078  00A0               	movwf	(?_rotateIR)
  2402  0079  3018               	movlw	(018h)
  2403  007A  120A  158A  21D8   	fcall	_rotateIR
              120A  118A         
  2404  007F  2880               	goto	l11253
  2405                           	line	359
  2406                           	
  2407  0080                     l6775:	
  2408                           	line	360
  2409                           	
  2410  0080                     l11253:	
  2411                           ;main.c: 359: }
  2412                           ;main.c: 360: play_iCreate_song(5);
  2413  0080  3005               	movlw	(05h)
  2414  0081  160A  118A  25BF   	fcall	_play_iCreate_song
              120A  118A         
  2415                           	line	361
  2416                           	
  2417  0086                     l11255:	
  2418                           ;main.c: 361: if(frontWall)
  2419  0086  1E70               	btfss	(_frontWall/8),(_frontWall)&7
  2420  0087  2889               	goto	u4651
  2421  0088  288A               	goto	u4650
  2422  0089                     u4651:
  2423  0089  2890               	goto	l11259
  2424  008A                     u4650:
  2425                           	line	362
  2426                           	
  2427  008A                     l11257:	
  2428                           ;main.c: 362: frontWallCorrect();
  2429  008A  120A  118A  26B6   	fcall	_frontWallCorrect
              120A  118A         
  2430  008F  2890               	goto	l11259
  2431                           	
  2432  0090                     l6776:	
  2433                           	line	363
  2434                           	
  2435  0090                     l11259:	
  2436                           ;main.c: 363: play_iCreate_song(5);
  2437  0090  3005               	movlw	(05h)
  2438  0091  160A  118A  25BF   	fcall	_play_iCreate_song
              120A  118A         
  2439                           	line	364
  2440                           ;main.c: 364: switch(node)
  2441  0096  298D               	goto	l11325
  2442                           	line	366
  2443                           ;main.c: 365: {
  2444                           ;main.c: 366: case 0:
  2445                           	
  2446  0097                     l6778:	
  2447                           	line	367
  2448                           	
  2449  0097                     l11261:	
  2450                           ;main.c: 367: goToNextCell();
  2451  0097  120A  158A  2394   	fcall	_goToNextCell
              120A  118A         
  2452                           	line	368
  2453                           ;main.c: 368: break;
  2454  009C  29A3               	goto	l11327
  2455                           	line	369
  2456                           ;main.c: 369: case 1:
  2457                           	
  2458  009D                     l6780:	
  2459                           	line	370
  2460                           ;main.c: 370: if (goingHome)
  2461  009D  1EF0               	btfss	(_goingHome/8),(_goingHome)&7
  2462  009E  28A0               	goto	u4661
  2463  009F  28A1               	goto	u4660
  2464  00A0                     u4661:
  2465  00A0  28D6               	goto	l11277
  2466  00A1                     u4660:
  2467                           	line	372
  2468                           	
  2469  00A1                     l11263:	
  2470                           ;main.c: 371: {
  2471                           ;main.c: 372: if (victimZone == 1)
  2472  00A1  085B               	movf	(_victimZone),w	;volatile
  2473  00A2  3A01               	xorlw	01h
  2474  00A3  1D03               	skipz
  2475  00A4  28A6               	goto	u4671
  2476  00A5  28A7               	goto	u4670
  2477  00A6                     u4671:
  2478  00A6  28AD               	goto	l11267
  2479  00A7                     u4670:
  2480                           	line	373
  2481                           	
  2482  00A7                     l11265:	
  2483                           ;main.c: 373: goRight();
  2484  00A7  160A  118A  275F   	fcall	_goRight
              120A  118A         
  2485  00AC  29A3               	goto	l11327
  2486                           	line	374
  2487                           	
  2488  00AD                     l6782:	
  2489                           	
  2490  00AD                     l11267:	
  2491                           ;main.c: 374: else if (getOrientation() == EAST)
  2492  00AD  160A  118A  2563   	fcall	_getOrientation
              120A  118A         
  2493  00B2  3A02               	xorlw	02h
  2494  00B3  1D03               	skipz
  2495  00B4  28B6               	goto	u4681
  2496  00B5  28B7               	goto	u4680
  2497  00B6                     u4681:
  2498  00B6  28BD               	goto	l11271
  2499  00B7                     u4680:
  2500                           	line	375
  2501                           	
  2502  00B7                     l11269:	
  2503                           ;main.c: 375: goForward();
  2504  00B7  120A  158A  2213   	fcall	_goForward
              120A  118A         
  2505  00BC  29A3               	goto	l11327
  2506                           	line	376
  2507                           	
  2508  00BD                     l6784:	
  2509                           	
  2510  00BD                     l11271:	
  2511                           ;main.c: 376: else if (getOrientation() == SOUTH)
  2512  00BD  160A  118A  2563   	fcall	_getOrientation
              120A  118A         
  2513  00C2  3A01               	xorlw	01h
  2514  00C3  1D03               	skipz
  2515  00C4  28C6               	goto	u4691
  2516  00C5  28C7               	goto	u4690
  2517  00C6                     u4691:
  2518  00C6  28CD               	goto	l11275
  2519  00C7                     u4690:
  2520                           	line	377
  2521                           	
  2522  00C7                     l11273:	
  2523                           ;main.c: 377: goRight();
  2524  00C7  160A  118A  275F   	fcall	_goRight
              120A  118A         
  2525  00CC  29A3               	goto	l11327
  2526                           	line	378
  2527                           	
  2528  00CD                     l6786:	
  2529                           	line	379
  2530                           	
  2531  00CD                     l11275:	
  2532                           ;main.c: 378: else
  2533                           ;main.c: 379: goToNextCell();
  2534  00CD  120A  158A  2394   	fcall	_goToNextCell
              120A  118A         
  2535  00D2  29A3               	goto	l11327
  2536                           	
  2537  00D3                     l6787:	
  2538  00D3  29A3               	goto	l11327
  2539                           	
  2540  00D4                     l6785:	
  2541  00D4  29A3               	goto	l11327
  2542                           	
  2543  00D5                     l6783:	
  2544                           	line	380
  2545                           ;main.c: 380: }
  2546  00D5  29A3               	goto	l11327
  2547                           	line	381
  2548                           	
  2549  00D6                     l6781:	
  2550                           	line	382
  2551                           	
  2552  00D6                     l11277:	
  2553                           ;main.c: 381: else
  2554                           ;main.c: 382: goToNextCell();
  2555  00D6  120A  158A  2394   	fcall	_goToNextCell
              120A  118A         
  2556  00DB  29A3               	goto	l11327
  2557                           	
  2558  00DC                     l6788:	
  2559                           	line	383
  2560                           ;main.c: 383: break;
  2561  00DC  29A3               	goto	l11327
  2562                           	line	384
  2563                           ;main.c: 384: case 2:
  2564                           	
  2565  00DD                     l6789:	
  2566                           	line	385
  2567                           ;main.c: 385: if (goingHome)
  2568  00DD  1EF0               	btfss	(_goingHome/8),(_goingHome)&7
  2569  00DE  28E0               	goto	u4701
  2570  00DF  28E1               	goto	u4700
  2571  00E0                     u4701:
  2572  00E0  2916               	goto	l11293
  2573  00E1                     u4700:
  2574                           	line	387
  2575                           	
  2576  00E1                     l11279:	
  2577                           ;main.c: 386: {
  2578                           ;main.c: 387: if (victimZone == 2)
  2579  00E1  085B               	movf	(_victimZone),w	;volatile
  2580  00E2  3A02               	xorlw	02h
  2581  00E3  1D03               	skipz
  2582  00E4  28E6               	goto	u4711
  2583  00E5  28E7               	goto	u4710
  2584  00E6                     u4711:
  2585  00E6  28ED               	goto	l11283
  2586  00E7                     u4710:
  2587                           	line	388
  2588                           	
  2589  00E7                     l11281:	
  2590                           ;main.c: 388: goForward();
  2591  00E7  120A  158A  2213   	fcall	_goForward
              120A  118A         
  2592  00EC  29A3               	goto	l11327
  2593                           	line	389
  2594                           	
  2595  00ED                     l6791:	
  2596                           	
  2597  00ED                     l11283:	
  2598                           ;main.c: 389: else if (getOrientation() == SOUTH)
  2599  00ED  160A  118A  2563   	fcall	_getOrientation
              120A  118A         
  2600  00F2  3A01               	xorlw	01h
  2601  00F3  1D03               	skipz
  2602  00F4  28F6               	goto	u4721
  2603  00F5  28F7               	goto	u4720
  2604  00F6                     u4721:
  2605  00F6  28FD               	goto	l11287
  2606  00F7                     u4720:
  2607                           	line	390
  2608                           	
  2609  00F7                     l11285:	
  2610                           ;main.c: 390: goRight();
  2611  00F7  160A  118A  275F   	fcall	_goRight
              120A  118A         
  2612  00FC  29A3               	goto	l11327
  2613                           	line	391
  2614                           	
  2615  00FD                     l6793:	
  2616                           	
  2617  00FD                     l11287:	
  2618                           ;main.c: 391: else if (getOrientation() == NORTH)
  2619  00FD  160A  118A  2563   	fcall	_getOrientation
              120A  118A         
  2620  0102  3A03               	xorlw	03h
  2621  0103  1D03               	skipz
  2622  0104  2906               	goto	u4731
  2623  0105  2907               	goto	u4730
  2624  0106                     u4731:
  2625  0106  290D               	goto	l11291
  2626  0107                     u4730:
  2627                           	line	392
  2628                           	
  2629  0107                     l11289:	
  2630                           ;main.c: 392: goLeft();
  2631  0107  160A  118A  2739   	fcall	_goLeft
              120A  118A         
  2632  010C  29A3               	goto	l11327
  2633                           	line	393
  2634                           	
  2635  010D                     l6795:	
  2636                           	line	394
  2637                           	
  2638  010D                     l11291:	
  2639                           ;main.c: 393: else
  2640                           ;main.c: 394: goToNextCell();
  2641  010D  120A  158A  2394   	fcall	_goToNextCell
              120A  118A         
  2642  0112  29A3               	goto	l11327
  2643                           	
  2644  0113                     l6796:	
  2645  0113  29A3               	goto	l11327
  2646                           	
  2647  0114                     l6794:	
  2648  0114  29A3               	goto	l11327
  2649                           	
  2650  0115                     l6792:	
  2651                           	line	395
  2652                           ;main.c: 395: }
  2653  0115  29A3               	goto	l11327
  2654                           	line	396
  2655                           	
  2656  0116                     l6790:	
  2657                           	line	397
  2658                           	
  2659  0116                     l11293:	
  2660                           ;main.c: 396: else
  2661                           ;main.c: 397: goToNextCell();
  2662  0116  120A  158A  2394   	fcall	_goToNextCell
              120A  118A         
  2663  011B  29A3               	goto	l11327
  2664                           	
  2665  011C                     l6797:	
  2666                           	line	398
  2667                           ;main.c: 398: break;
  2668  011C  29A3               	goto	l11327
  2669                           	line	399
  2670                           ;main.c: 399: case 3:
  2671                           	
  2672  011D                     l6798:	
  2673                           	line	400
  2674                           ;main.c: 400: if (goingHome)
  2675  011D  1EF0               	btfss	(_goingHome/8),(_goingHome)&7
  2676  011E  2920               	goto	u4741
  2677  011F  2921               	goto	u4740
  2678  0120                     u4741:
  2679  0120  2956               	goto	l11309
  2680  0121                     u4740:
  2681                           	line	402
  2682                           	
  2683  0121                     l11295:	
  2684                           ;main.c: 401: {
  2685                           ;main.c: 402: if (victimZone == 3)
  2686  0121  085B               	movf	(_victimZone),w	;volatile
  2687  0122  3A03               	xorlw	03h
  2688  0123  1D03               	skipz
  2689  0124  2926               	goto	u4751
  2690  0125  2927               	goto	u4750
  2691  0126                     u4751:
  2692  0126  292D               	goto	l11299
  2693  0127                     u4750:
  2694                           	line	403
  2695                           	
  2696  0127                     l11297:	
  2697                           ;main.c: 403: goRight();
  2698  0127  160A  118A  275F   	fcall	_goRight
              120A  118A         
  2699  012C  29A3               	goto	l11327
  2700                           	line	404
  2701                           	
  2702  012D                     l6800:	
  2703                           	
  2704  012D                     l11299:	
  2705                           ;main.c: 404: else if (getOrientation() == EAST)
  2706  012D  160A  118A  2563   	fcall	_getOrientation
              120A  118A         
  2707  0132  3A02               	xorlw	02h
  2708  0133  1D03               	skipz
  2709  0134  2936               	goto	u4761
  2710  0135  2937               	goto	u4760
  2711  0136                     u4761:
  2712  0136  293D               	goto	l11303
  2713  0137                     u4760:
  2714                           	line	405
  2715                           	
  2716  0137                     l11301:	
  2717                           ;main.c: 405: goForward();
  2718  0137  120A  158A  2213   	fcall	_goForward
              120A  118A         
  2719  013C  29A3               	goto	l11327
  2720                           	line	406
  2721                           	
  2722  013D                     l6802:	
  2723                           	
  2724  013D                     l11303:	
  2725                           ;main.c: 406: else if (getOrientation() == SOUTH)
  2726  013D  160A  118A  2563   	fcall	_getOrientation
              120A  118A         
  2727  0142  3A01               	xorlw	01h
  2728  0143  1D03               	skipz
  2729  0144  2946               	goto	u4771
  2730  0145  2947               	goto	u4770
  2731  0146                     u4771:
  2732  0146  294D               	goto	l11307
  2733  0147                     u4770:
  2734                           	line	407
  2735                           	
  2736  0147                     l11305:	
  2737                           ;main.c: 407: goLeft();
  2738  0147  160A  118A  2739   	fcall	_goLeft
              120A  118A         
  2739  014C  29A3               	goto	l11327
  2740                           	line	408
  2741                           	
  2742  014D                     l6804:	
  2743                           	line	409
  2744                           	
  2745  014D                     l11307:	
  2746                           ;main.c: 408: else
  2747                           ;main.c: 409: goToNextCell();
  2748  014D  120A  158A  2394   	fcall	_goToNextCell
              120A  118A         
  2749  0152  29A3               	goto	l11327
  2750                           	
  2751  0153                     l6805:	
  2752  0153  29A3               	goto	l11327
  2753                           	
  2754  0154                     l6803:	
  2755  0154  29A3               	goto	l11327
  2756                           	
  2757  0155                     l6801:	
  2758                           	line	410
  2759                           ;main.c: 410: }
  2760  0155  29A3               	goto	l11327
  2761                           	line	411
  2762                           	
  2763  0156                     l6799:	
  2764                           	line	412
  2765                           	
  2766  0156                     l11309:	
  2767                           ;main.c: 411: else
  2768                           ;main.c: 412: goToNextCell();
  2769  0156  120A  158A  2394   	fcall	_goToNextCell
              120A  118A         
  2770  015B  29A3               	goto	l11327
  2771                           	
  2772  015C                     l6806:	
  2773                           	line	413
  2774                           ;main.c: 413: break;
  2775  015C  29A3               	goto	l11327
  2776                           	line	414
  2777                           ;main.c: 414: case 4:
  2778                           	
  2779  015D                     l6807:	
  2780                           	line	415
  2781                           	
  2782  015D                     l11311:	
  2783                           ;main.c: 415: if (getOrientation() == EAST)
  2784  015D  160A  118A  2563   	fcall	_getOrientation
              120A  118A         
  2785  0162  3A02               	xorlw	02h
  2786  0163  1D03               	skipz
  2787  0164  2966               	goto	u4781
  2788  0165  2967               	goto	u4780
  2789  0166                     u4781:
  2790  0166  296D               	goto	l11315
  2791  0167                     u4780:
  2792                           	line	416
  2793                           	
  2794  0167                     l11313:	
  2795                           ;main.c: 416: goRight();
  2796  0167  160A  118A  275F   	fcall	_goRight
              120A  118A         
  2797  016C  29A3               	goto	l11327
  2798                           	line	417
  2799                           	
  2800  016D                     l6808:	
  2801                           	line	418
  2802                           	
  2803  016D                     l11315:	
  2804                           ;main.c: 417: else
  2805                           ;main.c: 418: goToNextCell();
  2806  016D  120A  158A  2394   	fcall	_goToNextCell
              120A  118A         
  2807  0172  29A3               	goto	l11327
  2808                           	
  2809  0173                     l6809:	
  2810                           	line	419
  2811                           ;main.c: 419: break;
  2812  0173  29A3               	goto	l11327
  2813                           	line	420
  2814                           ;main.c: 420: case 5:
  2815                           	
  2816  0174                     l6810:	
  2817                           	line	421
  2818                           	
  2819  0174                     l11317:	
  2820                           ;main.c: 421: if (getOrientation() == NORTH)
  2821  0174  160A  118A  2563   	fcall	_getOrientation
              120A  118A         
  2822  0179  3A03               	xorlw	03h
  2823  017A  1D03               	skipz
  2824  017B  297D               	goto	u4791
  2825  017C  297E               	goto	u4790
  2826  017D                     u4791:
  2827  017D  2984               	goto	l11321
  2828  017E                     u4790:
  2829                           	line	422
  2830                           	
  2831  017E                     l11319:	
  2832                           ;main.c: 422: goRight();
  2833  017E  160A  118A  275F   	fcall	_goRight
              120A  118A         
  2834  0183  29A3               	goto	l11327
  2835                           	line	423
  2836                           	
  2837  0184                     l6811:	
  2838                           	line	424
  2839                           	
  2840  0184                     l11321:	
  2841                           ;main.c: 423: else
  2842                           ;main.c: 424: goToNextCell();
  2843  0184  120A  158A  2394   	fcall	_goToNextCell
              120A  118A         
  2844  0189  29A3               	goto	l11327
  2845                           	
  2846  018A                     l6812:	
  2847                           	line	425
  2848                           ;main.c: 425: break;
  2849  018A  29A3               	goto	l11327
  2850                           	line	426
  2851                           ;main.c: 426: default:
  2852                           	
  2853  018B                     l6813:	
  2854                           	line	427
  2855                           ;main.c: 427: break;
  2856  018B  29A3               	goto	l11327
  2857                           	line	428
  2858                           	
  2859  018C                     l11323:	
  2860                           ;main.c: 428: }
  2861  018C  29A3               	goto	l11327
  2862                           	line	364
  2863                           	
  2864  018D                     l6777:	
  2865                           	
  2866  018D                     l11325:	
  2867  018D  1283               	bcf	status, 5	;RP0=0, select bank0
  2868  018E  1303               	bcf	status, 6	;RP1=0, select bank0
  2869  018F  0854               	movf	(_node),w	;volatile
  2870                           	; Switch size 1, requested type "space"
  2871                           ; Number of cases is 6, Range of values is 0 to 5
  2872                           ; switch strategies available:
  2873                           ; Name         Instructions Cycles
  2874                           ; simple_byte           19    10 (average)
  2875                           ; direct_byte           26     8 (fixed)
  2876                           ; jumptable            260     6 (fixed)
  2877                           ; rangetable            10     6 (fixed)
  2878                           ; spacedrange           18     9 (fixed)
  2879                           ; locatedrange           6     3 (fixed)
  2880                           ;	Chosen strategy is simple_byte
  2881                           
  2882                           	opt asmopt_off
  2883  0190  3A00               	xorlw	0^0	; case 0
  2884  0191  1903               	skipnz
  2885  0192  2897               	goto	l11261
  2886  0193  3A01               	xorlw	1^0	; case 1
  2887  0194  1903               	skipnz
  2888  0195  289D               	goto	l6780
  2889  0196  3A03               	xorlw	2^1	; case 2
  2890  0197  1903               	skipnz
  2891  0198  28DD               	goto	l6789
  2892  0199  3A01               	xorlw	3^2	; case 3
  2893  019A  1903               	skipnz
  2894  019B  291D               	goto	l6798
  2895  019C  3A07               	xorlw	4^3	; case 4
  2896  019D  1903               	skipnz
  2897  019E  295D               	goto	l11311
  2898  019F  3A01               	xorlw	5^4	; case 5
  2899  01A0  1903               	skipnz
  2900  01A1  2974               	goto	l11317
  2901  01A2  29A3               	goto	l11327
  2902                           	opt asmopt_on
  2903                           
  2904                           	line	428
  2905                           	
  2906  01A3                     l6779:	
  2907                           	line	429
  2908                           	
  2909  01A3                     l11327:	
  2910                           ;main.c: 429: play_iCreate_song(5);
  2911  01A3  3005               	movlw	(05h)
  2912  01A4  160A  118A  25BF   	fcall	_play_iCreate_song
              120A  118A         
  2913                           	line	430
  2914                           	
  2915  01A9                     l11329:	
  2916                           ;main.c: 430: if(getSuccessfulDrive())
  2917  01A9  160A  118A  257D   	fcall	_getSuccessfulDrive
              120A  118A         
  2918  01AE  1C03               	btfss	status,0
  2919  01AF  29B1               	goto	u4801
  2920  01B0  29B2               	goto	u4800
  2921  01B1                     u4801:
  2922  01B1  29DF               	goto	l11341
  2923  01B2                     u4800:
  2924                           	line	433
  2925                           	
  2926  01B2                     l11331:	
  2927                           ;main.c: 431: {
  2928                           ;main.c: 433: updateMapData(0,0,0,0,0,getOrientation());
  2929  01B2  1283               	bcf	status, 5	;RP0=0, select bank0
  2930  01B3  1303               	bcf	status, 6	;RP1=0, select bank0
  2931  01B4  01A9               	clrf	(?_updateMapData)
  2932  01B5  01AA               	clrf	0+(?_updateMapData)+01h
  2933  01B6  01AB               	clrf	0+(?_updateMapData)+02h
  2934  01B7  01AC               	clrf	0+(?_updateMapData)+03h
  2935  01B8  160A  118A  2563   	fcall	_getOrientation
              120A  118A         
  2936  01BD  1283               	bcf	status, 5	;RP0=0, select bank0
  2937  01BE  1303               	bcf	status, 6	;RP1=0, select bank0
  2938  01BF  00C8               	movwf	(??_main+0)+0
  2939  01C0  0848               	movf	(??_main+0)+0,w
  2940  01C1  00AD               	movwf	0+(?_updateMapData)+04h
  2941  01C2  3000               	movlw	(0)
  2942  01C3  120A  158A  2467   	fcall	_updateMapData
              120A  118A         
  2943                           	line	434
  2944                           	
  2945  01C8                     l11333:	
  2946                           ;main.c: 434: updateLocation();
  2947  01C8  120A  158A  2623   	fcall	_updateLocation
              120A  118A         
  2948                           	line	435
  2949                           	
  2950  01CD                     l11335:	
  2951                           ;main.c: 435: updateNode();
  2952  01CD  120A  158A  2569   	fcall	_updateNode
              120A  118A         
  2953                           	line	436
  2954                           	
  2955  01D2                     l11337:	
  2956                           ;main.c: 436: if(goingHome)
  2957  01D2  1EF0               	btfss	(_goingHome/8),(_goingHome)&7
  2958  01D3  29D5               	goto	u4811
  2959  01D4  29D6               	goto	u4810
  2960  01D5                     u4811:
  2961  01D5  29DF               	goto	l11341
  2962  01D6                     u4810:
  2963                           	line	437
  2964                           	
  2965  01D6                     l11339:	
  2966                           ;main.c: 437: checkIfHome();
  2967  01D6  160A  118A  268E   	fcall	_checkIfHome
              120A  118A         
  2968  01DB  29DF               	goto	l11341
  2969                           	
  2970  01DC                     l6815:	
  2971  01DC  29DF               	goto	l11341
  2972                           	line	439
  2973                           	
  2974  01DD                     l6814:	
  2975  01DD  29DF               	goto	l11341
  2976                           	line	440
  2977                           	
  2978  01DE                     l6774:	
  2979  01DE  29DF               	goto	l11341
  2980                           	line	441
  2981                           	
  2982  01DF                     l6772:	
  2983                           	line	326
  2984                           	
  2985  01DF                     l11341:	
  2986  01DF  1F70               	btfss	(_home/8),(_home)&7
  2987  01E0  29E2               	goto	u4821
  2988  01E1  29E3               	goto	u4820
  2989  01E2                     u4821:
  2990  01E2  283E               	goto	l6773
  2991  01E3                     u4820:
  2992  01E3  29E4               	goto	l6817
  2993                           	
  2994  01E4                     l6816:	
  2995                           	line	443
  2996                           	
  2997  01E4                     l6817:	
  2998                           	global	start
  2999  01E4  120A  118A  2812   	ljmp	start
  3000                           	opt stack 0
  3001                           GLOBAL	__end_of_main
  3002  01E7                     	__end_of_main:
  3003 ;; =============== function _main ends ============
  3004                           
  3005                           	signat	_main,88
  3006                           	global	_goToNextCell
  3007                           psect	text1237,local,class=CODE,delta=2
  3008                           global __ptext1237
  3009  0B94                     __ptext1237:
  3010                           
  3011 ;; *************** function _goToNextCell *****************
  3012 ;; Defined at:
  3013 ;;		line 246 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  3014 ;; Parameters:    Size  Location     Type
  3015 ;;		None
  3016 ;; Auto vars:     Size  Location     Type
  3017 ;;		None
  3018 ;; Return value:  Size  Location     Type
  3019 ;;		None               void
  3020 ;; Registers used:
  3021 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3022 ;; Tracked objects:
  3023 ;;		On entry : 0/0
  3024 ;;		On exit  : 0/0
  3025 ;;		Unchanged: 0/0
  3026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3027 ;;      Params:         0       0       0       0       0
  3028 ;;      Locals:         0       0       0       0       0
  3029 ;;      Temps:          0       0       0       0       0
  3030 ;;      Totals:         0       0       0       0       0
  3031 ;;Total ram usage:        0 bytes
  3032 ;; Hardware stack levels used:    1
  3033 ;; Hardware stack levels required when called:    6
  3034 ;; This function calls:
  3035 ;;		_getSomethingInTheWay
  3036 ;;		_goLeft
  3037 ;;		_goForward
  3038 ;;		_goRight
  3039 ;;		_goBackward
  3040 ;; This function is called by:
  3041 ;;		_main
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           psect	text1237
  3045                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  3046                           	line	246
  3047                           	global	__size_of_goToNextCell
  3048  0045                     	__size_of_goToNextCell	equ	__end_of_goToNextCell-_goToNextCell
  3049                           	
  3050  0B94                     _goToNextCell:	
  3051                           	opt	stack 1
  3052                           ; Regs used in _goToNextCell: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3053                           	line	247
  3054                           	
  3055  0B94                     l11211:	
  3056                           ;main.c: 247: if(!leftWall && (getSomethingInTheWay() != LEFT))
  3057  0B94  1BF0               	btfsc	(_leftWall/8),(_leftWall)&7
  3058  0B95  2B97               	goto	u4561
  3059  0B96  2B98               	goto	u4560
  3060  0B97                     u4561:
  3061  0B97  2BA8               	goto	l6736
  3062  0B98                     u4560:
  3063                           	
  3064  0B98                     l11213:	
  3065  0B98  160A  118A  2568   	fcall	_getSomethingInTheWay
              120A  158A         
  3066  0B9D  3A01               	xorlw	01h
  3067  0B9E  1903               	skipnz
  3068  0B9F  2BA1               	goto	u4571
  3069  0BA0  2BA2               	goto	u4570
  3070  0BA1                     u4571:
  3071  0BA1  2BA8               	goto	l6736
  3072  0BA2                     u4570:
  3073                           	line	248
  3074                           	
  3075  0BA2                     l11215:	
  3076                           ;main.c: 248: goLeft();
  3077  0BA2  160A  118A  2739   	fcall	_goLeft
              120A  158A         
  3078  0BA7  2BD8               	goto	l6742
  3079                           	line	249
  3080                           	
  3081  0BA8                     l6736:	
  3082                           ;main.c: 249: else if(!frontWall && (getSomethingInTheWay() != FORWARD))
  3083  0BA8  1A70               	btfsc	(_frontWall/8),(_frontWall)&7
  3084  0BA9  2BAB               	goto	u4581
  3085  0BAA  2BAC               	goto	u4580
  3086  0BAB                     u4581:
  3087  0BAB  2BBC               	goto	l6738
  3088  0BAC                     u4580:
  3089                           	
  3090  0BAC                     l11217:	
  3091  0BAC  160A  118A  2568   	fcall	_getSomethingInTheWay
              120A  158A         
  3092  0BB1  3A00               	xorlw	0
  3093  0BB2  1903               	skipnz
  3094  0BB3  2BB5               	goto	u4591
  3095  0BB4  2BB6               	goto	u4590
  3096  0BB5                     u4591:
  3097  0BB5  2BBC               	goto	l6738
  3098  0BB6                     u4590:
  3099                           	line	250
  3100                           	
  3101  0BB6                     l11219:	
  3102                           ;main.c: 250: goForward();
  3103  0BB6  120A  158A  2213   	fcall	_goForward
              120A  158A         
  3104  0BBB  2BD8               	goto	l6742
  3105                           	line	251
  3106                           	
  3107  0BBC                     l6738:	
  3108                           ;main.c: 251: else if(!rightWall && (getSomethingInTheWay() != RIGHT))
  3109  0BBC  1971               	btfsc	(_rightWall/8),(_rightWall)&7
  3110  0BBD  2BBF               	goto	u4601
  3111  0BBE  2BC0               	goto	u4600
  3112  0BBF                     u4601:
  3113  0BBF  2BD0               	goto	l11225
  3114  0BC0                     u4600:
  3115                           	
  3116  0BC0                     l11221:	
  3117  0BC0  160A  118A  2568   	fcall	_getSomethingInTheWay
              120A  158A         
  3118  0BC5  3A03               	xorlw	03h
  3119  0BC6  1903               	skipnz
  3120  0BC7  2BC9               	goto	u4611
  3121  0BC8  2BCA               	goto	u4610
  3122  0BC9                     u4611:
  3123  0BC9  2BD0               	goto	l11225
  3124  0BCA                     u4610:
  3125                           	line	252
  3126                           	
  3127  0BCA                     l11223:	
  3128                           ;main.c: 252: goRight();
  3129  0BCA  160A  118A  275F   	fcall	_goRight
              120A  158A         
  3130  0BCF  2BD8               	goto	l6742
  3131                           	line	253
  3132                           	
  3133  0BD0                     l6740:	
  3134                           	line	254
  3135                           	
  3136  0BD0                     l11225:	
  3137                           ;main.c: 253: else
  3138                           ;main.c: 254: goBackward();
  3139  0BD0  160A  118A  27D7   	fcall	_goBackward
              120A  158A         
  3140  0BD5  2BD8               	goto	l6742
  3141                           	
  3142  0BD6                     l6741:	
  3143  0BD6  2BD8               	goto	l6742
  3144                           	
  3145  0BD7                     l6739:	
  3146  0BD7  2BD8               	goto	l6742
  3147                           	
  3148  0BD8                     l6737:	
  3149                           	line	255
  3150                           	
  3151  0BD8                     l6742:	
  3152  0BD8  0008               	return
  3153                           	opt stack 0
  3154                           GLOBAL	__end_of_goToNextCell
  3155  0BD9                     	__end_of_goToNextCell:
  3156 ;; =============== function _goToNextCell ends ============
  3157                           
  3158                           	signat	_goToNextCell,88
  3159                           	global	_findWalls
  3160                           psect	text1238,local,class=CODE,delta=2
  3161                           global __ptext1238
  3162  0763                     __ptext1238:
  3163                           
  3164 ;; *************** function _findWalls *****************
  3165 ;; Defined at:
  3166 ;;		line 175 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  3167 ;; Parameters:    Size  Location     Type
  3168 ;;		None
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;		None
  3171 ;; Return value:  Size  Location     Type
  3172 ;;		None               void
  3173 ;; Registers used:
  3174 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : 0/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3180 ;;      Params:         0       0       0       0       0
  3181 ;;      Locals:         0       0       0       0       0
  3182 ;;      Temps:          0       1       0       0       0
  3183 ;;      Totals:         0       1       0       0       0
  3184 ;;Total ram usage:        1 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; Hardware stack levels required when called:    6
  3187 ;; This function calls:
  3188 ;;		_rotateIR
  3189 ;;		_lcd_set_cursor
  3190 ;;		_findWall
  3191 ;;		_lcd_write_data
  3192 ;;		_play_iCreate_song
  3193 ;; This function is called by:
  3194 ;;		_main
  3195 ;; This function uses a non-reentrant model
  3196 ;;
  3197                           psect	text1238
  3198                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  3199                           	line	175
  3200                           	global	__size_of_findWalls
  3201  0091                     	__size_of_findWalls	equ	__end_of_findWalls-_findWalls
  3202                           	
  3203  0763                     _findWalls:	
  3204                           	opt	stack 1
  3205                           ; Regs used in _findWalls: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3206                           	line	176
  3207                           	
  3208  0763                     l11183:	
  3209                           ;main.c: 176: rotateIR(24, 0b00001101);
  3210  0763  300D               	movlw	(0Dh)
  3211  0764  1283               	bcf	status, 5	;RP0=0, select bank0
  3212  0765  1303               	bcf	status, 6	;RP1=0, select bank0
  3213  0766  00C3               	movwf	(??_findWalls+0)+0
  3214  0767  0843               	movf	(??_findWalls+0)+0,w
  3215  0768  00A0               	movwf	(?_rotateIR)
  3216  0769  3018               	movlw	(018h)
  3217  076A  120A  158A  21D8   	fcall	_rotateIR
              120A  118A         
  3218                           	line	177
  3219                           ;main.c: 177: lcd_set_cursor(0x0B);
  3220  076F  300B               	movlw	(0Bh)
  3221  0770  160A  118A  2587   	fcall	_lcd_set_cursor
              120A  118A         
  3222                           	line	179
  3223                           	
  3224  0775                     l11185:	
  3225                           ;main.c: 179: leftWall = findWall();
  3226  0775  160A  118A  2654   	fcall	_findWall
              120A  118A         
  3227  077A  1803               	btfsc	status,0
  3228  077B  2F7D               	goto	u4471
  3229  077C  2F7F               	goto	u4470
  3230                           	
  3231  077D                     u4471:
  3232  077D  17F0               	bsf	(_leftWall/8),(_leftWall)&7
  3233  077E  2F80               	goto	u4484
  3234  077F                     u4470:
  3235  077F  13F0               	bcf	(_leftWall/8),(_leftWall)&7
  3236  0780                     u4484:
  3237                           	line	180
  3238                           	
  3239  0780                     l11187:	
  3240                           ;main.c: 180: if(leftWall)
  3241  0780  1FF0               	btfss	(_leftWall/8),(_leftWall)&7
  3242  0781  2F83               	goto	u4491
  3243  0782  2F84               	goto	u4490
  3244  0783                     u4491:
  3245  0783  2F8B               	goto	l11191
  3246  0784                     u4490:
  3247                           	line	181
  3248                           	
  3249  0784                     l11189:	
  3250                           ;main.c: 181: lcd_write_data('L');
  3251  0784  304C               	movlw	(04Ch)
  3252  0785  160A  118A  25D1   	fcall	_lcd_write_data
              120A  118A         
  3253  078A  2F91               	goto	l6728
  3254                           	line	182
  3255                           	
  3256  078B                     l6727:	
  3257                           	line	183
  3258                           	
  3259  078B                     l11191:	
  3260                           ;main.c: 182: else
  3261                           ;main.c: 183: lcd_write_data(' ');
  3262  078B  3020               	movlw	(020h)
  3263  078C  160A  118A  25D1   	fcall	_lcd_write_data
              120A  118A         
  3264                           	
  3265  0791                     l6728:	
  3266                           	line	185
  3267                           ;main.c: 185: rotateIR(24, 0b00001111);
  3268  0791  300F               	movlw	(0Fh)
  3269  0792  1283               	bcf	status, 5	;RP0=0, select bank0
  3270  0793  1303               	bcf	status, 6	;RP1=0, select bank0
  3271  0794  00C3               	movwf	(??_findWalls+0)+0
  3272  0795  0843               	movf	(??_findWalls+0)+0,w
  3273  0796  00A0               	movwf	(?_rotateIR)
  3274  0797  3018               	movlw	(018h)
  3275  0798  120A  158A  21D8   	fcall	_rotateIR
              120A  118A         
  3276                           	line	186
  3277                           	
  3278  079D                     l11193:	
  3279                           ;main.c: 186: frontWall = findWall();
  3280  079D  160A  118A  2654   	fcall	_findWall
              120A  118A         
  3281  07A2  1803               	btfsc	status,0
  3282  07A3  2FA5               	goto	u4501
  3283  07A4  2FA7               	goto	u4500
  3284                           	
  3285  07A5                     u4501:
  3286  07A5  1670               	bsf	(_frontWall/8),(_frontWall)&7
  3287  07A6  2FA8               	goto	u4514
  3288  07A7                     u4500:
  3289  07A7  1270               	bcf	(_frontWall/8),(_frontWall)&7
  3290  07A8                     u4514:
  3291                           	line	188
  3292                           	
  3293  07A8                     l11195:	
  3294                           ;main.c: 188: if(frontWall)
  3295  07A8  1E70               	btfss	(_frontWall/8),(_frontWall)&7
  3296  07A9  2FAB               	goto	u4521
  3297  07AA  2FAC               	goto	u4520
  3298  07AB                     u4521:
  3299  07AB  2FB3               	goto	l11199
  3300  07AC                     u4520:
  3301                           	line	189
  3302                           	
  3303  07AC                     l11197:	
  3304                           ;main.c: 189: lcd_write_data('F');
  3305  07AC  3046               	movlw	(046h)
  3306  07AD  160A  118A  25D1   	fcall	_lcd_write_data
              120A  118A         
  3307  07B2  2FB9               	goto	l6730
  3308                           	line	190
  3309                           	
  3310  07B3                     l6729:	
  3311                           	line	191
  3312                           	
  3313  07B3                     l11199:	
  3314                           ;main.c: 190: else
  3315                           ;main.c: 191: lcd_write_data(' ');
  3316  07B3  3020               	movlw	(020h)
  3317  07B4  160A  118A  25D1   	fcall	_lcd_write_data
              120A  118A         
  3318                           	
  3319  07B9                     l6730:	
  3320                           	line	193
  3321                           ;main.c: 193: rotateIR(24, 0b00001111);
  3322  07B9  300F               	movlw	(0Fh)
  3323  07BA  1283               	bcf	status, 5	;RP0=0, select bank0
  3324  07BB  1303               	bcf	status, 6	;RP1=0, select bank0
  3325  07BC  00C3               	movwf	(??_findWalls+0)+0
  3326  07BD  0843               	movf	(??_findWalls+0)+0,w
  3327  07BE  00A0               	movwf	(?_rotateIR)
  3328  07BF  3018               	movlw	(018h)
  3329  07C0  120A  158A  21D8   	fcall	_rotateIR
              120A  118A         
  3330                           	line	194
  3331                           	
  3332  07C5                     l11201:	
  3333                           ;main.c: 194: rightWall = findWall();
  3334  07C5  160A  118A  2654   	fcall	_findWall
              120A  118A         
  3335  07CA  1803               	btfsc	status,0
  3336  07CB  2FCD               	goto	u4531
  3337  07CC  2FCF               	goto	u4530
  3338                           	
  3339  07CD                     u4531:
  3340  07CD  1571               	bsf	(_rightWall/8),(_rightWall)&7
  3341  07CE  2FD0               	goto	u4544
  3342  07CF                     u4530:
  3343  07CF  1171               	bcf	(_rightWall/8),(_rightWall)&7
  3344  07D0                     u4544:
  3345                           	line	196
  3346                           	
  3347  07D0                     l11203:	
  3348                           ;main.c: 196: if(rightWall)
  3349  07D0  1D71               	btfss	(_rightWall/8),(_rightWall)&7
  3350  07D1  2FD3               	goto	u4551
  3351  07D2  2FD4               	goto	u4550
  3352  07D3                     u4551:
  3353  07D3  2FE1               	goto	l11209
  3354  07D4                     u4550:
  3355                           	line	198
  3356                           	
  3357  07D4                     l11205:	
  3358                           ;main.c: 197: {
  3359                           ;main.c: 198: play_iCreate_song(5);
  3360  07D4  3005               	movlw	(05h)
  3361  07D5  160A  118A  25BF   	fcall	_play_iCreate_song
              120A  118A         
  3362                           	line	199
  3363                           	
  3364  07DA                     l11207:	
  3365                           ;main.c: 199: lcd_write_data('R');
  3366  07DA  3052               	movlw	(052h)
  3367  07DB  160A  118A  25D1   	fcall	_lcd_write_data
              120A  118A         
  3368                           	line	200
  3369                           ;main.c: 200: }else
  3370  07E0  2FE7               	goto	l6732
  3371                           	
  3372  07E1                     l6731:	
  3373                           	line	201
  3374                           	
  3375  07E1                     l11209:	
  3376                           ;main.c: 201: lcd_write_data(' ');
  3377  07E1  3020               	movlw	(020h)
  3378  07E2  160A  118A  25D1   	fcall	_lcd_write_data
              120A  118A         
  3379                           	
  3380  07E7                     l6732:	
  3381                           	line	203
  3382                           ;main.c: 203: rotateIR(24, 0b00001101);
  3383  07E7  300D               	movlw	(0Dh)
  3384  07E8  1283               	bcf	status, 5	;RP0=0, select bank0
  3385  07E9  1303               	bcf	status, 6	;RP1=0, select bank0
  3386  07EA  00C3               	movwf	(??_findWalls+0)+0
  3387  07EB  0843               	movf	(??_findWalls+0)+0,w
  3388  07EC  00A0               	movwf	(?_rotateIR)
  3389  07ED  3018               	movlw	(018h)
  3390  07EE  120A  158A  21D8   	fcall	_rotateIR
              120A  118A         
  3391                           	line	204
  3392                           	
  3393  07F3                     l6733:	
  3394  07F3  0008               	return
  3395                           	opt stack 0
  3396                           GLOBAL	__end_of_findWalls
  3397  07F4                     	__end_of_findWalls:
  3398 ;; =============== function _findWalls ends ============
  3399                           
  3400                           	signat	_findWalls,88
  3401                           	global	_goRight
  3402                           psect	text1239,local,class=CODE,delta=2
  3403                           global __ptext1239
  3404  175F                     __ptext1239:
  3405                           
  3406 ;; *************** function _goRight *****************
  3407 ;; Defined at:
  3408 ;;		line 251 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;		None
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;		None
  3413 ;; Return value:  Size  Location     Type
  3414 ;;		None               void
  3415 ;; Registers used:
  3416 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3422 ;;      Params:         0       0       0       0       0
  3423 ;;      Locals:         0       0       0       0       0
  3424 ;;      Temps:          0       1       0       0       0
  3425 ;;      Totals:         0       1       0       0       0
  3426 ;;Total ram usage:        1 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; Hardware stack levels required when called:    5
  3429 ;; This function calls:
  3430 ;;		_lcd_set_cursor
  3431 ;;		_lcd_write_data
  3432 ;;		_turnRight90
  3433 ;;		_updateOrientation
  3434 ;;		_driveForDistance
  3435 ;; This function is called by:
  3436 ;;		_goToNextCell
  3437 ;;		_main
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           psect	text1239
  3441                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  3442                           	line	251
  3443                           	global	__size_of_goRight
  3444  0027                     	__size_of_goRight	equ	__end_of_goRight-_goRight
  3445                           	
  3446  175F                     _goRight:	
  3447                           	opt	stack 2
  3448                           ; Regs used in _goRight: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3449                           	line	252
  3450                           	
  3451  175F                     l11173:	
  3452                           ;drive.c: 252: lcd_set_cursor(0x0F);
  3453  175F  300F               	movlw	(0Fh)
  3454  1760  160A  118A  2587   	fcall	_lcd_set_cursor
              160A  118A         
  3455                           	line	253
  3456                           ;drive.c: 253: lcd_write_data('R');
  3457  1765  3052               	movlw	(052h)
  3458  1766  160A  118A  25D1   	fcall	_lcd_write_data
              160A  118A         
  3459                           	line	254
  3460                           	
  3461  176B                     l11175:	
  3462                           ;drive.c: 254: turnRight90();
  3463  176B  120A  158A  228E   	fcall	_turnRight90
              160A  118A         
  3464                           	line	255
  3465                           	
  3466  1770                     l11177:	
  3467                           ;drive.c: 255: updateOrientation(RIGHT);
  3468  1770  3003               	movlw	(03h)
  3469  1771  160A  118A  25AE   	fcall	_updateOrientation
              160A  118A         
  3470                           	line	256
  3471                           	
  3472  1776                     l11179:	
  3473                           ;drive.c: 256: lastMove = RIGHT;
  3474  1776  3003               	movlw	(03h)
  3475  1777  1283               	bcf	status, 5	;RP0=0, select bank0
  3476  1778  1303               	bcf	status, 6	;RP1=0, select bank0
  3477  1779  00B8               	movwf	(??_goRight+0)+0
  3478  177A  0838               	movf	(??_goRight+0)+0,w
  3479  177B  00D3               	movwf	(_lastMove)	;volatile
  3480                           	line	257
  3481                           	
  3482  177C                     l11181:	
  3483                           ;drive.c: 257: driveForDistance(1000);
  3484  177C  30E8               	movlw	low(03E8h)
  3485  177D  00AC               	movwf	(?_driveForDistance)
  3486  177E  3003               	movlw	high(03E8h)
  3487  177F  00AD               	movwf	((?_driveForDistance))+1
  3488  1780  120A  118A  23B6   	fcall	_driveForDistance
              160A  118A         
  3489                           	line	258
  3490                           	
  3491  1785                     l5865:	
  3492  1785  0008               	return
  3493                           	opt stack 0
  3494                           GLOBAL	__end_of_goRight
  3495  1786                     	__end_of_goRight:
  3496 ;; =============== function _goRight ends ============
  3497                           
  3498                           	signat	_goRight,88
  3499                           	global	_goLeft
  3500                           psect	text1240,local,class=CODE,delta=2
  3501                           global __ptext1240
  3502  1739                     __ptext1240:
  3503                           
  3504 ;; *************** function _goLeft *****************
  3505 ;; Defined at:
  3506 ;;		line 230 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  3507 ;; Parameters:    Size  Location     Type
  3508 ;;		None
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;		None
  3511 ;; Return value:  Size  Location     Type
  3512 ;;		None               void
  3513 ;; Registers used:
  3514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/0
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3520 ;;      Params:         0       0       0       0       0
  3521 ;;      Locals:         0       0       0       0       0
  3522 ;;      Temps:          0       0       0       0       0
  3523 ;;      Totals:         0       0       0       0       0
  3524 ;;Total ram usage:        0 bytes
  3525 ;; Hardware stack levels used:    1
  3526 ;; Hardware stack levels required when called:    5
  3527 ;; This function calls:
  3528 ;;		_lcd_set_cursor
  3529 ;;		_lcd_write_data
  3530 ;;		_turnLeft90
  3531 ;;		_updateOrientation
  3532 ;;		_driveForDistance
  3533 ;; This function is called by:
  3534 ;;		_goToNextCell
  3535 ;;		_main
  3536 ;; This function uses a non-reentrant model
  3537 ;;
  3538                           psect	text1240
  3539                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  3540                           	line	230
  3541                           	global	__size_of_goLeft
  3542  0026                     	__size_of_goLeft	equ	__end_of_goLeft-_goLeft
  3543                           	
  3544  1739                     _goLeft:	
  3545                           	opt	stack 2
  3546                           ; Regs used in _goLeft: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3547                           	line	231
  3548                           	
  3549  1739                     l11163:	
  3550                           ;drive.c: 231: lcd_set_cursor(0x0F);
  3551  1739  300F               	movlw	(0Fh)
  3552  173A  160A  118A  2587   	fcall	_lcd_set_cursor
              160A  118A         
  3553                           	line	232
  3554                           ;drive.c: 232: lcd_write_data('L');
  3555  173F  304C               	movlw	(04Ch)
  3556  1740  160A  118A  25D1   	fcall	_lcd_write_data
              160A  118A         
  3557                           	line	233
  3558                           	
  3559  1745                     l11165:	
  3560                           ;drive.c: 233: turnLeft90();
  3561  1745  120A  158A  24B4   	fcall	_turnLeft90
              160A  118A         
  3562                           	line	234
  3563                           	
  3564  174A                     l11167:	
  3565                           ;drive.c: 234: updateOrientation(LEFT);
  3566  174A  3001               	movlw	(01h)
  3567  174B  160A  118A  25AE   	fcall	_updateOrientation
              160A  118A         
  3568                           	line	235
  3569                           	
  3570  1750                     l11169:	
  3571                           ;drive.c: 235: lastMove = LEFT;
  3572  1750  1283               	bcf	status, 5	;RP0=0, select bank0
  3573  1751  1303               	bcf	status, 6	;RP1=0, select bank0
  3574  1752  01D3               	clrf	(_lastMove)	;volatile
  3575  1753  1403               	bsf	status,0
  3576  1754  0DD3               	rlf	(_lastMove),f	;volatile
  3577                           	line	236
  3578                           	
  3579  1755                     l11171:	
  3580                           ;drive.c: 236: driveForDistance(1000);
  3581  1755  30E8               	movlw	low(03E8h)
  3582  1756  00AC               	movwf	(?_driveForDistance)
  3583  1757  3003               	movlw	high(03E8h)
  3584  1758  00AD               	movwf	((?_driveForDistance))+1
  3585  1759  120A  118A  23B6   	fcall	_driveForDistance
              160A  118A         
  3586                           	line	237
  3587                           	
  3588  175E                     l5859:	
  3589  175E  0008               	return
  3590                           	opt stack 0
  3591                           GLOBAL	__end_of_goLeft
  3592  175F                     	__end_of_goLeft:
  3593 ;; =============== function _goLeft ends ============
  3594                           
  3595                           	signat	_goLeft,88
  3596                           	global	_goForward
  3597                           psect	text1241,local,class=CODE,delta=2
  3598                           global __ptext1241
  3599  0A13                     __ptext1241:
  3600                           
  3601 ;; *************** function _goForward *****************
  3602 ;; Defined at:
  3603 ;;		line 215 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;		None
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;		None
  3608 ;; Return value:  Size  Location     Type
  3609 ;;		None               void
  3610 ;; Registers used:
  3611 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3612 ;; Tracked objects:
  3613 ;;		On entry : 0/0
  3614 ;;		On exit  : 0/0
  3615 ;;		Unchanged: 0/0
  3616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3617 ;;      Params:         0       0       0       0       0
  3618 ;;      Locals:         0       0       0       0       0
  3619 ;;      Temps:          0       0       0       0       0
  3620 ;;      Totals:         0       0       0       0       0
  3621 ;;Total ram usage:        0 bytes
  3622 ;; Hardware stack levels used:    1
  3623 ;; Hardware stack levels required when called:    5
  3624 ;; This function calls:
  3625 ;;		_lcd_set_cursor
  3626 ;;		_lcd_write_data
  3627 ;;		_getCurrentX
  3628 ;;		_getCurrentY
  3629 ;;		_driveForDistance
  3630 ;; This function is called by:
  3631 ;;		_goToNextCell
  3632 ;;		_main
  3633 ;; This function uses a non-reentrant model
  3634 ;;
  3635                           psect	text1241
  3636                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  3637                           	line	215
  3638                           	global	__size_of_goForward
  3639  003C                     	__size_of_goForward	equ	__end_of_goForward-_goForward
  3640                           	
  3641  0A13                     _goForward:	
  3642                           	opt	stack 2
  3643                           ; Regs used in _goForward: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3644                           	line	216
  3645                           	
  3646  0A13                     l11151:	
  3647                           ;drive.c: 216: lcd_set_cursor(0x0F);
  3648  0A13  300F               	movlw	(0Fh)
  3649  0A14  160A  118A  2587   	fcall	_lcd_set_cursor
              120A  158A         
  3650                           	line	217
  3651                           ;drive.c: 217: lcd_write_data('F');
  3652  0A19  3046               	movlw	(046h)
  3653  0A1A  160A  118A  25D1   	fcall	_lcd_write_data
              120A  158A         
  3654                           	line	218
  3655                           	
  3656  0A1F                     l11153:	
  3657                           ;drive.c: 218: lastMove = FORWARD;
  3658  0A1F  1283               	bcf	status, 5	;RP0=0, select bank0
  3659  0A20  1303               	bcf	status, 6	;RP1=0, select bank0
  3660  0A21  01D3               	clrf	(_lastMove)	;volatile
  3661                           	line	219
  3662                           	
  3663  0A22                     l11155:	
  3664                           ;drive.c: 219: if( (getCurrentX() == 1 && getCurrentY() == 2))
  3665  0A22  160A  118A  2559   	fcall	_getCurrentX
              120A  158A         
  3666  0A27  3A01               	xorlw	01h
  3667  0A28  1D03               	skipz
  3668  0A29  2A2B               	goto	u4451
  3669  0A2A  2A2C               	goto	u4450
  3670  0A2B                     u4451:
  3671  0A2B  2A42               	goto	l11161
  3672  0A2C                     u4450:
  3673                           	
  3674  0A2C                     l11157:	
  3675  0A2C  160A  118A  255E   	fcall	_getCurrentY
              120A  158A         
  3676  0A31  3A02               	xorlw	02h
  3677  0A32  1D03               	skipz
  3678  0A33  2A35               	goto	u4461
  3679  0A34  2A36               	goto	u4460
  3680  0A35                     u4461:
  3681  0A35  2A42               	goto	l11161
  3682  0A36                     u4460:
  3683                           	line	221
  3684                           	
  3685  0A36                     l11159:	
  3686                           ;drive.c: 220: {
  3687                           ;drive.c: 221: driveForDistance(800);
  3688  0A36  3020               	movlw	low(0320h)
  3689  0A37  1283               	bcf	status, 5	;RP0=0, select bank0
  3690  0A38  1303               	bcf	status, 6	;RP1=0, select bank0
  3691  0A39  00AC               	movwf	(?_driveForDistance)
  3692  0A3A  3003               	movlw	high(0320h)
  3693  0A3B  00AD               	movwf	((?_driveForDistance))+1
  3694  0A3C  120A  118A  23B6   	fcall	_driveForDistance
              120A  158A         
  3695                           	line	222
  3696                           ;drive.c: 222: }else
  3697  0A41  2A4E               	goto	l5856
  3698                           	
  3699  0A42                     l5854:	
  3700                           	line	224
  3701                           	
  3702  0A42                     l11161:	
  3703                           ;drive.c: 223: {
  3704                           ;drive.c: 224: driveForDistance(1000);
  3705  0A42  30E8               	movlw	low(03E8h)
  3706  0A43  1283               	bcf	status, 5	;RP0=0, select bank0
  3707  0A44  1303               	bcf	status, 6	;RP1=0, select bank0
  3708  0A45  00AC               	movwf	(?_driveForDistance)
  3709  0A46  3003               	movlw	high(03E8h)
  3710  0A47  00AD               	movwf	((?_driveForDistance))+1
  3711  0A48  120A  118A  23B6   	fcall	_driveForDistance
              120A  158A         
  3712  0A4D  2A4E               	goto	l5856
  3713                           	line	225
  3714                           	
  3715  0A4E                     l5855:	
  3716                           	line	226
  3717                           	
  3718  0A4E                     l5856:	
  3719  0A4E  0008               	return
  3720                           	opt stack 0
  3721                           GLOBAL	__end_of_goForward
  3722  0A4F                     	__end_of_goForward:
  3723 ;; =============== function _goForward ends ============
  3724                           
  3725                           	signat	_goForward,88
  3726                           	global	_goBackward
  3727                           psect	text1242,local,class=CODE,delta=2
  3728                           global __ptext1242
  3729  17D7                     __ptext1242:
  3730                           
  3731 ;; *************** function _goBackward *****************
  3732 ;; Defined at:
  3733 ;;		line 204 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;		None
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;		None
  3738 ;; Return value:  Size  Location     Type
  3739 ;;		None               void
  3740 ;; Registers used:
  3741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3742 ;; Tracked objects:
  3743 ;;		On entry : 0/0
  3744 ;;		On exit  : 0/0
  3745 ;;		Unchanged: 0/0
  3746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3747 ;;      Params:         0       0       0       0       0
  3748 ;;      Locals:         0       0       0       0       0
  3749 ;;      Temps:          0       1       0       0       0
  3750 ;;      Totals:         0       1       0       0       0
  3751 ;;Total ram usage:        1 bytes
  3752 ;; Hardware stack levels used:    1
  3753 ;; Hardware stack levels required when called:    5
  3754 ;; This function calls:
  3755 ;;		_lcd_set_cursor
  3756 ;;		_lcd_write_data
  3757 ;;		_turnAround
  3758 ;;		_updateOrientation
  3759 ;;		_driveForDistance
  3760 ;; This function is called by:
  3761 ;;		_goToNextCell
  3762 ;; This function uses a non-reentrant model
  3763 ;;
  3764                           psect	text1242
  3765                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  3766                           	line	204
  3767                           	global	__size_of_goBackward
  3768  0029                     	__size_of_goBackward	equ	__end_of_goBackward-_goBackward
  3769                           	
  3770  17D7                     _goBackward:	
  3771                           	opt	stack 1
  3772                           ; Regs used in _goBackward: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3773                           	line	205
  3774                           	
  3775  17D7                     l11141:	
  3776                           ;drive.c: 205: lcd_set_cursor(0x0F);
  3777  17D7  300F               	movlw	(0Fh)
  3778  17D8  160A  118A  2587   	fcall	_lcd_set_cursor
              160A  118A         
  3779                           	line	206
  3780                           ;drive.c: 206: lcd_write_data('B');
  3781  17DD  3042               	movlw	(042h)
  3782  17DE  160A  118A  25D1   	fcall	_lcd_write_data
              160A  118A         
  3783                           	line	207
  3784                           	
  3785  17E3                     l11143:	
  3786                           ;drive.c: 207: turnAround();
  3787  17E3  120A  158A  23D9   	fcall	_turnAround
              160A  118A         
  3788                           	line	208
  3789                           	
  3790  17E8                     l11145:	
  3791                           ;drive.c: 208: updateOrientation(BACKWARD);
  3792  17E8  3002               	movlw	(02h)
  3793  17E9  160A  118A  25AE   	fcall	_updateOrientation
              160A  118A         
  3794                           	line	209
  3795                           	
  3796  17EE                     l11147:	
  3797                           ;drive.c: 209: driveForDistance(1000);
  3798  17EE  30E8               	movlw	low(03E8h)
  3799  17EF  1283               	bcf	status, 5	;RP0=0, select bank0
  3800  17F0  1303               	bcf	status, 6	;RP1=0, select bank0
  3801  17F1  00AC               	movwf	(?_driveForDistance)
  3802  17F2  3003               	movlw	high(03E8h)
  3803  17F3  00AD               	movwf	((?_driveForDistance))+1
  3804  17F4  120A  118A  23B6   	fcall	_driveForDistance
              160A  118A         
  3805                           	line	210
  3806                           	
  3807  17F9                     l11149:	
  3808                           ;drive.c: 210: lastMove = BACKWARD;
  3809  17F9  3002               	movlw	(02h)
  3810  17FA  1283               	bcf	status, 5	;RP0=0, select bank0
  3811  17FB  1303               	bcf	status, 6	;RP1=0, select bank0
  3812  17FC  00B8               	movwf	(??_goBackward+0)+0
  3813  17FD  0838               	movf	(??_goBackward+0)+0,w
  3814  17FE  00D3               	movwf	(_lastMove)	;volatile
  3815                           	line	211
  3816                           	
  3817  17FF                     l5851:	
  3818  17FF  0008               	return
  3819                           	opt stack 0
  3820                           GLOBAL	__end_of_goBackward
  3821  1800                     	__end_of_goBackward:
  3822 ;; =============== function _goBackward ends ============
  3823                           
  3824                           	signat	_goBackward,88
  3825                           	global	_wallFollow
  3826                           psect	text1243,local,class=CODE,delta=2
  3827                           global __ptext1243
  3828  0605                     __ptext1243:
  3829                           
  3830 ;; *************** function _wallFollow *****************
  3831 ;; Defined at:
  3832 ;;		line 467 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  3833 ;; Parameters:    Size  Location     Type
  3834 ;;		None
  3835 ;; Auto vars:     Size  Location     Type
  3836 ;;  distanceToWa    2   38[BANK0 ] int 
  3837 ;; Return value:  Size  Location     Type
  3838 ;;		None               void
  3839 ;; Registers used:
  3840 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3841 ;; Tracked objects:
  3842 ;;		On entry : 0/0
  3843 ;;		On exit  : 0/0
  3844 ;;		Unchanged: 0/0
  3845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3846 ;;      Params:         0       0       0       0       0
  3847 ;;      Locals:         0       2       0       0       0
  3848 ;;      Temps:          0       3       0       0       0
  3849 ;;      Totals:         0       5       0       0       0
  3850 ;;Total ram usage:        5 bytes
  3851 ;; Hardware stack levels used:    1
  3852 ;; Hardware stack levels required when called:    5
  3853 ;; This function calls:
  3854 ;;		_readIR
  3855 ;;		_drive
  3856 ;;		_waitFor
  3857 ;; This function is called by:
  3858 ;;		_main
  3859 ;; This function uses a non-reentrant model
  3860 ;;
  3861                           psect	text1243
  3862                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  3863                           	line	467
  3864                           	global	__size_of_wallFollow
  3865  00B1                     	__size_of_wallFollow	equ	__end_of_wallFollow-_wallFollow
  3866                           	
  3867  0605                     _wallFollow:	
  3868                           	opt	stack 2
  3869                           ; Regs used in _wallFollow: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3870                           	line	468
  3871                           	
  3872  0605                     l11125:	
  3873                           ;main.c: 468: int distanceToWall = readIR();
  3874  0605  160A  118A  26F1   	fcall	_readIR
              120A  118A         
  3875  060A  1283               	bcf	status, 5	;RP0=0, select bank0
  3876  060B  1303               	bcf	status, 6	;RP1=0, select bank0
  3877  060C  0840               	movf	(1+(?_readIR)),w
  3878  060D  01C7               	clrf	(wallFollow@distanceToWall+1)
  3879  060E  07C7               	addwf	(wallFollow@distanceToWall+1)
  3880  060F  083F               	movf	(0+(?_readIR)),w
  3881  0610  01C6               	clrf	(wallFollow@distanceToWall)
  3882  0611  07C6               	addwf	(wallFollow@distanceToWall)
  3883                           
  3884                           	line	469
  3885                           	
  3886  0612                     l11127:	
  3887                           ;main.c: 469: if((distanceToWall > 86) && (distanceToWall < 100))
  3888  0612  0847               	movf	(wallFollow@distanceToWall+1),w
  3889  0613  3A80               	xorlw	80h
  3890  0614  00FF               	movwf	btemp+1
  3891  0615  3080               	movlw	(high(057h))^80h
  3892  0616  027F               	subwf	btemp+1,w
  3893  0617  1D03               	skipz
  3894  0618  2E1B               	goto	u4425
  3895  0619  3057               	movlw	low(057h)
  3896  061A  0246               	subwf	(wallFollow@distanceToWall),w
  3897  061B                     u4425:
  3898                           
  3899  061B  1C03               	skipc
  3900  061C  2E1E               	goto	u4421
  3901  061D  2E1F               	goto	u4420
  3902  061E                     u4421:
  3903  061E  2E66               	goto	l11135
  3904  061F                     u4420:
  3905                           	
  3906  061F                     l11129:	
  3907  061F  1283               	bcf	status, 5	;RP0=0, select bank0
  3908  0620  1303               	bcf	status, 6	;RP1=0, select bank0
  3909  0621  0847               	movf	(wallFollow@distanceToWall+1),w
  3910  0622  3A80               	xorlw	80h
  3911  0623  00FF               	movwf	btemp+1
  3912  0624  3080               	movlw	(high(064h))^80h
  3913  0625  027F               	subwf	btemp+1,w
  3914  0626  1D03               	skipz
  3915  0627  2E2A               	goto	u4435
  3916  0628  3064               	movlw	low(064h)
  3917  0629  0246               	subwf	(wallFollow@distanceToWall),w
  3918  062A                     u4435:
  3919                           
  3920  062A  1803               	skipnc
  3921  062B  2E2D               	goto	u4431
  3922  062C  2E2E               	goto	u4430
  3923  062D                     u4431:
  3924  062D  2E66               	goto	l11135
  3925  062E                     u4430:
  3926                           	line	471
  3927                           	
  3928  062E                     l11131:	
  3929                           ;main.c: 470: {
  3930                           ;main.c: 471: drive(0, 50, 0, 1);
  3931  062E  3032               	movlw	(032h)
  3932  062F  1283               	bcf	status, 5	;RP0=0, select bank0
  3933  0630  1303               	bcf	status, 6	;RP1=0, select bank0
  3934  0631  00C3               	movwf	(??_wallFollow+0)+0
  3935  0632  0843               	movf	(??_wallFollow+0)+0,w
  3936  0633  00A2               	movwf	(?_drive)
  3937  0634  01A3               	clrf	0+(?_drive)+01h
  3938  0635  01A4               	clrf	0+(?_drive)+02h
  3939  0636  1403               	bsf	status,0
  3940  0637  0DA4               	rlf	0+(?_drive)+02h,f
  3941  0638  3000               	movlw	(0)
  3942  0639  120A  158A  2130   	fcall	_drive
              120A  118A         
  3943                           	line	472
  3944                           ;main.c: 472: waitFor(157,0,8);
  3945  063E  1283               	bcf	status, 5	;RP0=0, select bank0
  3946  063F  1303               	bcf	status, 6	;RP1=0, select bank0
  3947  0640  01A2               	clrf	(?_waitFor)
  3948  0641  3008               	movlw	(08h)
  3949  0642  00C3               	movwf	(??_wallFollow+0)+0
  3950  0643  0843               	movf	(??_wallFollow+0)+0,w
  3951  0644  00A3               	movwf	0+(?_waitFor)+01h
  3952  0645  309D               	movlw	(09Dh)
  3953  0646  160A  118A  27AE   	fcall	_waitFor
              120A  118A         
  3954                           	line	473
  3955                           ;main.c: 473: drive(0, 0, 0, 0);
  3956  064B  1283               	bcf	status, 5	;RP0=0, select bank0
  3957  064C  1303               	bcf	status, 6	;RP1=0, select bank0
  3958  064D  01A2               	clrf	(?_drive)
  3959  064E  01A3               	clrf	0+(?_drive)+01h
  3960  064F  01A4               	clrf	0+(?_drive)+02h
  3961  0650  3000               	movlw	(0)
  3962  0651  120A  158A  2130   	fcall	_drive
              120A  118A         
  3963                           	line	474
  3964                           	
  3965  0656                     l11133:	
  3966                           ;main.c: 474: _delay((unsigned long)((1000)*(20000000/4000.0)));
  3967                           	opt asmopt_off
  3968  0656  301A               movlw  26
  3969  0657  1283               	bcf	status, 5	;RP0=0, select bank0
  3970  0658  1303               	bcf	status, 6	;RP1=0, select bank0
  3971  0659  00C5               movwf	((??_wallFollow+0)+0+2),f
  3972  065A  305E               movlw	94
  3973  065B  00C4               movwf	((??_wallFollow+0)+0+1),f
  3974  065C  3086               	movlw	134
  3975  065D  00C3               movwf	((??_wallFollow+0)+0),f
  3976  065E                     u4837:
  3977  065E  0BC3               	decfsz	((??_wallFollow+0)+0),f
  3978  065F  2E5E               	goto	u4837
  3979  0660  0BC4               	decfsz	((??_wallFollow+0)+0+1),f
  3980  0661  2E5E               	goto	u4837
  3981  0662  0BC5               	decfsz	((??_wallFollow+0)+0+2),f
  3982  0663  2E5E               	goto	u4837
  3983  0664  0064               	clrwdt
  3984                           opt asmopt_on
  3985                           
  3986                           	line	475
  3987                           ;main.c: 475: }
  3988  0665  2EB5               	goto	l6834
  3989                           	line	476
  3990                           	
  3991  0666                     l6831:	
  3992                           	
  3993  0666                     l11135:	
  3994                           ;main.c: 476: else if(distanceToWall < 36)
  3995  0666  1283               	bcf	status, 5	;RP0=0, select bank0
  3996  0667  1303               	bcf	status, 6	;RP1=0, select bank0
  3997  0668  0847               	movf	(wallFollow@distanceToWall+1),w
  3998  0669  3A80               	xorlw	80h
  3999  066A  00FF               	movwf	btemp+1
  4000  066B  3080               	movlw	(high(024h))^80h
  4001  066C  027F               	subwf	btemp+1,w
  4002  066D  1D03               	skipz
  4003  066E  2E71               	goto	u4445
  4004  066F  3024               	movlw	low(024h)
  4005  0670  0246               	subwf	(wallFollow@distanceToWall),w
  4006  0671                     u4445:
  4007                           
  4008  0671  1803               	skipnc
  4009  0672  2E74               	goto	u4441
  4010  0673  2E75               	goto	u4440
  4011  0674                     u4441:
  4012  0674  2EB5               	goto	l6834
  4013  0675                     u4440:
  4014                           	line	479
  4015                           	
  4016  0675                     l11137:	
  4017                           ;main.c: 477: {
  4018                           ;main.c: 479: drive(0, 50, 255, 255);
  4019  0675  3032               	movlw	(032h)
  4020  0676  1283               	bcf	status, 5	;RP0=0, select bank0
  4021  0677  1303               	bcf	status, 6	;RP1=0, select bank0
  4022  0678  00C3               	movwf	(??_wallFollow+0)+0
  4023  0679  0843               	movf	(??_wallFollow+0)+0,w
  4024  067A  00A2               	movwf	(?_drive)
  4025  067B  30FF               	movlw	(0FFh)
  4026  067C  00C4               	movwf	(??_wallFollow+1)+0
  4027  067D  0844               	movf	(??_wallFollow+1)+0,w
  4028  067E  00A3               	movwf	0+(?_drive)+01h
  4029  067F  30FF               	movlw	(0FFh)
  4030  0680  00C5               	movwf	(??_wallFollow+2)+0
  4031  0681  0845               	movf	(??_wallFollow+2)+0,w
  4032  0682  00A4               	movwf	0+(?_drive)+02h
  4033  0683  3000               	movlw	(0)
  4034  0684  120A  158A  2130   	fcall	_drive
              120A  118A         
  4035                           	line	480
  4036                           ;main.c: 480: waitFor(157,255,0b11111000);
  4037  0689  30FF               	movlw	(0FFh)
  4038  068A  1283               	bcf	status, 5	;RP0=0, select bank0
  4039  068B  1303               	bcf	status, 6	;RP1=0, select bank0
  4040  068C  00C3               	movwf	(??_wallFollow+0)+0
  4041  068D  0843               	movf	(??_wallFollow+0)+0,w
  4042  068E  00A2               	movwf	(?_waitFor)
  4043  068F  30F8               	movlw	(0F8h)
  4044  0690  00C4               	movwf	(??_wallFollow+1)+0
  4045  0691  0844               	movf	(??_wallFollow+1)+0,w
  4046  0692  00A3               	movwf	0+(?_waitFor)+01h
  4047  0693  309D               	movlw	(09Dh)
  4048  0694  160A  118A  27AE   	fcall	_waitFor
              120A  118A         
  4049                           	line	481
  4050                           ;main.c: 481: drive(0, 0, 0, 0);
  4051  0699  1283               	bcf	status, 5	;RP0=0, select bank0
  4052  069A  1303               	bcf	status, 6	;RP1=0, select bank0
  4053  069B  01A2               	clrf	(?_drive)
  4054  069C  01A3               	clrf	0+(?_drive)+01h
  4055  069D  01A4               	clrf	0+(?_drive)+02h
  4056  069E  3000               	movlw	(0)
  4057  069F  120A  158A  2130   	fcall	_drive
              120A  118A         
  4058                           	line	482
  4059                           	
  4060  06A4                     l11139:	
  4061                           ;main.c: 482: _delay((unsigned long)((1000)*(20000000/4000.0)));
  4062                           	opt asmopt_off
  4063  06A4  301A               movlw  26
  4064  06A5  1283               	bcf	status, 5	;RP0=0, select bank0
  4065  06A6  1303               	bcf	status, 6	;RP1=0, select bank0
  4066  06A7  00C5               movwf	((??_wallFollow+0)+0+2),f
  4067  06A8  305E               movlw	94
  4068  06A9  00C4               movwf	((??_wallFollow+0)+0+1),f
  4069  06AA  3086               	movlw	134
  4070  06AB  00C3               movwf	((??_wallFollow+0)+0),f
  4071  06AC                     u4847:
  4072  06AC  0BC3               	decfsz	((??_wallFollow+0)+0),f
  4073  06AD  2EAC               	goto	u4847
  4074  06AE  0BC4               	decfsz	((??_wallFollow+0)+0+1),f
  4075  06AF  2EAC               	goto	u4847
  4076  06B0  0BC5               	decfsz	((??_wallFollow+0)+0+2),f
  4077  06B1  2EAC               	goto	u4847
  4078  06B2  0064               	clrwdt
  4079                           opt asmopt_on
  4080                           
  4081  06B3  2EB5               	goto	l6834
  4082                           	line	483
  4083                           	
  4084  06B4                     l6833:	
  4085  06B4  2EB5               	goto	l6834
  4086                           	line	484
  4087                           	
  4088  06B5                     l6832:	
  4089                           	
  4090  06B5                     l6834:	
  4091  06B5  0008               	return
  4092                           	opt stack 0
  4093                           GLOBAL	__end_of_wallFollow
  4094  06B6                     	__end_of_wallFollow:
  4095 ;; =============== function _wallFollow ends ============
  4096                           
  4097                           	signat	_wallFollow,88
  4098                           	global	_findWall
  4099                           psect	text1244,local,class=CODE,delta=2
  4100                           global __ptext1244
  4101  1654                     __ptext1244:
  4102                           
  4103 ;; *************** function _findWall *****************
  4104 ;; Defined at:
  4105 ;;		line 449 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;		None
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;		None
  4110 ;; Return value:  Size  Location     Type
  4111 ;;		None               void
  4112 ;; Registers used:
  4113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4119 ;;      Params:         0       0       0       0       0
  4120 ;;      Locals:         0       0       0       0       0
  4121 ;;      Temps:          0       0       0       0       0
  4122 ;;      Totals:         0       0       0       0       0
  4123 ;;Total ram usage:        0 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    5
  4126 ;; This function calls:
  4127 ;;		_readIR
  4128 ;; This function is called by:
  4129 ;;		_findWalls
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           psect	text1244
  4133                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  4134                           	line	449
  4135                           	global	__size_of_findWall
  4136  001C                     	__size_of_findWall	equ	__end_of_findWall-_findWall
  4137                           	
  4138  1654                     _findWall:	
  4139                           	opt	stack 1
  4140                           ; Regs used in _findWall: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4141                           	line	450
  4142                           	
  4143  1654                     l11113:	
  4144                           ;main.c: 450: if(readIR() > 100)
  4145  1654  160A  118A  26F1   	fcall	_readIR
              160A  118A         
  4146  1659  1283               	bcf	status, 5	;RP0=0, select bank0
  4147  165A  1303               	bcf	status, 6	;RP1=0, select bank0
  4148  165B  0840               	movf	(1+(?_readIR)),w
  4149  165C  3A80               	xorlw	80h
  4150  165D  00FF               	movwf	btemp+1
  4151  165E  3080               	movlw	(high(065h))^80h
  4152  165F  027F               	subwf	btemp+1,w
  4153  1660  1D03               	skipz
  4154  1661  2E64               	goto	u4415
  4155  1662  3065               	movlw	low(065h)
  4156  1663  023F               	subwf	(0+(?_readIR)),w
  4157  1664                     u4415:
  4158                           
  4159  1664  1C03               	skipc
  4160  1665  2E67               	goto	u4411
  4161  1666  2E68               	goto	u4410
  4162  1667                     u4411:
  4163  1667  2E6C               	goto	l11121
  4164  1668                     u4410:
  4165                           	line	451
  4166                           	
  4167  1668                     l11115:	
  4168                           ;main.c: 451: return 0;
  4169  1668  1003               	clrc
  4170                           	
  4171  1669  2E6F               	goto	l6821
  4172                           	
  4173  166A                     l11117:	
  4174  166A  2E6F               	goto	l6821
  4175                           	
  4176  166B                     l11119:	
  4177  166B  2E6F               	goto	l6821
  4178                           	line	452
  4179                           	
  4180  166C                     l6820:	
  4181                           	line	453
  4182                           	
  4183  166C                     l11121:	
  4184                           ;main.c: 452: else
  4185                           ;main.c: 453: return 1;
  4186  166C  1403               	setc
  4187                           	
  4188  166D  2E6F               	goto	l6821
  4189                           	
  4190  166E                     l11123:	
  4191  166E  2E6F               	goto	l6821
  4192                           	
  4193  166F                     l6822:	
  4194                           	line	454
  4195                           	
  4196  166F                     l6821:	
  4197  166F  0008               	return
  4198                           	opt stack 0
  4199                           GLOBAL	__end_of_findWall
  4200  1670                     	__end_of_findWall:
  4201 ;; =============== function _findWall ends ============
  4202                           
  4203                           	signat	_findWall,88
  4204                           	global	_frontWallCorrect
  4205                           psect	text1245,local,class=CODE,delta=2
  4206                           global __ptext1245
  4207  06B6                     __ptext1245:
  4208                           
  4209 ;; *************** function _frontWallCorrect *****************
  4210 ;; Defined at:
  4211 ;;		line 324 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;		None
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;  distToWall      2   37[BANK0 ] int 
  4216 ;; Return value:  Size  Location     Type
  4217 ;;		None               void
  4218 ;; Registers used:
  4219 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4220 ;; Tracked objects:
  4221 ;;		On entry : 0/0
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4225 ;;      Params:         0       0       0       0       0
  4226 ;;      Locals:         0       2       0       0       0
  4227 ;;      Temps:          0       2       0       0       0
  4228 ;;      Totals:         0       4       0       0       0
  4229 ;;Total ram usage:        4 bytes
  4230 ;; Hardware stack levels used:    1
  4231 ;; Hardware stack levels required when called:    5
  4232 ;; This function calls:
  4233 ;;		_readIR
  4234 ;;		_drive
  4235 ;;		_clearSuccessfulDrive
  4236 ;; This function is called by:
  4237 ;;		_main
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           psect	text1245
  4241                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  4242                           	line	324
  4243                           	global	__size_of_frontWallCorrect
  4244  00AD                     	__size_of_frontWallCorrect	equ	__end_of_frontWallCorrect-_frontWallCorrect
  4245                           	
  4246  06B6                     _frontWallCorrect:	
  4247                           	opt	stack 2
  4248                           ; Regs used in _frontWallCorrect: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4249                           	line	326
  4250                           	
  4251  06B6                     l11087:	
  4252                           ;drive.c: 326: int distToWall = readIR();
  4253  06B6  160A  118A  26F1   	fcall	_readIR
              120A  118A         
  4254  06BB  1283               	bcf	status, 5	;RP0=0, select bank0
  4255  06BC  1303               	bcf	status, 6	;RP1=0, select bank0
  4256  06BD  0840               	movf	(1+(?_readIR)),w
  4257  06BE  01C6               	clrf	(frontWallCorrect@distToWall+1)
  4258  06BF  07C6               	addwf	(frontWallCorrect@distToWall+1)
  4259  06C0  083F               	movf	(0+(?_readIR)),w
  4260  06C1  01C5               	clrf	(frontWallCorrect@distToWall)
  4261  06C2  07C5               	addwf	(frontWallCorrect@distToWall)
  4262                           
  4263                           	line	327
  4264                           	
  4265  06C3                     l11089:	
  4266                           ;drive.c: 327: if(distToWall < 45)
  4267  06C3  0846               	movf	(frontWallCorrect@distToWall+1),w
  4268  06C4  3A80               	xorlw	80h
  4269  06C5  00FF               	movwf	btemp+1
  4270  06C6  3080               	movlw	(high(02Dh))^80h
  4271  06C7  027F               	subwf	btemp+1,w
  4272  06C8  1D03               	skipz
  4273  06C9  2ECC               	goto	u4375
  4274  06CA  302D               	movlw	low(02Dh)
  4275  06CB  0245               	subwf	(frontWallCorrect@distToWall),w
  4276  06CC                     u4375:
  4277                           
  4278  06CC  1803               	skipnc
  4279  06CD  2ECF               	goto	u4371
  4280  06CE  2ED0               	goto	u4370
  4281  06CF                     u4371:
  4282  06CF  2F11               	goto	l11101
  4283  06D0                     u4370:
  4284                           	line	329
  4285                           	
  4286  06D0                     l11091:	
  4287                           ;drive.c: 328: {
  4288                           ;drive.c: 329: drive(255, 125, 128, 0);
  4289  06D0  307D               	movlw	(07Dh)
  4290  06D1  1283               	bcf	status, 5	;RP0=0, select bank0
  4291  06D2  1303               	bcf	status, 6	;RP1=0, select bank0
  4292  06D3  00C3               	movwf	(??_frontWallCorrect+0)+0
  4293  06D4  0843               	movf	(??_frontWallCorrect+0)+0,w
  4294  06D5  00A2               	movwf	(?_drive)
  4295  06D6  3080               	movlw	(080h)
  4296  06D7  00C4               	movwf	(??_frontWallCorrect+1)+0
  4297  06D8  0844               	movf	(??_frontWallCorrect+1)+0,w
  4298  06D9  00A3               	movwf	0+(?_drive)+01h
  4299  06DA  01A4               	clrf	0+(?_drive)+02h
  4300  06DB  30FF               	movlw	(0FFh)
  4301  06DC  120A  158A  2130   	fcall	_drive
              120A  118A         
  4302                           	line	330
  4303                           ;drive.c: 330: while(distToWall < 51)
  4304  06E1  2EF0               	goto	l11095
  4305                           	
  4306  06E2                     l5888:	
  4307                           	line	331
  4308                           	
  4309  06E2                     l11093:	
  4310                           ;drive.c: 331: distToWall = readIR();
  4311  06E2  160A  118A  26F1   	fcall	_readIR
              120A  118A         
  4312  06E7  1283               	bcf	status, 5	;RP0=0, select bank0
  4313  06E8  1303               	bcf	status, 6	;RP1=0, select bank0
  4314  06E9  0840               	movf	(1+(?_readIR)),w
  4315  06EA  01C6               	clrf	(frontWallCorrect@distToWall+1)
  4316  06EB  07C6               	addwf	(frontWallCorrect@distToWall+1)
  4317  06EC  083F               	movf	(0+(?_readIR)),w
  4318  06ED  01C5               	clrf	(frontWallCorrect@distToWall)
  4319  06EE  07C5               	addwf	(frontWallCorrect@distToWall)
  4320                           
  4321  06EF  2EF0               	goto	l11095
  4322                           	
  4323  06F0                     l5887:	
  4324                           	line	330
  4325                           	
  4326  06F0                     l11095:	
  4327  06F0  1283               	bcf	status, 5	;RP0=0, select bank0
  4328  06F1  1303               	bcf	status, 6	;RP1=0, select bank0
  4329  06F2  0846               	movf	(frontWallCorrect@distToWall+1),w
  4330  06F3  3A80               	xorlw	80h
  4331  06F4  00FF               	movwf	btemp+1
  4332  06F5  3080               	movlw	(high(033h))^80h
  4333  06F6  027F               	subwf	btemp+1,w
  4334  06F7  1D03               	skipz
  4335  06F8  2EFB               	goto	u4385
  4336  06F9  3033               	movlw	low(033h)
  4337  06FA  0245               	subwf	(frontWallCorrect@distToWall),w
  4338  06FB                     u4385:
  4339                           
  4340  06FB  1C03               	skipc
  4341  06FC  2EFE               	goto	u4381
  4342  06FD  2EFF               	goto	u4380
  4343  06FE                     u4381:
  4344  06FE  2EE2               	goto	l11093
  4345  06FF                     u4380:
  4346  06FF  2F00               	goto	l11097
  4347                           	
  4348  0700                     l5889:	
  4349                           	line	332
  4350                           	
  4351  0700                     l11097:	
  4352                           ;drive.c: 332: drive(0, 0, 0, 0);
  4353  0700  1283               	bcf	status, 5	;RP0=0, select bank0
  4354  0701  1303               	bcf	status, 6	;RP1=0, select bank0
  4355  0702  01A2               	clrf	(?_drive)
  4356  0703  01A3               	clrf	0+(?_drive)+01h
  4357  0704  01A4               	clrf	0+(?_drive)+02h
  4358  0705  3000               	movlw	(0)
  4359  0706  120A  158A  2130   	fcall	_drive
              120A  118A         
  4360                           	line	333
  4361                           	
  4362  070B                     l11099:	
  4363                           ;drive.c: 333: clearSuccessfulDrive();
  4364  070B  120A  158A  2046   	fcall	_clearSuccessfulDrive
              120A  118A         
  4365                           	line	334
  4366                           ;drive.c: 334: }
  4367  0710  2F62               	goto	l5895
  4368                           	line	335
  4369                           	
  4370  0711                     l5886:	
  4371                           	
  4372  0711                     l11101:	
  4373                           ;drive.c: 335: else if(distToWall > 55)
  4374  0711  1283               	bcf	status, 5	;RP0=0, select bank0
  4375  0712  1303               	bcf	status, 6	;RP1=0, select bank0
  4376  0713  0846               	movf	(frontWallCorrect@distToWall+1),w
  4377  0714  3A80               	xorlw	80h
  4378  0715  00FF               	movwf	btemp+1
  4379  0716  3080               	movlw	(high(038h))^80h
  4380  0717  027F               	subwf	btemp+1,w
  4381  0718  1D03               	skipz
  4382  0719  2F1C               	goto	u4395
  4383  071A  3038               	movlw	low(038h)
  4384  071B  0245               	subwf	(frontWallCorrect@distToWall),w
  4385  071C                     u4395:
  4386                           
  4387  071C  1C03               	skipc
  4388  071D  2F1F               	goto	u4391
  4389  071E  2F20               	goto	u4390
  4390  071F                     u4391:
  4391  071F  2F62               	goto	l5895
  4392  0720                     u4390:
  4393                           	line	337
  4394                           	
  4395  0720                     l11103:	
  4396                           ;drive.c: 336: {
  4397                           ;drive.c: 337: drive(0, 250, 128, 0);
  4398  0720  30FA               	movlw	(0FAh)
  4399  0721  1283               	bcf	status, 5	;RP0=0, select bank0
  4400  0722  1303               	bcf	status, 6	;RP1=0, select bank0
  4401  0723  00C3               	movwf	(??_frontWallCorrect+0)+0
  4402  0724  0843               	movf	(??_frontWallCorrect+0)+0,w
  4403  0725  00A2               	movwf	(?_drive)
  4404  0726  3080               	movlw	(080h)
  4405  0727  00C4               	movwf	(??_frontWallCorrect+1)+0
  4406  0728  0844               	movf	(??_frontWallCorrect+1)+0,w
  4407  0729  00A3               	movwf	0+(?_drive)+01h
  4408  072A  01A4               	clrf	0+(?_drive)+02h
  4409  072B  3000               	movlw	(0)
  4410  072C  120A  158A  2130   	fcall	_drive
              120A  118A         
  4411                           	line	338
  4412                           ;drive.c: 338: while(distToWall > 49)
  4413  0731  2F40               	goto	l11107
  4414                           	
  4415  0732                     l5893:	
  4416                           	line	339
  4417                           	
  4418  0732                     l11105:	
  4419                           ;drive.c: 339: distToWall = readIR();
  4420  0732  160A  118A  26F1   	fcall	_readIR
              120A  118A         
  4421  0737  1283               	bcf	status, 5	;RP0=0, select bank0
  4422  0738  1303               	bcf	status, 6	;RP1=0, select bank0
  4423  0739  0840               	movf	(1+(?_readIR)),w
  4424  073A  01C6               	clrf	(frontWallCorrect@distToWall+1)
  4425  073B  07C6               	addwf	(frontWallCorrect@distToWall+1)
  4426  073C  083F               	movf	(0+(?_readIR)),w
  4427  073D  01C5               	clrf	(frontWallCorrect@distToWall)
  4428  073E  07C5               	addwf	(frontWallCorrect@distToWall)
  4429                           
  4430  073F  2F40               	goto	l11107
  4431                           	
  4432  0740                     l5892:	
  4433                           	line	338
  4434                           	
  4435  0740                     l11107:	
  4436  0740  1283               	bcf	status, 5	;RP0=0, select bank0
  4437  0741  1303               	bcf	status, 6	;RP1=0, select bank0
  4438  0742  0846               	movf	(frontWallCorrect@distToWall+1),w
  4439  0743  3A80               	xorlw	80h
  4440  0744  00FF               	movwf	btemp+1
  4441  0745  3080               	movlw	(high(032h))^80h
  4442  0746  027F               	subwf	btemp+1,w
  4443  0747  1D03               	skipz
  4444  0748  2F4B               	goto	u4405
  4445  0749  3032               	movlw	low(032h)
  4446  074A  0245               	subwf	(frontWallCorrect@distToWall),w
  4447  074B                     u4405:
  4448                           
  4449  074B  1803               	skipnc
  4450  074C  2F4E               	goto	u4401
  4451  074D  2F4F               	goto	u4400
  4452  074E                     u4401:
  4453  074E  2F32               	goto	l11105
  4454  074F                     u4400:
  4455  074F  2F50               	goto	l11109
  4456                           	
  4457  0750                     l5894:	
  4458                           	line	340
  4459                           	
  4460  0750                     l11109:	
  4461                           ;drive.c: 340: drive(0, 0, 0, 0);
  4462  0750  1283               	bcf	status, 5	;RP0=0, select bank0
  4463  0751  1303               	bcf	status, 6	;RP1=0, select bank0
  4464  0752  01A2               	clrf	(?_drive)
  4465  0753  01A3               	clrf	0+(?_drive)+01h
  4466  0754  01A4               	clrf	0+(?_drive)+02h
  4467  0755  3000               	movlw	(0)
  4468  0756  120A  158A  2130   	fcall	_drive
              120A  118A         
  4469                           	line	341
  4470                           	
  4471  075B                     l11111:	
  4472                           ;drive.c: 341: clearSuccessfulDrive();
  4473  075B  120A  158A  2046   	fcall	_clearSuccessfulDrive
              120A  118A         
  4474  0760  2F62               	goto	l5895
  4475                           	line	342
  4476                           	
  4477  0761                     l5891:	
  4478  0761  2F62               	goto	l5895
  4479                           	line	344
  4480                           	
  4481  0762                     l5890:	
  4482                           	
  4483  0762                     l5895:	
  4484  0762  0008               	return
  4485                           	opt stack 0
  4486                           GLOBAL	__end_of_frontWallCorrect
  4487  0763                     	__end_of_frontWallCorrect:
  4488 ;; =============== function _frontWallCorrect ends ============
  4489                           
  4490                           	signat	_frontWallCorrect,88
  4491                           	global	_driveForDistance
  4492                           psect	text1246,local,class=CODE,delta=2
  4493                           global __ptext1246
  4494  03B6                     __ptext1246:
  4495                           
  4496 ;; *************** function _driveForDistance *****************
  4497 ;; Defined at:
  4498 ;;		line 32 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;  moveDistance    2   12[BANK0 ] int 
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;  distance        2   18[BANK0 ] int 
  4503 ;;  deltaDistanc    2   16[BANK0 ] int 
  4504 ;;  cliff           1   23[BANK0 ] volatile unsigned char 
  4505 ;;  virtualWall     1   22[BANK0 ] volatile unsigned char 
  4506 ;;  low             1   21[BANK0 ] volatile unsigned char 
  4507 ;;  high            1   20[BANK0 ] volatile unsigned char 
  4508 ;; Return value:  Size  Location     Type
  4509 ;;		None               void
  4510 ;; Registers used:
  4511 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4512 ;; Tracked objects:
  4513 ;;		On entry : 0/0
  4514 ;;		On exit  : 0/0
  4515 ;;		Unchanged: 0/0
  4516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4517 ;;      Params:         0       2       0       0       0
  4518 ;;      Locals:         0       8       0       0       0
  4519 ;;      Temps:          0       2       0       0       0
  4520 ;;      Totals:         0      12       0       0       0
  4521 ;;Total ram usage:       12 bytes
  4522 ;; Hardware stack levels used:    1
  4523 ;; Hardware stack levels required when called:    4
  4524 ;; This function calls:
  4525 ;;		_drive
  4526 ;;		_ser_putch
  4527 ;;		_ser_getch
  4528 ;;		_goReverse
  4529 ;;		_clearSuccessfulDrive
  4530 ;;		_getCurrentY
  4531 ;;		_getCurrentX
  4532 ;;		_findFinalDestination
  4533 ;;		_turnRight90
  4534 ;;		_updateOrientation
  4535 ;;		_turnLeft90
  4536 ;; This function is called by:
  4537 ;;		_goBackward
  4538 ;;		_goForward
  4539 ;;		_goLeft
  4540 ;;		_goRight
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           psect	text1246
  4544                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  4545                           	line	32
  4546                           	global	__size_of_driveForDistance
  4547  014A                     	__size_of_driveForDistance	equ	__end_of_driveForDistance-_driveForDistance
  4548                           	
  4549  03B6                     _driveForDistance:	
  4550                           	opt	stack 2
  4551                           ; Regs used in _driveForDistance: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4552                           	line	35
  4553                           	
  4554  03B6                     l11017:	
  4555                           ;drive.c: 34: volatile char high, low, cliff, virtualWall;
  4556                           ;drive.c: 35: int deltaDistance = 0;
  4557  03B6  1283               	bcf	status, 5	;RP0=0, select bank0
  4558  03B7  1303               	bcf	status, 6	;RP1=0, select bank0
  4559  03B8  01B0               	clrf	(driveForDistance@deltaDistance)
  4560  03B9  01B1               	clrf	(driveForDistance@deltaDistance+1)
  4561                           	line	36
  4562                           ;drive.c: 36: int distance = 0;
  4563  03BA  01B2               	clrf	(driveForDistance@distance)
  4564  03BB  01B3               	clrf	(driveForDistance@distance+1)
  4565                           	line	38
  4566                           	
  4567  03BC                     l11019:	
  4568                           ;drive.c: 38: moving = 1;
  4569  03BC  1471               	bsf	(_moving/8),(_moving)&7
  4570                           	line	39
  4571                           	
  4572  03BD                     l11021:	
  4573                           ;drive.c: 39: drive(0, 250, 128, 0);
  4574  03BD  30FA               	movlw	(0FAh)
  4575  03BE  00AE               	movwf	(??_driveForDistance+0)+0
  4576  03BF  082E               	movf	(??_driveForDistance+0)+0,w
  4577  03C0  00A2               	movwf	(?_drive)
  4578  03C1  3080               	movlw	(080h)
  4579  03C2  00AF               	movwf	(??_driveForDistance+1)+0
  4580  03C3  082F               	movf	(??_driveForDistance+1)+0,w
  4581  03C4  00A3               	movwf	0+(?_drive)+01h
  4582  03C5  01A4               	clrf	0+(?_drive)+02h
  4583  03C6  3000               	movlw	(0)
  4584  03C7  120A  158A  2130   	fcall	_drive
              120A  118A         
  4585                           	line	40
  4586                           	
  4587  03CC                     l11023:	
  4588                           ;drive.c: 40: successfulDrive = 0;
  4589  03CC  11F1               	bcf	(_successfulDrive/8),(_successfulDrive)&7
  4590                           	line	42
  4591                           ;drive.c: 42: while(moving)
  4592  03CD  2CFA               	goto	l11085
  4593                           	
  4594  03CE                     l5822:	
  4595                           	line	44
  4596                           	
  4597  03CE                     l11025:	
  4598                           ;drive.c: 43: {
  4599                           ;drive.c: 44: if(distance >= 100)
  4600  03CE  1283               	bcf	status, 5	;RP0=0, select bank0
  4601  03CF  1303               	bcf	status, 6	;RP1=0, select bank0
  4602  03D0  0833               	movf	(driveForDistance@distance+1),w
  4603  03D1  3A80               	xorlw	80h
  4604  03D2  00FF               	movwf	btemp+1
  4605  03D3  3080               	movlw	(high(064h))^80h
  4606  03D4  027F               	subwf	btemp+1,w
  4607  03D5  1D03               	skipz
  4608  03D6  2BD9               	goto	u4295
  4609  03D7  3064               	movlw	low(064h)
  4610  03D8  0232               	subwf	(driveForDistance@distance),w
  4611  03D9                     u4295:
  4612                           
  4613  03D9  1C03               	skipc
  4614  03DA  2BDC               	goto	u4291
  4615  03DB  2BDD               	goto	u4290
  4616  03DC                     u4291:
  4617  03DC  2C29               	goto	l11041
  4618  03DD                     u4290:
  4619                           	line	47
  4620                           	
  4621  03DD                     l11027:	
  4622                           ;drive.c: 45: {
  4623                           ;drive.c: 47: ser_putch(142);
  4624  03DD  308E               	movlw	(08Eh)
  4625  03DE  160A  118A  26AE   	fcall	_ser_putch
              120A  118A         
  4626                           	line	48
  4627                           ;drive.c: 48: ser_putch(10);
  4628  03E3  300A               	movlw	(0Ah)
  4629  03E4  160A  118A  26AE   	fcall	_ser_putch
              120A  118A         
  4630                           	line	49
  4631                           ;drive.c: 49: cliff = ser_getch();
  4632  03E9  160A  118A  26CF   	fcall	_ser_getch
              120A  118A         
  4633  03EE  1283               	bcf	status, 5	;RP0=0, select bank0
  4634  03EF  1303               	bcf	status, 6	;RP1=0, select bank0
  4635  03F0  00AE               	movwf	(??_driveForDistance+0)+0
  4636  03F1  082E               	movf	(??_driveForDistance+0)+0,w
  4637  03F2  00B7               	movwf	(driveForDistance@cliff)	;volatile
  4638                           	line	50
  4639                           	
  4640  03F3                     l11029:	
  4641                           ;drive.c: 50: if(cliff == 0)
  4642  03F3  08B7               	movf	(driveForDistance@cliff),f
  4643  03F4  1D03               	skipz	;volatile
  4644  03F5  2BF7               	goto	u4301
  4645  03F6  2BF8               	goto	u4300
  4646  03F7                     u4301:
  4647  03F7  2C0F               	goto	l11033
  4648  03F8                     u4300:
  4649                           	line	52
  4650                           	
  4651  03F8                     l11031:	
  4652                           ;drive.c: 51: {
  4653                           ;drive.c: 52: ser_putch(142);
  4654  03F8  308E               	movlw	(08Eh)
  4655  03F9  160A  118A  26AE   	fcall	_ser_putch
              120A  118A         
  4656                           	line	53
  4657                           ;drive.c: 53: ser_putch(7);
  4658  03FE  3007               	movlw	(07h)
  4659  03FF  160A  118A  26AE   	fcall	_ser_putch
              120A  118A         
  4660                           	line	54
  4661                           ;drive.c: 54: cliff = ser_getch();
  4662  0404  160A  118A  26CF   	fcall	_ser_getch
              120A  118A         
  4663  0409  1283               	bcf	status, 5	;RP0=0, select bank0
  4664  040A  1303               	bcf	status, 6	;RP1=0, select bank0
  4665  040B  00AE               	movwf	(??_driveForDistance+0)+0
  4666  040C  082E               	movf	(??_driveForDistance+0)+0,w
  4667  040D  00B7               	movwf	(driveForDistance@cliff)	;volatile
  4668  040E  2C0F               	goto	l11033
  4669                           	line	67
  4670                           	
  4671  040F                     l5824:	
  4672                           	line	68
  4673                           	
  4674  040F                     l11033:	
  4675                           ;drive.c: 67: }
  4676                           ;drive.c: 68: if(cliff != 0)
  4677  040F  0837               	movf	(driveForDistance@cliff),w	;volatile
  4678  0410  1D03               	skipz
  4679  0411  2C13               	goto	u4310
  4680  0412  2C29               	goto	l11041
  4681  0413                     u4310:
  4682                           	line	70
  4683                           	
  4684  0413                     l11035:	
  4685                           ;drive.c: 69: {
  4686                           ;drive.c: 70: drive(0, 0, 0, 0);
  4687  0413  01A2               	clrf	(?_drive)
  4688  0414  01A3               	clrf	0+(?_drive)+01h
  4689  0415  01A4               	clrf	0+(?_drive)+02h
  4690  0416  3000               	movlw	(0)
  4691  0417  120A  158A  2130   	fcall	_drive
              120A  118A         
  4692                           	line	71
  4693                           ;drive.c: 71: goReverse();
  4694  041C  120A  158A  2420   	fcall	_goReverse
              120A  118A         
  4695                           	line	72
  4696                           	
  4697  0421                     l11037:	
  4698                           ;drive.c: 72: clearSuccessfulDrive();
  4699  0421  120A  158A  2046   	fcall	_clearSuccessfulDrive
              120A  118A         
  4700                           	line	88
  4701                           	
  4702  0426                     l11039:	
  4703                           ;drive.c: 88: moving = 0;
  4704  0426  1071               	bcf	(_moving/8),(_moving)&7
  4705  0427  2C29               	goto	l11041
  4706                           	line	89
  4707                           	
  4708  0428                     l5825:	
  4709  0428  2C29               	goto	l11041
  4710                           	line	90
  4711                           	
  4712  0429                     l5823:	
  4713                           	line	93
  4714                           	
  4715  0429                     l11041:	
  4716                           ;drive.c: 89: }
  4717                           ;drive.c: 90: }
  4718                           ;drive.c: 93: ser_putch(142);
  4719  0429  308E               	movlw	(08Eh)
  4720  042A  160A  118A  26AE   	fcall	_ser_putch
              120A  118A         
  4721                           	line	94
  4722                           	
  4723  042F                     l11043:	
  4724                           ;drive.c: 94: ser_putch(13);
  4725  042F  300D               	movlw	(0Dh)
  4726  0430  160A  118A  26AE   	fcall	_ser_putch
              120A  118A         
  4727                           	line	95
  4728                           	
  4729  0435                     l11045:	
  4730                           ;drive.c: 95: virtualWall = ser_getch();
  4731  0435  160A  118A  26CF   	fcall	_ser_getch
              120A  118A         
  4732  043A  1283               	bcf	status, 5	;RP0=0, select bank0
  4733  043B  1303               	bcf	status, 6	;RP1=0, select bank0
  4734  043C  00AE               	movwf	(??_driveForDistance+0)+0
  4735  043D  082E               	movf	(??_driveForDistance+0)+0,w
  4736  043E  00B6               	movwf	(driveForDistance@virtualWall)	;volatile
  4737                           	line	96
  4738                           	
  4739  043F                     l11047:	
  4740                           ;drive.c: 96: if(virtualWall == 1)
  4741  043F  0836               	movf	(driveForDistance@virtualWall),w	;volatile
  4742  0440  3A01               	xorlw	01h
  4743  0441  1D03               	skipz
  4744  0442  2C44               	goto	u4321
  4745  0443  2C45               	goto	u4320
  4746  0444                     u4321:
  4747  0444  2CA3               	goto	l11069
  4748  0445                     u4320:
  4749                           	line	98
  4750                           	
  4751  0445                     l11049:	
  4752                           ;drive.c: 97: {
  4753                           ;drive.c: 98: drive(0, 0, 0, 0);
  4754  0445  01A2               	clrf	(?_drive)
  4755  0446  01A3               	clrf	0+(?_drive)+01h
  4756  0447  01A4               	clrf	0+(?_drive)+02h
  4757  0448  3000               	movlw	(0)
  4758  0449  120A  158A  2130   	fcall	_drive
              120A  118A         
  4759                           	line	99
  4760                           ;drive.c: 99: findFinalDestination(getCurrentX(),getCurrentY(), currentOrientation);
  4761  044E  160A  118A  255E   	fcall	_getCurrentY
              120A  118A         
  4762  0453  1283               	bcf	status, 5	;RP0=0, select bank0
  4763  0454  1303               	bcf	status, 6	;RP1=0, select bank0
  4764  0455  00AE               	movwf	(??_driveForDistance+0)+0
  4765  0456  082E               	movf	(??_driveForDistance+0)+0,w
  4766  0457  00A4               	movwf	(?_findFinalDestination)
  4767  0458  0852               	movf	(_currentOrientation),w	;volatile
  4768  0459  00AF               	movwf	(??_driveForDistance+1)+0
  4769  045A  082F               	movf	(??_driveForDistance+1)+0,w
  4770  045B  00A5               	movwf	0+(?_findFinalDestination)+01h
  4771  045C  160A  118A  2559   	fcall	_getCurrentX
              120A  118A         
  4772  0461  120A  118A  2500   	fcall	_findFinalDestination
              120A  118A         
  4773                           	line	100
  4774                           ;drive.c: 100: goReverse();
  4775  0466  120A  158A  2420   	fcall	_goReverse
              120A  118A         
  4776                           	line	101
  4777                           	
  4778  046B                     l11051:	
  4779                           ;drive.c: 101: clearSuccessfulDrive();
  4780  046B  120A  158A  2046   	fcall	_clearSuccessfulDrive
              120A  118A         
  4781                           	line	102
  4782                           	
  4783  0470                     l11053:	
  4784                           ;drive.c: 102: if(lastMove == LEFT)
  4785  0470  1283               	bcf	status, 5	;RP0=0, select bank0
  4786  0471  1303               	bcf	status, 6	;RP1=0, select bank0
  4787  0472  0853               	movf	(_lastMove),w	;volatile
  4788  0473  3A01               	xorlw	01h
  4789  0474  1D03               	skipz
  4790  0475  2C77               	goto	u4331
  4791  0476  2C78               	goto	u4330
  4792  0477                     u4331:
  4793  0477  2C87               	goto	l11061
  4794  0478                     u4330:
  4795                           	line	104
  4796                           	
  4797  0478                     l11055:	
  4798                           ;drive.c: 103: {
  4799                           ;drive.c: 104: somethingInTheWay = LEFT;
  4800  0478  01DF               	clrf	(_somethingInTheWay)	;volatile
  4801  0479  1403               	bsf	status,0
  4802  047A  0DDF               	rlf	(_somethingInTheWay),f	;volatile
  4803                           	line	105
  4804                           	
  4805  047B                     l11057:	
  4806                           ;drive.c: 105: turnRight90();
  4807  047B  120A  158A  228E   	fcall	_turnRight90
              120A  118A         
  4808                           	line	106
  4809                           	
  4810  0480                     l11059:	
  4811                           ;drive.c: 106: updateOrientation(RIGHT);
  4812  0480  3003               	movlw	(03h)
  4813  0481  160A  118A  25AE   	fcall	_updateOrientation
              120A  118A         
  4814                           	line	107
  4815                           ;drive.c: 107: }
  4816  0486  2CA1               	goto	l5828
  4817                           	line	108
  4818                           	
  4819  0487                     l5827:	
  4820                           	
  4821  0487                     l11061:	
  4822                           ;drive.c: 108: else if (lastMove == RIGHT)
  4823  0487  1283               	bcf	status, 5	;RP0=0, select bank0
  4824  0488  1303               	bcf	status, 6	;RP1=0, select bank0
  4825  0489  0853               	movf	(_lastMove),w	;volatile
  4826  048A  3A03               	xorlw	03h
  4827  048B  1D03               	skipz
  4828  048C  2C8E               	goto	u4341
  4829  048D  2C8F               	goto	u4340
  4830  048E                     u4341:
  4831  048E  2C9F               	goto	l5829
  4832  048F                     u4340:
  4833                           	line	110
  4834                           	
  4835  048F                     l11063:	
  4836                           ;drive.c: 109: {
  4837                           ;drive.c: 110: somethingInTheWay = RIGHT;
  4838  048F  3003               	movlw	(03h)
  4839  0490  00AE               	movwf	(??_driveForDistance+0)+0
  4840  0491  082E               	movf	(??_driveForDistance+0)+0,w
  4841  0492  00DF               	movwf	(_somethingInTheWay)	;volatile
  4842                           	line	111
  4843                           	
  4844  0493                     l11065:	
  4845                           ;drive.c: 111: turnLeft90();
  4846  0493  120A  158A  24B4   	fcall	_turnLeft90
              120A  118A         
  4847                           	line	112
  4848                           	
  4849  0498                     l11067:	
  4850                           ;drive.c: 112: updateOrientation(LEFT);
  4851  0498  3001               	movlw	(01h)
  4852  0499  160A  118A  25AE   	fcall	_updateOrientation
              120A  118A         
  4853                           	line	113
  4854                           ;drive.c: 113: }
  4855  049E  2CA1               	goto	l5828
  4856                           	line	114
  4857                           	
  4858  049F                     l5829:	
  4859                           	line	115
  4860                           ;drive.c: 114: else
  4861                           ;drive.c: 115: somethingInTheWay = FORWARD;
  4862  049F  01DF               	clrf	(_somethingInTheWay)	;volatile
  4863  04A0  2CA1               	goto	l5828
  4864                           	
  4865  04A1                     l5830:	
  4866                           	
  4867  04A1                     l5828:	
  4868                           	line	116
  4869                           ;drive.c: 116: moving = 0;
  4870  04A1  1071               	bcf	(_moving/8),(_moving)&7
  4871  04A2  2CA3               	goto	l11069
  4872                           	line	117
  4873                           	
  4874  04A3                     l5826:	
  4875                           	line	161
  4876                           	
  4877  04A3                     l11069:	
  4878                           ;drive.c: 117: }
  4879                           ;drive.c: 161: ser_putch(142);
  4880  04A3  308E               	movlw	(08Eh)
  4881  04A4  160A  118A  26AE   	fcall	_ser_putch
              120A  118A         
  4882                           	line	162
  4883                           ;drive.c: 162: ser_putch(19);
  4884  04A9  3013               	movlw	(013h)
  4885  04AA  160A  118A  26AE   	fcall	_ser_putch
              120A  118A         
  4886                           	line	163
  4887                           ;drive.c: 163: high = ser_getch();
  4888  04AF  160A  118A  26CF   	fcall	_ser_getch
              120A  118A         
  4889  04B4  1283               	bcf	status, 5	;RP0=0, select bank0
  4890  04B5  1303               	bcf	status, 6	;RP1=0, select bank0
  4891  04B6  00AE               	movwf	(??_driveForDistance+0)+0
  4892  04B7  082E               	movf	(??_driveForDistance+0)+0,w
  4893  04B8  00B4               	movwf	(driveForDistance@high)	;volatile
  4894                           	line	164
  4895                           ;drive.c: 164: low = ser_getch();
  4896  04B9  160A  118A  26CF   	fcall	_ser_getch
              120A  118A         
  4897  04BE  1283               	bcf	status, 5	;RP0=0, select bank0
  4898  04BF  1303               	bcf	status, 6	;RP1=0, select bank0
  4899  04C0  00AE               	movwf	(??_driveForDistance+0)+0
  4900  04C1  082E               	movf	(??_driveForDistance+0)+0,w
  4901  04C2  00B5               	movwf	(driveForDistance@low)	;volatile
  4902                           	line	165
  4903                           	
  4904  04C3                     l11071:	
  4905                           ;drive.c: 165: deltaDistance = high*256 + low;
  4906  04C3  0834               	movf	(driveForDistance@high),w	;volatile
  4907  04C4  00AE               	movwf	(??_driveForDistance+0)+0
  4908  04C5  01AF               	clrf	(??_driveForDistance+0)+0+1
  4909  04C6  082E               	movf	(??_driveForDistance+0)+0,w
  4910  04C7  00AF               	movwf	(??_driveForDistance+0)+1
  4911  04C8  01AE               	clrf	(??_driveForDistance+0)+0
  4912  04C9  0835               	movf	(driveForDistance@low),w	;volatile
  4913  04CA  072E               	addwf	0+(??_driveForDistance+0)+0,w
  4914  04CB  00B0               	movwf	(driveForDistance@deltaDistance)
  4915  04CC  3000               	movlw	0
  4916  04CD  1803               	skipnc
  4917  04CE  3001               	movlw	1
  4918  04CF  072F               	addwf	1+(??_driveForDistance+0)+0,w
  4919  04D0  00B1               	movwf	1+(driveForDistance@deltaDistance)
  4920                           	line	166
  4921                           	
  4922  04D1                     l11073:	
  4923                           ;drive.c: 166: distance += deltaDistance;
  4924  04D1  0830               	movf	(driveForDistance@deltaDistance),w
  4925  04D2  07B2               	addwf	(driveForDistance@distance),f
  4926  04D3  1803               	skipnc
  4927  04D4  0AB3               	incf	(driveForDistance@distance+1),f
  4928  04D5  0831               	movf	(driveForDistance@deltaDistance+1),w
  4929  04D6  07B3               	addwf	(driveForDistance@distance+1),f
  4930                           	line	167
  4931                           	
  4932  04D7                     l11075:	
  4933                           ;drive.c: 167: if(distance >= moveDistance)
  4934  04D7  0833               	movf	(driveForDistance@distance+1),w
  4935  04D8  3A80               	xorlw	80h
  4936  04D9  00AE               	movwf	(??_driveForDistance+0)+0
  4937  04DA  082D               	movf	(driveForDistance@moveDistance+1),w
  4938  04DB  3A80               	xorlw	80h
  4939  04DC  022E               	subwf	(??_driveForDistance+0)+0,w
  4940  04DD  1D03               	skipz
  4941  04DE  2CE1               	goto	u4355
  4942  04DF  082C               	movf	(driveForDistance@moveDistance),w
  4943  04E0  0232               	subwf	(driveForDistance@distance),w
  4944  04E1                     u4355:
  4945                           
  4946  04E1  1C03               	skipc
  4947  04E2  2CE4               	goto	u4351
  4948  04E3  2CE5               	goto	u4350
  4949  04E4                     u4351:
  4950  04E4  2CFA               	goto	l11085
  4951  04E5                     u4350:
  4952                           	line	169
  4953                           	
  4954  04E5                     l11077:	
  4955                           ;drive.c: 168: {
  4956                           ;drive.c: 169: drive(0, 0, 0, 0);
  4957  04E5  1283               	bcf	status, 5	;RP0=0, select bank0
  4958  04E6  1303               	bcf	status, 6	;RP1=0, select bank0
  4959  04E7  01A2               	clrf	(?_drive)
  4960  04E8  01A3               	clrf	0+(?_drive)+01h
  4961  04E9  01A4               	clrf	0+(?_drive)+02h
  4962  04EA  3000               	movlw	(0)
  4963  04EB  120A  158A  2130   	fcall	_drive
              120A  118A         
  4964                           	line	170
  4965                           	
  4966  04F0                     l11079:	
  4967                           ;drive.c: 170: successfulDrive = 1;
  4968  04F0  15F1               	bsf	(_successfulDrive/8),(_successfulDrive)&7
  4969                           	line	171
  4970                           	
  4971  04F1                     l11081:	
  4972                           ;drive.c: 171: moving = 0;
  4973  04F1  1071               	bcf	(_moving/8),(_moving)&7
  4974                           	line	172
  4975                           	
  4976  04F2                     l11083:	
  4977                           ;drive.c: 172: somethingInTheWay = BACKWARD;
  4978  04F2  3002               	movlw	(02h)
  4979  04F3  1283               	bcf	status, 5	;RP0=0, select bank0
  4980  04F4  1303               	bcf	status, 6	;RP1=0, select bank0
  4981  04F5  00AE               	movwf	(??_driveForDistance+0)+0
  4982  04F6  082E               	movf	(??_driveForDistance+0)+0,w
  4983  04F7  00DF               	movwf	(_somethingInTheWay)	;volatile
  4984  04F8  2CFA               	goto	l11085
  4985                           	line	173
  4986                           	
  4987  04F9                     l5831:	
  4988  04F9  2CFA               	goto	l11085
  4989                           	line	174
  4990                           	
  4991  04FA                     l5821:	
  4992                           	line	42
  4993                           	
  4994  04FA                     l11085:	
  4995  04FA  1871               	btfsc	(_moving/8),(_moving)&7
  4996  04FB  2CFD               	goto	u4361
  4997  04FC  2CFE               	goto	u4360
  4998  04FD                     u4361:
  4999  04FD  2BCE               	goto	l11025
  5000  04FE                     u4360:
  5001  04FE  2CFF               	goto	l5833
  5002                           	
  5003  04FF                     l5832:	
  5004                           	line	175
  5005                           	
  5006  04FF                     l5833:	
  5007  04FF  0008               	return
  5008                           	opt stack 0
  5009                           GLOBAL	__end_of_driveForDistance
  5010  0500                     	__end_of_driveForDistance:
  5011 ;; =============== function _driveForDistance ends ============
  5012                           
  5013                           	signat	_driveForDistance,4216
  5014                           	global	_updateLocation
  5015                           psect	text1247,local,class=CODE,delta=2
  5016                           global __ptext1247
  5017  0E23                     __ptext1247:
  5018                           
  5019 ;; *************** function _updateLocation *****************
  5020 ;; Defined at:
  5021 ;;		line 258 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;		None
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;		None
  5026 ;; Return value:  Size  Location     Type
  5027 ;;		None               void
  5028 ;; Registers used:
  5029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5035 ;;      Params:         0       0       0       0       0
  5036 ;;      Locals:         0       0       0       0       0
  5037 ;;      Temps:          0       1       0       0       0
  5038 ;;      Totals:         0       1       0       0       0
  5039 ;;Total ram usage:        1 bytes
  5040 ;; Hardware stack levels used:    1
  5041 ;; Hardware stack levels required when called:    3
  5042 ;; This function calls:
  5043 ;;		_lcd_set_cursor
  5044 ;;		_lcd_write_data
  5045 ;;		_getOrientation
  5046 ;;		_lcd_write_1_digit_bcd
  5047 ;; This function is called by:
  5048 ;;		_main
  5049 ;; This function uses a non-reentrant model
  5050 ;;
  5051                           psect	text1247
  5052                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  5053                           	line	258
  5054                           	global	__size_of_updateLocation
  5055  0068                     	__size_of_updateLocation	equ	__end_of_updateLocation-_updateLocation
  5056                           	
  5057  0E23                     _updateLocation:	
  5058                           	opt	stack 4
  5059                           ; Regs used in _updateLocation: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5060                           	line	259
  5061                           	
  5062  0E23                     l10993:	
  5063                           ;main.c: 259: lcd_set_cursor(0x40);
  5064  0E23  3040               	movlw	(040h)
  5065  0E24  160A  118A  2587   	fcall	_lcd_set_cursor
              120A  158A         
  5066                           	line	260
  5067                           ;main.c: 260: switch(getOrientation())
  5068  0E29  2E5C               	goto	l11013
  5069                           	line	262
  5070                           ;main.c: 261: {
  5071                           ;main.c: 262: case NORTH:
  5072                           	
  5073  0E2A                     l6746:	
  5074                           	line	263
  5075                           	
  5076  0E2A                     l10995:	
  5077                           ;main.c: 263: ++yCoord;
  5078  0E2A  3001               	movlw	(01h)
  5079  0E2B  1283               	bcf	status, 5	;RP0=0, select bank0
  5080  0E2C  1303               	bcf	status, 6	;RP1=0, select bank0
  5081  0E2D  00A4               	movwf	(??_updateLocation+0)+0
  5082  0E2E  0824               	movf	(??_updateLocation+0)+0,w
  5083  0E2F  07E1               	addwf	(_yCoord),f	;volatile
  5084                           	line	264
  5085                           	
  5086  0E30                     l10997:	
  5087                           ;main.c: 264: lcd_write_data('N');
  5088  0E30  304E               	movlw	(04Eh)
  5089  0E31  160A  118A  25D1   	fcall	_lcd_write_data
              120A  158A         
  5090                           	line	265
  5091                           ;main.c: 265: break;
  5092  0E36  2E6E               	goto	l11015
  5093                           	line	266
  5094                           ;main.c: 266: case SOUTH:
  5095                           	
  5096  0E37                     l6748:	
  5097                           	line	267
  5098                           	
  5099  0E37                     l10999:	
  5100                           ;main.c: 267: --yCoord;
  5101  0E37  3001               	movlw	low(01h)
  5102  0E38  1283               	bcf	status, 5	;RP0=0, select bank0
  5103  0E39  1303               	bcf	status, 6	;RP1=0, select bank0
  5104  0E3A  02E1               	subwf	(_yCoord),f	;volatile
  5105                           	line	268
  5106                           	
  5107  0E3B                     l11001:	
  5108                           ;main.c: 268: lcd_write_data('S');
  5109  0E3B  3053               	movlw	(053h)
  5110  0E3C  160A  118A  25D1   	fcall	_lcd_write_data
              120A  158A         
  5111                           	line	269
  5112                           ;main.c: 269: break;
  5113  0E41  2E6E               	goto	l11015
  5114                           	line	270
  5115                           ;main.c: 270: case EAST:
  5116                           	
  5117  0E42                     l6749:	
  5118                           	line	271
  5119                           	
  5120  0E42                     l11003:	
  5121                           ;main.c: 271: ++xCoord;
  5122  0E42  3001               	movlw	(01h)
  5123  0E43  1283               	bcf	status, 5	;RP0=0, select bank0
  5124  0E44  1303               	bcf	status, 6	;RP1=0, select bank0
  5125  0E45  00A4               	movwf	(??_updateLocation+0)+0
  5126  0E46  0824               	movf	(??_updateLocation+0)+0,w
  5127  0E47  07E0               	addwf	(_xCoord),f	;volatile
  5128                           	line	272
  5129                           	
  5130  0E48                     l11005:	
  5131                           ;main.c: 272: lcd_write_data('E');
  5132  0E48  3045               	movlw	(045h)
  5133  0E49  160A  118A  25D1   	fcall	_lcd_write_data
              120A  158A         
  5134                           	line	273
  5135                           ;main.c: 273: break;
  5136  0E4E  2E6E               	goto	l11015
  5137                           	line	274
  5138                           ;main.c: 274: case WEST:
  5139                           	
  5140  0E4F                     l6750:	
  5141                           	line	275
  5142                           	
  5143  0E4F                     l11007:	
  5144                           ;main.c: 275: --xCoord;
  5145  0E4F  3001               	movlw	low(01h)
  5146  0E50  1283               	bcf	status, 5	;RP0=0, select bank0
  5147  0E51  1303               	bcf	status, 6	;RP1=0, select bank0
  5148  0E52  02E0               	subwf	(_xCoord),f	;volatile
  5149                           	line	276
  5150                           	
  5151  0E53                     l11009:	
  5152                           ;main.c: 276: lcd_write_data('W');
  5153  0E53  3057               	movlw	(057h)
  5154  0E54  160A  118A  25D1   	fcall	_lcd_write_data
              120A  158A         
  5155                           	line	277
  5156                           ;main.c: 277: break;
  5157  0E59  2E6E               	goto	l11015
  5158                           	line	278
  5159                           ;main.c: 278: default:
  5160                           	
  5161  0E5A                     l6751:	
  5162                           	line	279
  5163                           ;main.c: 279: break;
  5164  0E5A  2E6E               	goto	l11015
  5165                           	line	280
  5166                           	
  5167  0E5B                     l11011:	
  5168                           ;main.c: 280: }
  5169  0E5B  2E6E               	goto	l11015
  5170                           	line	260
  5171                           	
  5172  0E5C                     l6745:	
  5173                           	
  5174  0E5C                     l11013:	
  5175  0E5C  160A  118A  2563   	fcall	_getOrientation
              120A  158A         
  5176                           	; Switch size 1, requested type "space"
  5177                           ; Number of cases is 4, Range of values is 0 to 3
  5178                           ; switch strategies available:
  5179                           ; Name         Instructions Cycles
  5180                           ; simple_byte           13     7 (average)
  5181                           ; direct_byte           20     8 (fixed)
  5182                           ; jumptable            260     6 (fixed)
  5183                           ; rangetable             8     6 (fixed)
  5184                           ; spacedrange           14     9 (fixed)
  5185                           ; locatedrange           4     3 (fixed)
  5186                           ;	Chosen strategy is simple_byte
  5187                           
  5188                           	opt asmopt_off
  5189  0E61  3A00               	xorlw	0^0	; case 0
  5190  0E62  1903               	skipnz
  5191  0E63  2E4F               	goto	l11007
  5192  0E64  3A01               	xorlw	1^0	; case 1
  5193  0E65  1903               	skipnz
  5194  0E66  2E37               	goto	l10999
  5195  0E67  3A03               	xorlw	2^1	; case 2
  5196  0E68  1903               	skipnz
  5197  0E69  2E42               	goto	l11003
  5198  0E6A  3A01               	xorlw	3^2	; case 3
  5199  0E6B  1903               	skipnz
  5200  0E6C  2E2A               	goto	l10995
  5201  0E6D  2E6E               	goto	l11015
  5202                           	opt asmopt_on
  5203                           
  5204                           	line	280
  5205                           	
  5206  0E6E                     l6747:	
  5207                           	line	282
  5208                           	
  5209  0E6E                     l11015:	
  5210                           ;main.c: 282: lcd_set_cursor(0x01);
  5211  0E6E  3001               	movlw	(01h)
  5212  0E6F  160A  118A  2587   	fcall	_lcd_set_cursor
              120A  158A         
  5213                           	line	283
  5214                           ;main.c: 283: lcd_write_1_digit_bcd(xCoord);
  5215  0E74  1283               	bcf	status, 5	;RP0=0, select bank0
  5216  0E75  1303               	bcf	status, 6	;RP1=0, select bank0
  5217  0E76  0860               	movf	(_xCoord),w	;volatile
  5218  0E77  120A  118A  27F4   	fcall	_lcd_write_1_digit_bcd
              120A  158A         
  5219                           	line	284
  5220                           ;main.c: 284: lcd_set_cursor(0x03);
  5221  0E7C  3003               	movlw	(03h)
  5222  0E7D  160A  118A  2587   	fcall	_lcd_set_cursor
              120A  158A         
  5223                           	line	285
  5224                           ;main.c: 285: lcd_write_1_digit_bcd(yCoord);
  5225  0E82  1283               	bcf	status, 5	;RP0=0, select bank0
  5226  0E83  1303               	bcf	status, 6	;RP1=0, select bank0
  5227  0E84  0861               	movf	(_yCoord),w	;volatile
  5228  0E85  120A  118A  27F4   	fcall	_lcd_write_1_digit_bcd
              120A  158A         
  5229                           	line	286
  5230                           	
  5231  0E8A                     l6752:	
  5232  0E8A  0008               	return
  5233                           	opt stack 0
  5234                           GLOBAL	__end_of_updateLocation
  5235  0E8B                     	__end_of_updateLocation:
  5236 ;; =============== function _updateLocation ends ============
  5237                           
  5238                           	signat	_updateLocation,88
  5239                           	global	_lookForVictim
  5240                           psect	text1248,local,class=CODE,delta=2
  5241                           global __ptext1248
  5242  0DC5                     __ptext1248:
  5243                           
  5244 ;; *************** function _lookForVictim *****************
  5245 ;; Defined at:
  5246 ;;		line 150 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;		None
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;  victim          1    6[BANK0 ] unsigned char 
  5251 ;; Return value:  Size  Location     Type
  5252 ;;		None               void
  5253 ;; Registers used:
  5254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5260 ;;      Params:         0       0       0       0       0
  5261 ;;      Locals:         0       1       0       0       0
  5262 ;;      Temps:          0       2       0       0       0
  5263 ;;      Totals:         0       3       0       0       0
  5264 ;;Total ram usage:        3 bytes
  5265 ;; Hardware stack levels used:    1
  5266 ;; Hardware stack levels required when called:    3
  5267 ;; This function calls:
  5268 ;;		_ser_putch
  5269 ;;		_ser_getch
  5270 ;;		_play_iCreate_song
  5271 ;;		_lcd_set_cursor
  5272 ;;		_lcd_write_data
  5273 ;;		_getVictimZone
  5274 ;;		_lcd_write_1_digit_bcd
  5275 ;; This function is called by:
  5276 ;;		_main
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           psect	text1248
  5280                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  5281                           	line	150
  5282                           	global	__size_of_lookForVictim
  5283  005E                     	__size_of_lookForVictim	equ	__end_of_lookForVictim-_lookForVictim
  5284                           	
  5285  0DC5                     _lookForVictim:	
  5286                           	opt	stack 4
  5287                           ; Regs used in _lookForVictim: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5288                           	line	151
  5289                           	
  5290  0DC5                     l10971:	
  5291                           ;main.c: 151: ser_putch(142);
  5292  0DC5  308E               	movlw	(08Eh)
  5293  0DC6  160A  118A  26AE   	fcall	_ser_putch
              120A  158A         
  5294                           	line	152
  5295                           ;main.c: 152: ser_putch(17);
  5296  0DCB  3011               	movlw	(011h)
  5297  0DCC  160A  118A  26AE   	fcall	_ser_putch
              120A  158A         
  5298                           	line	153
  5299                           ;main.c: 153: char victim = ser_getch();
  5300  0DD1  160A  118A  26CF   	fcall	_ser_getch
              120A  158A         
  5301  0DD6  1283               	bcf	status, 5	;RP0=0, select bank0
  5302  0DD7  1303               	bcf	status, 6	;RP1=0, select bank0
  5303  0DD8  00A4               	movwf	(??_lookForVictim+0)+0
  5304  0DD9  0824               	movf	(??_lookForVictim+0)+0,w
  5305  0DDA  00A6               	movwf	(lookForVictim@victim)
  5306                           	line	155
  5307                           	
  5308  0DDB                     l10973:	
  5309                           ;main.c: 155: if(victim > 241 && victim != 255)
  5310  0DDB  30F2               	movlw	(0F2h)
  5311  0DDC  0226               	subwf	(lookForVictim@victim),w
  5312  0DDD  1C03               	skipc
  5313  0DDE  2DE0               	goto	u4261
  5314  0DDF  2DE1               	goto	u4260
  5315  0DE0                     u4261:
  5316  0DE0  2E22               	goto	l6724
  5317  0DE1                     u4260:
  5318                           	
  5319  0DE1                     l10975:	
  5320  0DE1  0826               	movf	(lookForVictim@victim),w
  5321  0DE2  3AFF               	xorlw	0FFh
  5322  0DE3  1903               	skipnz
  5323  0DE4  2DE6               	goto	u4271
  5324  0DE5  2DE7               	goto	u4270
  5325  0DE6                     u4271:
  5326  0DE6  2E22               	goto	l6724
  5327  0DE7                     u4270:
  5328                           	line	157
  5329                           	
  5330  0DE7                     l10977:	
  5331                           ;main.c: 156: {
  5332                           ;main.c: 157: if(goingHome)
  5333  0DE7  1EF0               	btfss	(_goingHome/8),(_goingHome)&7
  5334  0DE8  2DEA               	goto	u4281
  5335  0DE9  2DEB               	goto	u4280
  5336  0DEA                     u4281:
  5337  0DEA  2E01               	goto	l10987
  5338  0DEB                     u4280:
  5339                           	line	159
  5340                           	
  5341  0DEB                     l10979:	
  5342                           ;main.c: 158: {
  5343                           ;main.c: 159: play_iCreate_song(3);
  5344  0DEB  3003               	movlw	(03h)
  5345  0DEC  160A  118A  25BF   	fcall	_play_iCreate_song
              120A  158A         
  5346                           	line	160
  5347                           	
  5348  0DF1                     l10981:	
  5349                           ;main.c: 160: victimZone = 0;
  5350  0DF1  1283               	bcf	status, 5	;RP0=0, select bank0
  5351  0DF2  1303               	bcf	status, 6	;RP1=0, select bank0
  5352  0DF3  01DB               	clrf	(_victimZone)	;volatile
  5353                           	line	161
  5354                           	
  5355  0DF4                     l10983:	
  5356                           ;main.c: 161: lcd_set_cursor(0x09);
  5357  0DF4  3009               	movlw	(09h)
  5358  0DF5  160A  118A  2587   	fcall	_lcd_set_cursor
              120A  158A         
  5359                           	line	162
  5360                           	
  5361  0DFA                     l10985:	
  5362                           ;main.c: 162: lcd_write_data('V');
  5363  0DFA  3056               	movlw	(056h)
  5364  0DFB  160A  118A  25D1   	fcall	_lcd_write_data
              120A  158A         
  5365                           	line	163
  5366                           ;main.c: 163: }
  5367  0E00  2E22               	goto	l6724
  5368                           	line	164
  5369                           	
  5370  0E01                     l6722:	
  5371                           	line	166
  5372                           	
  5373  0E01                     l10987:	
  5374                           ;main.c: 164: else
  5375                           ;main.c: 165: {
  5376                           ;main.c: 166: victimZone = getVictimZone(xCoord, yCoord);
  5377  0E01  1283               	bcf	status, 5	;RP0=0, select bank0
  5378  0E02  1303               	bcf	status, 6	;RP1=0, select bank0
  5379  0E03  0861               	movf	(_yCoord),w	;volatile
  5380  0E04  00A4               	movwf	(??_lookForVictim+0)+0
  5381  0E05  0824               	movf	(??_lookForVictim+0)+0,w
  5382  0E06  00A0               	movwf	(?_getVictimZone)
  5383  0E07  0860               	movf	(_xCoord),w	;volatile
  5384  0E08  120A  158A  2701   	fcall	_getVictimZone
              120A  158A         
  5385  0E0D  1283               	bcf	status, 5	;RP0=0, select bank0
  5386  0E0E  1303               	bcf	status, 6	;RP1=0, select bank0
  5387  0E0F  00A5               	movwf	(??_lookForVictim+1)+0
  5388  0E10  0825               	movf	(??_lookForVictim+1)+0,w
  5389  0E11  00DB               	movwf	(_victimZone)	;volatile
  5390                           	line	167
  5391                           	
  5392  0E12                     l10989:	
  5393                           ;main.c: 167: lcd_set_cursor(0x08);
  5394  0E12  3008               	movlw	(08h)
  5395  0E13  160A  118A  2587   	fcall	_lcd_set_cursor
              120A  158A         
  5396                           	line	168
  5397                           	
  5398  0E18                     l10991:	
  5399                           ;main.c: 168: lcd_write_1_digit_bcd(victimZone);
  5400  0E18  1283               	bcf	status, 5	;RP0=0, select bank0
  5401  0E19  1303               	bcf	status, 6	;RP1=0, select bank0
  5402  0E1A  085B               	movf	(_victimZone),w	;volatile
  5403  0E1B  120A  118A  27F4   	fcall	_lcd_write_1_digit_bcd
              120A  158A         
  5404  0E20  2E22               	goto	l6724
  5405                           	line	169
  5406                           	
  5407  0E21                     l6723:	
  5408  0E21  2E22               	goto	l6724
  5409                           	line	170
  5410                           	
  5411  0E22                     l6721:	
  5412                           	line	171
  5413                           	
  5414  0E22                     l6724:	
  5415  0E22  0008               	return
  5416                           	opt stack 0
  5417                           GLOBAL	__end_of_lookForVictim
  5418  0E23                     	__end_of_lookForVictim:
  5419 ;; =============== function _lookForVictim ends ============
  5420                           
  5421                           	signat	_lookForVictim,88
  5422                           	global	_checkForFinalDestination
  5423                           psect	text1249,local,class=CODE,delta=2
  5424                           global __ptext1249
  5425  089F                     __ptext1249:
  5426                           
  5427 ;; *************** function _checkForFinalDestination *****************
  5428 ;; Defined at:
  5429 ;;		line 139 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  5430 ;; Parameters:    Size  Location     Type
  5431 ;;		None
  5432 ;; Auto vars:     Size  Location     Type
  5433 ;;		None
  5434 ;; Return value:  Size  Location     Type
  5435 ;;		None               void
  5436 ;; Registers used:
  5437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5438 ;; Tracked objects:
  5439 ;;		On entry : 0/0
  5440 ;;		On exit  : 0/0
  5441 ;;		Unchanged: 0/0
  5442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5443 ;;      Params:         0       0       0       0       0
  5444 ;;      Locals:         0       0       0       0       0
  5445 ;;      Temps:          0       0       0       0       0
  5446 ;;      Totals:         0       0       0       0       0
  5447 ;;Total ram usage:        0 bytes
  5448 ;; Hardware stack levels used:    1
  5449 ;; Hardware stack levels required when called:    3
  5450 ;; This function calls:
  5451 ;;		_getFinalX
  5452 ;;		_getFinalY
  5453 ;;		_play_iCreate_song
  5454 ;;		_lcd_set_cursor
  5455 ;;		_lcd_write_data
  5456 ;; This function is called by:
  5457 ;;		_main
  5458 ;; This function uses a non-reentrant model
  5459 ;;
  5460                           psect	text1249
  5461                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  5462                           	line	139
  5463                           	global	__size_of_checkForFinalDestination
  5464  002D                     	__size_of_checkForFinalDestination	equ	__end_of_checkForFinalDestination-_checkForFinal
                                 Destination
  5465                           	
  5466  089F                     _checkForFinalDestination:	
  5467                           	opt	stack 4
  5468                           ; Regs used in _checkForFinalDestination: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5469                           	line	140
  5470                           	
  5471  089F                     l10959:	
  5472                           ;main.c: 140: if((xCoord == getFinalX()) && (yCoord == getFinalY()))
  5473  089F  160A  118A  254F   	fcall	_getFinalX
              120A  158A         
  5474  08A4  1283               	bcf	status, 5	;RP0=0, select bank0
  5475  08A5  1303               	bcf	status, 6	;RP1=0, select bank0
  5476  08A6  0660               	xorwf	(_xCoord),w	;volatile
  5477  08A7  1D03               	skipz
  5478  08A8  28AA               	goto	u4241
  5479  08A9  28AB               	goto	u4240
  5480  08AA                     u4241:
  5481  08AA  28CB               	goto	l6718
  5482  08AB                     u4240:
  5483                           	
  5484  08AB                     l10961:	
  5485  08AB  160A  118A  2554   	fcall	_getFinalY
              120A  158A         
  5486  08B0  1283               	bcf	status, 5	;RP0=0, select bank0
  5487  08B1  1303               	bcf	status, 6	;RP1=0, select bank0
  5488  08B2  0661               	xorwf	(_yCoord),w	;volatile
  5489  08B3  1D03               	skipz
  5490  08B4  28B6               	goto	u4251
  5491  08B5  28B7               	goto	u4250
  5492  08B6                     u4251:
  5493  08B6  28CB               	goto	l6718
  5494  08B7                     u4250:
  5495                           	line	142
  5496                           	
  5497  08B7                     l10963:	
  5498                           ;main.c: 141: {
  5499                           ;main.c: 142: play_iCreate_song(2);
  5500  08B7  3002               	movlw	(02h)
  5501  08B8  160A  118A  25BF   	fcall	_play_iCreate_song
              120A  158A         
  5502                           	line	143
  5503                           	
  5504  08BD                     l10965:	
  5505                           ;main.c: 143: goingHome = 1;
  5506  08BD  16F0               	bsf	(_goingHome/8),(_goingHome)&7
  5507                           	line	144
  5508                           	
  5509  08BE                     l10967:	
  5510                           ;main.c: 144: lcd_set_cursor(0x06);
  5511  08BE  3006               	movlw	(06h)
  5512  08BF  160A  118A  2587   	fcall	_lcd_set_cursor
              120A  158A         
  5513                           	line	145
  5514                           	
  5515  08C4                     l10969:	
  5516                           ;main.c: 145: lcd_write_data('R');
  5517  08C4  3052               	movlw	(052h)
  5518  08C5  160A  118A  25D1   	fcall	_lcd_write_data
              120A  158A         
  5519  08CA  28CB               	goto	l6718
  5520                           	line	146
  5521                           	
  5522  08CB                     l6717:	
  5523                           	line	147
  5524                           	
  5525  08CB                     l6718:	
  5526  08CB  0008               	return
  5527                           	opt stack 0
  5528                           GLOBAL	__end_of_checkForFinalDestination
  5529  08CC                     	__end_of_checkForFinalDestination:
  5530 ;; =============== function _checkForFinalDestination ends ============
  5531                           
  5532                           	signat	_checkForFinalDestination,88
  5533                           	global	_init
  5534                           psect	text1250,local,class=CODE,delta=2
  5535                           global __ptext1250
  5536  08FA                     __ptext1250:
  5537                           
  5538 ;; *************** function _init *****************
  5539 ;; Defined at:
  5540 ;;		line 102 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;		None
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;		None
  5545 ;; Return value:  Size  Location     Type
  5546 ;;		None               void
  5547 ;; Registers used:
  5548 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5554 ;;      Params:         0       0       0       0       0
  5555 ;;      Locals:         0       0       0       0       0
  5556 ;;      Temps:          0       0       0       0       0
  5557 ;;      Totals:         0       0       0       0       0
  5558 ;;Total ram usage:        0 bytes
  5559 ;; Hardware stack levels used:    1
  5560 ;; Hardware stack levels required when called:    4
  5561 ;; This function calls:
  5562 ;;		_init_adc
  5563 ;;		_lcd_init
  5564 ;;		_ser_init
  5565 ;;		_initIRobot
  5566 ;;		_initSongs
  5567 ;; This function is called by:
  5568 ;;		_main
  5569 ;; This function uses a non-reentrant model
  5570 ;;
  5571                           psect	text1250
  5572                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  5573                           	line	102
  5574                           	global	__size_of_init
  5575  0036                     	__size_of_init	equ	__end_of_init-_init
  5576                           	
  5577  08FA                     _init:	
  5578                           	opt	stack 3
  5579                           ; Regs used in _init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5580                           	line	103
  5581                           	
  5582  08FA                     l10927:	
  5583                           ;main.c: 103: start.pressed = 0;
  5584  08FA  1283               	bcf	status, 5	;RP0=0, select bank0
  5585  08FB  1303               	bcf	status, 6	;RP1=0, select bank0
  5586  08FC  01C9               	clrf	(_start)
  5587                           	line	104
  5588                           	
  5589  08FD                     l10929:	
  5590                           ;main.c: 104: start.released = 1;
  5591  08FD  01CA               	clrf	0+(_start)+01h
  5592  08FE  1403               	bsf	status,0
  5593  08FF  0DCA               	rlf	0+(_start)+01h,f
  5594                           	line	106
  5595                           	
  5596  0900                     l10931:	
  5597                           ;main.c: 106: init_adc();
  5598  0900  160A  118A  260B   	fcall	_init_adc
              120A  158A         
  5599                           	line	107
  5600                           	
  5601  0905                     l10933:	
  5602                           ;main.c: 107: lcd_init();
  5603  0905  120A  158A  2048   	fcall	_lcd_init
              120A  158A         
  5604                           	line	109
  5605                           	
  5606  090A                     l10935:	
  5607                           ;main.c: 109: TRISB = 0b00000011;
  5608  090A  3003               	movlw	(03h)
  5609  090B  1683               	bsf	status, 5	;RP0=1, select bank1
  5610  090C  1303               	bcf	status, 6	;RP1=0, select bank1
  5611  090D  0086               	movwf	(134)^080h	;volatile
  5612                           	line	112
  5613                           	
  5614  090E                     l10937:	
  5615                           ;main.c: 112: OPTION_REG = 0b00000100;
  5616  090E  3004               	movlw	(04h)
  5617  090F  0081               	movwf	(129)^080h	;volatile
  5618                           	line	114
  5619                           	
  5620  0910                     l10939:	
  5621                           ;main.c: 114: TMR0IE = 1;
  5622  0910  168B               	bsf	(93/8),(93)&7
  5623                           	line	115
  5624                           	
  5625  0911                     l10941:	
  5626                           ;main.c: 115: SSPSTAT = 0b01000000;
  5627  0911  3040               	movlw	(040h)
  5628  0912  0094               	movwf	(148)^080h	;volatile
  5629                           	line	116
  5630                           	
  5631  0913                     l10943:	
  5632                           ;main.c: 116: SSPCON = 0b00100010;
  5633  0913  3022               	movlw	(022h)
  5634  0914  1283               	bcf	status, 5	;RP0=0, select bank0
  5635  0915  1303               	bcf	status, 6	;RP1=0, select bank0
  5636  0916  0094               	movwf	(20)	;volatile
  5637                           	line	117
  5638                           	
  5639  0917                     l10945:	
  5640                           ;main.c: 117: TRISC = 0b10010000;
  5641  0917  3090               	movlw	(090h)
  5642  0918  1683               	bsf	status, 5	;RP0=1, select bank1
  5643  0919  1303               	bcf	status, 6	;RP1=0, select bank1
  5644  091A  0087               	movwf	(135)^080h	;volatile
  5645                           	line	118
  5646                           	
  5647  091B                     l10947:	
  5648                           ;main.c: 118: PORTC = 0b00000000;
  5649  091B  1283               	bcf	status, 5	;RP0=0, select bank0
  5650  091C  1303               	bcf	status, 6	;RP1=0, select bank0
  5651  091D  0187               	clrf	(7)	;volatile
  5652                           	line	121
  5653                           	
  5654  091E                     l10949:	
  5655                           ;main.c: 121: PEIE = 1;
  5656  091E  170B               	bsf	(94/8),(94)&7
  5657                           	line	122
  5658                           	
  5659  091F                     l10951:	
  5660                           ;main.c: 122: GIE = 1;
  5661  091F  178B               	bsf	(95/8),(95)&7
  5662                           	line	124
  5663                           	
  5664  0920                     l10953:	
  5665                           ;main.c: 124: ser_init();
  5666  0920  160A  118A  2786   	fcall	_ser_init
              120A  158A         
  5667                           	line	125
  5668                           	
  5669  0925                     l10955:	
  5670                           ;main.c: 125: initIRobot();
  5671  0925  160A  118A  2638   	fcall	_initIRobot
              120A  158A         
  5672                           	line	126
  5673                           	
  5674  092A                     l10957:	
  5675                           ;main.c: 126: initSongs();
  5676  092A  120A  158A  250E   	fcall	_initSongs
              120A  158A         
  5677                           	line	127
  5678                           	
  5679  092F                     l6711:	
  5680  092F  0008               	return
  5681                           	opt stack 0
  5682                           GLOBAL	__end_of_init
  5683  0930                     	__end_of_init:
  5684 ;; =============== function _init ends ============
  5685                           
  5686                           	signat	_init,88
  5687                           	global	_goReverse
  5688                           psect	text1251,local,class=CODE,delta=2
  5689                           global __ptext1251
  5690  0C20                     __ptext1251:
  5691                           
  5692 ;; *************** function _goReverse *****************
  5693 ;; Defined at:
  5694 ;;		line 240 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;		None
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;		None
  5699 ;; Return value:  Size  Location     Type
  5700 ;;		None               void
  5701 ;; Registers used:
  5702 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5703 ;; Tracked objects:
  5704 ;;		On entry : 0/0
  5705 ;;		On exit  : 0/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5708 ;;      Params:         0       0       0       0       0
  5709 ;;      Locals:         0       0       0       0       0
  5710 ;;      Temps:          0       3       0       0       0
  5711 ;;      Totals:         0       3       0       0       0
  5712 ;;Total ram usage:        3 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:    3
  5715 ;; This function calls:
  5716 ;;		_lcd_set_cursor
  5717 ;;		_lcd_write_data
  5718 ;;		_drive
  5719 ;;		_waitFor
  5720 ;; This function is called by:
  5721 ;;		_driveForDistance
  5722 ;; This function uses a non-reentrant model
  5723 ;;
  5724                           psect	text1251
  5725                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  5726                           	line	240
  5727                           	global	__size_of_goReverse
  5728  0047                     	__size_of_goReverse	equ	__end_of_goReverse-_goReverse
  5729                           	
  5730  0C20                     _goReverse:	
  5731                           	opt	stack 2
  5732                           ; Regs used in _goReverse: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5733                           	line	241
  5734                           	
  5735  0C20                     l10917:	
  5736                           ;drive.c: 241: lcd_set_cursor(0x0F);
  5737  0C20  300F               	movlw	(0Fh)
  5738  0C21  160A  118A  2587   	fcall	_lcd_set_cursor
              120A  158A         
  5739                           	line	242
  5740                           ;drive.c: 242: lcd_write_data('!');
  5741  0C26  3021               	movlw	(021h)
  5742  0C27  160A  118A  25D1   	fcall	_lcd_write_data
              120A  158A         
  5743                           	line	243
  5744                           	
  5745  0C2C                     l10919:	
  5746                           ;drive.c: 243: drive(255, 125, 128, 0);
  5747  0C2C  307D               	movlw	(07Dh)
  5748  0C2D  1283               	bcf	status, 5	;RP0=0, select bank0
  5749  0C2E  1303               	bcf	status, 6	;RP1=0, select bank0
  5750  0C2F  00A9               	movwf	(??_goReverse+0)+0
  5751  0C30  0829               	movf	(??_goReverse+0)+0,w
  5752  0C31  00A2               	movwf	(?_drive)
  5753  0C32  3080               	movlw	(080h)
  5754  0C33  00AA               	movwf	(??_goReverse+1)+0
  5755  0C34  082A               	movf	(??_goReverse+1)+0,w
  5756  0C35  00A3               	movwf	0+(?_drive)+01h
  5757  0C36  01A4               	clrf	0+(?_drive)+02h
  5758  0C37  30FF               	movlw	(0FFh)
  5759  0C38  120A  158A  2130   	fcall	_drive
              120A  158A         
  5760                           	line	244
  5761                           	
  5762  0C3D                     l10921:	
  5763                           ;drive.c: 244: waitFor(156,254,12);
  5764  0C3D  30FE               	movlw	(0FEh)
  5765  0C3E  1283               	bcf	status, 5	;RP0=0, select bank0
  5766  0C3F  1303               	bcf	status, 6	;RP1=0, select bank0
  5767  0C40  00A9               	movwf	(??_goReverse+0)+0
  5768  0C41  0829               	movf	(??_goReverse+0)+0,w
  5769  0C42  00A2               	movwf	(?_waitFor)
  5770  0C43  300C               	movlw	(0Ch)
  5771  0C44  00AA               	movwf	(??_goReverse+1)+0
  5772  0C45  082A               	movf	(??_goReverse+1)+0,w
  5773  0C46  00A3               	movwf	0+(?_waitFor)+01h
  5774  0C47  309C               	movlw	(09Ch)
  5775  0C48  160A  118A  27AE   	fcall	_waitFor
              120A  158A         
  5776                           	line	245
  5777                           	
  5778  0C4D                     l10923:	
  5779                           ;drive.c: 245: drive(0, 0, 0, 0);
  5780  0C4D  1283               	bcf	status, 5	;RP0=0, select bank0
  5781  0C4E  1303               	bcf	status, 6	;RP1=0, select bank0
  5782  0C4F  01A2               	clrf	(?_drive)
  5783  0C50  01A3               	clrf	0+(?_drive)+01h
  5784  0C51  01A4               	clrf	0+(?_drive)+02h
  5785  0C52  3000               	movlw	(0)
  5786  0C53  120A  158A  2130   	fcall	_drive
              120A  158A         
  5787                           	line	246
  5788                           	
  5789  0C58                     l10925:	
  5790                           ;drive.c: 246: _delay((unsigned long)((2000)*(20000000/4000.0)));
  5791                           	opt asmopt_off
  5792  0C58  3033               movlw  51
  5793  0C59  1283               	bcf	status, 5	;RP0=0, select bank0
  5794  0C5A  1303               	bcf	status, 6	;RP1=0, select bank0
  5795  0C5B  00AB               movwf	((??_goReverse+0)+0+2),f
  5796  0C5C  30BC               movlw	188
  5797  0C5D  00AA               movwf	((??_goReverse+0)+0+1),f
  5798  0C5E  3010               	movlw	16
  5799  0C5F  00A9               movwf	((??_goReverse+0)+0),f
  5800  0C60                     u4857:
  5801  0C60  0BA9               	decfsz	((??_goReverse+0)+0),f
  5802  0C61  2C60               	goto	u4857
  5803  0C62  0BAA               	decfsz	((??_goReverse+0)+0+1),f
  5804  0C63  2C60               	goto	u4857
  5805  0C64  0BAB               	decfsz	((??_goReverse+0)+0+2),f
  5806  0C65  2C60               	goto	u4857
  5807                           opt asmopt_on
  5808                           
  5809                           	line	247
  5810                           	
  5811  0C66                     l5862:	
  5812  0C66  0008               	return
  5813                           	opt stack 0
  5814                           GLOBAL	__end_of_goReverse
  5815  0C67                     	__end_of_goReverse:
  5816 ;; =============== function _goReverse ends ============
  5817                           
  5818                           	signat	_goReverse,88
  5819                           	global	_readIR
  5820                           psect	text1252,local,class=CODE,delta=2
  5821                           global __ptext1252
  5822  16F1                     __ptext1252:
  5823                           
  5824 ;; *************** function _readIR *****************
  5825 ;; Defined at:
  5826 ;;		line 33 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\ir.c"
  5827 ;; Parameters:    Size  Location     Type
  5828 ;;		None
  5829 ;; Auto vars:     Size  Location     Type
  5830 ;;  cm              2   33[BANK0 ] int 
  5831 ;; Return value:  Size  Location     Type
  5832 ;;                  2   31[BANK0 ] int 
  5833 ;; Registers used:
  5834 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5835 ;; Tracked objects:
  5836 ;;		On entry : 0/0
  5837 ;;		On exit  : 0/0
  5838 ;;		Unchanged: 0/0
  5839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5840 ;;      Params:         0       2       0       0       0
  5841 ;;      Locals:         0       2       0       0       0
  5842 ;;      Temps:          0       0       0       0       0
  5843 ;;      Totals:         0       4       0       0       0
  5844 ;;Total ram usage:        4 bytes
  5845 ;; Hardware stack levels used:    1
  5846 ;; Hardware stack levels required when called:    4
  5847 ;; This function calls:
  5848 ;;		_adc_read_channel
  5849 ;;		_convert
  5850 ;; This function is called by:
  5851 ;;		_frontWallCorrect
  5852 ;;		_findWall
  5853 ;;		_wallFollow
  5854 ;;		_leftAngleCorrect
  5855 ;; This function uses a non-reentrant model
  5856 ;;
  5857                           psect	text1252
  5858                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\ir.c"
  5859                           	line	33
  5860                           	global	__size_of_readIR
  5861  0023                     	__size_of_readIR	equ	__end_of_readIR-_readIR
  5862                           	
  5863  16F1                     _readIR:	
  5864                           	opt	stack 2
  5865                           ; Regs used in _readIR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5866                           	line	34
  5867                           	
  5868  16F1                     l10911:	
  5869                           ;ir.c: 34: int cm = convert(adc_read_channel(0));
  5870  16F1  3000               	movlw	(0)
  5871  16F2  120A  158A  22CD   	fcall	_adc_read_channel
              160A  118A         
  5872  16F7  1283               	bcf	status, 5	;RP0=0, select bank0
  5873  16F8  1303               	bcf	status, 6	;RP1=0, select bank0
  5874  16F9  083C               	movf	(1+(?_adc_read_channel)),w
  5875  16FA  01B8               	clrf	(?_convert+1)
  5876  16FB  07B8               	addwf	(?_convert+1)
  5877  16FC  083B               	movf	(0+(?_adc_read_channel)),w
  5878  16FD  01B7               	clrf	(?_convert)
  5879  16FE  07B7               	addwf	(?_convert)
  5880                           
  5881  16FF  120A  118A  21E7   	fcall	_convert
              160A  118A         
  5882  1704  1283               	bcf	status, 5	;RP0=0, select bank0
  5883  1705  1303               	bcf	status, 6	;RP1=0, select bank0
  5884  1706  0838               	movf	(1+(?_convert)),w
  5885  1707  01C2               	clrf	(readIR@cm+1)
  5886  1708  07C2               	addwf	(readIR@cm+1)
  5887  1709  0837               	movf	(0+(?_convert)),w
  5888  170A  01C1               	clrf	(readIR@cm)
  5889  170B  07C1               	addwf	(readIR@cm)
  5890                           
  5891                           	line	35
  5892                           	
  5893  170C                     l10913:	
  5894                           ;ir.c: 35: return cm;
  5895  170C  0842               	movf	(readIR@cm+1),w
  5896  170D  01C0               	clrf	(?_readIR+1)
  5897  170E  07C0               	addwf	(?_readIR+1)
  5898  170F  0841               	movf	(readIR@cm),w
  5899  1710  01BF               	clrf	(?_readIR)
  5900  1711  07BF               	addwf	(?_readIR)
  5901                           
  5902  1712  2F13               	goto	l5083
  5903                           	
  5904  1713                     l10915:	
  5905                           	line	36
  5906                           	
  5907  1713                     l5083:	
  5908  1713  0008               	return
  5909                           	opt stack 0
  5910                           GLOBAL	__end_of_readIR
  5911  1714                     	__end_of_readIR:
  5912 ;; =============== function _readIR ends ============
  5913                           
  5914                           	signat	_readIR,90
  5915                           	global	_findFinalDestination
  5916                           psect	text1253,local,class=CODE,delta=2
  5917                           global __ptext1253
  5918  0500                     __ptext1253:
  5919                           
  5920 ;; *************** function _findFinalDestination *****************
  5921 ;; Defined at:
  5922 ;;		line 12 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\map.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;  virtualWallX    1    wreg     unsigned char 
  5925 ;;  virtualWallY    1    4[BANK0 ] unsigned char 
  5926 ;;  robotOrienta    1    5[BANK0 ] enum E1096
  5927 ;; Auto vars:     Size  Location     Type
  5928 ;;  virtualWallX    1    7[BANK0 ] unsigned char 
  5929 ;; Return value:  Size  Location     Type
  5930 ;;		None               void
  5931 ;; Registers used:
  5932 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5933 ;; Tracked objects:
  5934 ;;		On entry : 0/0
  5935 ;;		On exit  : 0/0
  5936 ;;		Unchanged: 0/0
  5937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5938 ;;      Params:         0       2       0       0       0
  5939 ;;      Locals:         0       1       0       0       0
  5940 ;;      Temps:          0       1       0       0       0
  5941 ;;      Totals:         0       4       0       0       0
  5942 ;;Total ram usage:        4 bytes
  5943 ;; Hardware stack levels used:    1
  5944 ;; Hardware stack levels required when called:    3
  5945 ;; This function calls:
  5946 ;;		_lcd_set_cursor
  5947 ;;		_lcd_write_1_digit_bcd
  5948 ;; This function is called by:
  5949 ;;		_driveForDistance
  5950 ;; This function uses a non-reentrant model
  5951 ;;
  5952                           psect	text1253
  5953                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\map.c"
  5954                           	line	12
  5955                           	global	__size_of_findFinalDestination
  5956  0105                     	__size_of_findFinalDestination	equ	__end_of_findFinalDestination-_findFinalDestination
  5957                           	
  5958  0500                     _findFinalDestination:	
  5959                           	opt	stack 2
  5960                           ; Regs used in _findFinalDestination: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5961                           ;findFinalDestination@virtualWallX stored from wreg
  5962  0500  1283               	bcf	status, 5	;RP0=0, select bank0
  5963  0501  1303               	bcf	status, 6	;RP1=0, select bank0
  5964  0502  00A7               	movwf	(findFinalDestination@virtualWallX)
  5965                           	line	13
  5966                           	
  5967  0503                     l10831:	
  5968                           ;map.c: 13: switch (virtualWallX)
  5969  0503  2DD7               	goto	l10907
  5970                           	line	15
  5971                           ;map.c: 14: {
  5972                           ;map.c: 15: case 0:
  5973                           	
  5974  0504                     l2849:	
  5975                           	line	16
  5976                           ;map.c: 16: switch (virtualWallY)
  5977  0504  2D18               	goto	l10841
  5978                           	line	20
  5979                           ;map.c: 17: {
  5980                           ;map.c: 20: case 1:
  5981                           	
  5982  0505                     l2851:	
  5983                           	line	21
  5984                           ;map.c: 21: finalX = 0;
  5985  0505  01DD               	clrf	(_finalX)
  5986                           	line	22
  5987                           	
  5988  0506                     l10833:	
  5989                           ;map.c: 22: finalY = 1;
  5990  0506  01DE               	clrf	(_finalY)
  5991  0507  1403               	bsf	status,0
  5992  0508  0DDE               	rlf	(_finalY),f
  5993                           	line	23
  5994                           ;map.c: 23: break;
  5995  0509  2DE8               	goto	l10909
  5996                           	line	24
  5997                           ;map.c: 24: case 2:
  5998                           	
  5999  050A                     l2853:	
  6000                           	line	25
  6001                           ;map.c: 25: finalX = 0;
  6002  050A  01DD               	clrf	(_finalX)
  6003                           	line	26
  6004                           	
  6005  050B                     l10835:	
  6006                           ;map.c: 26: finalY = 2;
  6007  050B  3002               	movlw	(02h)
  6008  050C  00A6               	movwf	(??_findFinalDestination+0)+0
  6009  050D  0826               	movf	(??_findFinalDestination+0)+0,w
  6010  050E  00DE               	movwf	(_finalY)
  6011                           	line	27
  6012                           ;map.c: 27: break;
  6013  050F  2DE8               	goto	l10909
  6014                           	line	28
  6015                           ;map.c: 28: case 3:
  6016                           	
  6017  0510                     l2854:	
  6018                           	line	29
  6019                           ;map.c: 29: finalX = 0;
  6020  0510  01DD               	clrf	(_finalX)
  6021                           	line	30
  6022                           	
  6023  0511                     l10837:	
  6024                           ;map.c: 30: finalY = 3;
  6025  0511  3003               	movlw	(03h)
  6026  0512  00A6               	movwf	(??_findFinalDestination+0)+0
  6027  0513  0826               	movf	(??_findFinalDestination+0)+0,w
  6028  0514  00DE               	movwf	(_finalY)
  6029                           	line	31
  6030                           ;map.c: 31: break;
  6031  0515  2DE8               	goto	l10909
  6032                           	line	32
  6033                           ;map.c: 32: default:
  6034                           	
  6035  0516                     l2855:	
  6036                           	line	33
  6037                           ;map.c: 33: break;
  6038  0516  2DE8               	goto	l10909
  6039                           	line	34
  6040                           	
  6041  0517                     l10839:	
  6042                           ;map.c: 34: }
  6043  0517  2DE8               	goto	l10909
  6044                           	line	16
  6045                           	
  6046  0518                     l2850:	
  6047                           	
  6048  0518                     l10841:	
  6049  0518  0824               	movf	(findFinalDestination@virtualWallY),w
  6050                           	; Switch size 1, requested type "space"
  6051                           ; Number of cases is 3, Range of values is 1 to 3
  6052                           ; switch strategies available:
  6053                           ; Name         Instructions Cycles
  6054                           ; simple_byte           10     6 (average)
  6055                           ; direct_byte           20    11 (fixed)
  6056                           ; jumptable            263     9 (fixed)
  6057                           ;	Chosen strategy is simple_byte
  6058                           
  6059                           	opt asmopt_off
  6060  0519  3A01               	xorlw	1^0	; case 1
  6061  051A  1903               	skipnz
  6062  051B  2D05               	goto	l2851
  6063  051C  3A03               	xorlw	2^1	; case 2
  6064  051D  1903               	skipnz
  6065  051E  2D0A               	goto	l2853
  6066  051F  3A01               	xorlw	3^2	; case 3
  6067  0520  1903               	skipnz
  6068  0521  2D10               	goto	l2854
  6069  0522  2DE8               	goto	l10909
  6070                           	opt asmopt_on
  6071                           
  6072                           	line	34
  6073                           	
  6074  0523                     l2852:	
  6075                           	line	35
  6076                           ;map.c: 35: break;
  6077  0523  2DE8               	goto	l10909
  6078                           	line	37
  6079                           ;map.c: 37: case 1:
  6080                           	
  6081  0524                     l2857:	
  6082                           	line	38
  6083                           ;map.c: 38: switch (virtualWallY)
  6084  0524  2D43               	goto	l10859
  6085                           	line	40
  6086                           ;map.c: 39: {
  6087                           ;map.c: 40: case 0:
  6088                           	
  6089  0525                     l2859:	
  6090                           	line	41
  6091                           	
  6092  0525                     l10843:	
  6093                           ;map.c: 41: finalX = 1;
  6094  0525  01DD               	clrf	(_finalX)
  6095  0526  1403               	bsf	status,0
  6096  0527  0DDD               	rlf	(_finalX),f
  6097                           	line	42
  6098                           	
  6099  0528                     l10845:	
  6100                           ;map.c: 42: finalY = 0;
  6101  0528  01DE               	clrf	(_finalY)
  6102                           	line	43
  6103                           ;map.c: 43: break;
  6104  0529  2DE8               	goto	l10909
  6105                           	line	44
  6106                           ;map.c: 44: case 1:
  6107                           	
  6108  052A                     l2861:	
  6109                           	line	45
  6110                           	
  6111  052A                     l10847:	
  6112                           ;map.c: 45: finalX = 1;
  6113  052A  01DD               	clrf	(_finalX)
  6114  052B  1403               	bsf	status,0
  6115  052C  0DDD               	rlf	(_finalX),f
  6116                           	line	46
  6117                           ;map.c: 46: finalY = 1;
  6118  052D  01DE               	clrf	(_finalY)
  6119  052E  1403               	bsf	status,0
  6120  052F  0DDE               	rlf	(_finalY),f
  6121                           	line	47
  6122                           ;map.c: 47: break;
  6123  0530  2DE8               	goto	l10909
  6124                           	line	48
  6125                           ;map.c: 48: case 2:
  6126                           	
  6127  0531                     l2862:	
  6128                           	line	49
  6129                           	
  6130  0531                     l10849:	
  6131                           ;map.c: 49: finalX = 1;
  6132  0531  01DD               	clrf	(_finalX)
  6133  0532  1403               	bsf	status,0
  6134  0533  0DDD               	rlf	(_finalX),f
  6135                           	line	50
  6136                           	
  6137  0534                     l10851:	
  6138                           ;map.c: 50: finalY = 2;
  6139  0534  3002               	movlw	(02h)
  6140  0535  00A6               	movwf	(??_findFinalDestination+0)+0
  6141  0536  0826               	movf	(??_findFinalDestination+0)+0,w
  6142  0537  00DE               	movwf	(_finalY)
  6143                           	line	51
  6144                           ;map.c: 51: break;
  6145  0538  2DE8               	goto	l10909
  6146                           	line	52
  6147                           ;map.c: 52: case 3:
  6148                           	
  6149  0539                     l2863:	
  6150                           	line	53
  6151                           	
  6152  0539                     l10853:	
  6153                           ;map.c: 53: finalX = 1;
  6154  0539  01DD               	clrf	(_finalX)
  6155  053A  1403               	bsf	status,0
  6156  053B  0DDD               	rlf	(_finalX),f
  6157                           	line	54
  6158                           	
  6159  053C                     l10855:	
  6160                           ;map.c: 54: finalY = 3;
  6161  053C  3003               	movlw	(03h)
  6162  053D  00A6               	movwf	(??_findFinalDestination+0)+0
  6163  053E  0826               	movf	(??_findFinalDestination+0)+0,w
  6164  053F  00DE               	movwf	(_finalY)
  6165                           	line	55
  6166                           ;map.c: 55: break;
  6167  0540  2DE8               	goto	l10909
  6168                           	line	56
  6169                           ;map.c: 56: default:
  6170                           	
  6171  0541                     l2864:	
  6172                           	line	57
  6173                           ;map.c: 57: break;
  6174  0541  2DE8               	goto	l10909
  6175                           	line	58
  6176                           	
  6177  0542                     l10857:	
  6178                           ;map.c: 58: }
  6179  0542  2DE8               	goto	l10909
  6180                           	line	38
  6181                           	
  6182  0543                     l2858:	
  6183                           	
  6184  0543                     l10859:	
  6185  0543  0824               	movf	(findFinalDestination@virtualWallY),w
  6186                           	; Switch size 1, requested type "space"
  6187                           ; Number of cases is 4, Range of values is 0 to 3
  6188                           ; switch strategies available:
  6189                           ; Name         Instructions Cycles
  6190                           ; simple_byte           13     7 (average)
  6191                           ; direct_byte           20     8 (fixed)
  6192                           ; jumptable            260     6 (fixed)
  6193                           ; rangetable             8     6 (fixed)
  6194                           ; spacedrange           14     9 (fixed)
  6195                           ; locatedrange           4     3 (fixed)
  6196                           ;	Chosen strategy is simple_byte
  6197                           
  6198                           	opt asmopt_off
  6199  0544  3A00               	xorlw	0^0	; case 0
  6200  0545  1903               	skipnz
  6201  0546  2D25               	goto	l10843
  6202  0547  3A01               	xorlw	1^0	; case 1
  6203  0548  1903               	skipnz
  6204  0549  2D2A               	goto	l10847
  6205  054A  3A03               	xorlw	2^1	; case 2
  6206  054B  1903               	skipnz
  6207  054C  2D31               	goto	l10849
  6208  054D  3A01               	xorlw	3^2	; case 3
  6209  054E  1903               	skipnz
  6210  054F  2D39               	goto	l10853
  6211  0550  2DE8               	goto	l10909
  6212                           	opt asmopt_on
  6213                           
  6214                           	line	58
  6215                           	
  6216  0551                     l2860:	
  6217                           	line	59
  6218                           ;map.c: 59: break;
  6219  0551  2DE8               	goto	l10909
  6220                           	line	61
  6221                           ;map.c: 61: case 2:
  6222                           	
  6223  0552                     l2865:	
  6224                           	line	62
  6225                           ;map.c: 62: switch (virtualWallY)
  6226  0552  2D7B               	goto	l10877
  6227                           	line	64
  6228                           ;map.c: 63: {
  6229                           ;map.c: 64: case 0:
  6230                           	
  6231  0553                     l2867:	
  6232                           	line	65
  6233                           	
  6234  0553                     l10861:	
  6235                           ;map.c: 65: if(robotOrientation == WEST)
  6236  0553  08A5               	movf	(findFinalDestination@robotOrientation),f
  6237  0554  1D03               	skipz
  6238  0555  2D57               	goto	u4211
  6239  0556  2D58               	goto	u4210
  6240  0557                     u4211:
  6241  0557  2DE8               	goto	l10909
  6242  0558                     u4210:
  6243                           	line	67
  6244                           	
  6245  0558                     l10863:	
  6246                           ;map.c: 66: {
  6247                           ;map.c: 67: finalX = 3;
  6248  0558  3003               	movlw	(03h)
  6249  0559  00A6               	movwf	(??_findFinalDestination+0)+0
  6250  055A  0826               	movf	(??_findFinalDestination+0)+0,w
  6251  055B  00DD               	movwf	(_finalX)
  6252                           	line	68
  6253                           	
  6254  055C                     l10865:	
  6255                           ;map.c: 68: finalY = 1;
  6256  055C  01DE               	clrf	(_finalY)
  6257  055D  1403               	bsf	status,0
  6258  055E  0DDE               	rlf	(_finalY),f
  6259  055F  2DE8               	goto	l10909
  6260                           	line	69
  6261                           	
  6262  0560                     l2868:	
  6263                           	line	70
  6264                           ;map.c: 69: }
  6265                           ;map.c: 70: break;
  6266  0560  2DE8               	goto	l10909
  6267                           	line	71
  6268                           ;map.c: 71: case 1:
  6269                           	
  6270  0561                     l2870:	
  6271                           	line	72
  6272                           	
  6273  0561                     l10867:	
  6274                           ;map.c: 72: finalX = 2;
  6275  0561  3002               	movlw	(02h)
  6276  0562  00A6               	movwf	(??_findFinalDestination+0)+0
  6277  0563  0826               	movf	(??_findFinalDestination+0)+0,w
  6278  0564  00DD               	movwf	(_finalX)
  6279                           	line	73
  6280                           	
  6281  0565                     l10869:	
  6282                           ;map.c: 73: finalY = 1;
  6283  0565  01DE               	clrf	(_finalY)
  6284  0566  1403               	bsf	status,0
  6285  0567  0DDE               	rlf	(_finalY),f
  6286                           	line	74
  6287                           ;map.c: 74: break;
  6288  0568  2DE8               	goto	l10909
  6289                           	line	75
  6290                           ;map.c: 75: case 2:
  6291                           	
  6292  0569                     l2871:	
  6293                           	line	76
  6294                           	
  6295  0569                     l10871:	
  6296                           ;map.c: 76: if(robotOrientation == EAST)
  6297  0569  0825               	movf	(findFinalDestination@robotOrientation),w
  6298  056A  3A02               	xorlw	02h
  6299  056B  1D03               	skipz
  6300  056C  2D6E               	goto	u4221
  6301  056D  2D6F               	goto	u4220
  6302  056E                     u4221:
  6303  056E  2DE8               	goto	l10909
  6304  056F                     u4220:
  6305                           	line	78
  6306                           	
  6307  056F                     l10873:	
  6308                           ;map.c: 77: {
  6309                           ;map.c: 78: finalX = 2;
  6310  056F  3002               	movlw	(02h)
  6311  0570  00A6               	movwf	(??_findFinalDestination+0)+0
  6312  0571  0826               	movf	(??_findFinalDestination+0)+0,w
  6313  0572  00DD               	movwf	(_finalX)
  6314                           	line	79
  6315                           ;map.c: 79: finalY = 2;
  6316  0573  3002               	movlw	(02h)
  6317  0574  00A6               	movwf	(??_findFinalDestination+0)+0
  6318  0575  0826               	movf	(??_findFinalDestination+0)+0,w
  6319  0576  00DE               	movwf	(_finalY)
  6320  0577  2DE8               	goto	l10909
  6321                           	line	80
  6322                           	
  6323  0578                     l2872:	
  6324                           	line	81
  6325                           ;map.c: 80: }
  6326                           ;map.c: 81: break;
  6327  0578  2DE8               	goto	l10909
  6328                           	line	84
  6329                           ;map.c: 84: default:
  6330                           	
  6331  0579                     l2873:	
  6332                           	line	85
  6333                           ;map.c: 85: break;
  6334  0579  2DE8               	goto	l10909
  6335                           	line	86
  6336                           	
  6337  057A                     l10875:	
  6338                           ;map.c: 86: }
  6339  057A  2DE8               	goto	l10909
  6340                           	line	62
  6341                           	
  6342  057B                     l2866:	
  6343                           	
  6344  057B                     l10877:	
  6345  057B  0824               	movf	(findFinalDestination@virtualWallY),w
  6346                           	; Switch size 1, requested type "space"
  6347                           ; Number of cases is 3, Range of values is 0 to 2
  6348                           ; switch strategies available:
  6349                           ; Name         Instructions Cycles
  6350                           ; simple_byte           10     6 (average)
  6351                           ; direct_byte           17     8 (fixed)
  6352                           ; jumptable            260     6 (fixed)
  6353                           ; rangetable             7     6 (fixed)
  6354                           ; spacedrange           12     9 (fixed)
  6355                           ; locatedrange           3     3 (fixed)
  6356                           ;	Chosen strategy is simple_byte
  6357                           
  6358                           	opt asmopt_off
  6359  057C  3A00               	xorlw	0^0	; case 0
  6360  057D  1903               	skipnz
  6361  057E  2D53               	goto	l10861
  6362  057F  3A01               	xorlw	1^0	; case 1
  6363  0580  1903               	skipnz
  6364  0581  2D61               	goto	l10867
  6365  0582  3A03               	xorlw	2^1	; case 2
  6366  0583  1903               	skipnz
  6367  0584  2D69               	goto	l10871
  6368  0585  2DE8               	goto	l10909
  6369                           	opt asmopt_on
  6370                           
  6371                           	line	86
  6372                           	
  6373  0586                     l2869:	
  6374                           	line	87
  6375                           ;map.c: 87: break;
  6376  0586  2DE8               	goto	l10909
  6377                           	line	89
  6378                           ;map.c: 89: case 3:
  6379                           	
  6380  0587                     l2874:	
  6381                           	line	90
  6382                           ;map.c: 90: switch (virtualWallY)
  6383  0587  2D99               	goto	l10887
  6384                           	line	92
  6385                           ;map.c: 91: {
  6386                           ;map.c: 92: case 0:
  6387                           	
  6388  0588                     l2876:	
  6389                           	line	93
  6390                           	
  6391  0588                     l10879:	
  6392                           ;map.c: 93: finalX = 3;
  6393  0588  3003               	movlw	(03h)
  6394  0589  00A6               	movwf	(??_findFinalDestination+0)+0
  6395  058A  0826               	movf	(??_findFinalDestination+0)+0,w
  6396  058B  00DD               	movwf	(_finalX)
  6397                           	line	94
  6398                           	
  6399  058C                     l10881:	
  6400                           ;map.c: 94: finalY = 0;
  6401  058C  01DE               	clrf	(_finalY)
  6402                           	line	95
  6403                           ;map.c: 95: break;
  6404  058D  2DE8               	goto	l10909
  6405                           	line	98
  6406                           ;map.c: 98: case 2:
  6407                           	
  6408  058E                     l2878:	
  6409                           	line	99
  6410                           	
  6411  058E                     l10883:	
  6412                           ;map.c: 99: finalX = 3;
  6413  058E  3003               	movlw	(03h)
  6414  058F  00A6               	movwf	(??_findFinalDestination+0)+0
  6415  0590  0826               	movf	(??_findFinalDestination+0)+0,w
  6416  0591  00DD               	movwf	(_finalX)
  6417                           	line	100
  6418                           ;map.c: 100: finalY = 2;
  6419  0592  3002               	movlw	(02h)
  6420  0593  00A6               	movwf	(??_findFinalDestination+0)+0
  6421  0594  0826               	movf	(??_findFinalDestination+0)+0,w
  6422  0595  00DE               	movwf	(_finalY)
  6423                           	line	101
  6424                           ;map.c: 101: break;
  6425  0596  2DE8               	goto	l10909
  6426                           	line	104
  6427                           ;map.c: 104: default:
  6428                           	
  6429  0597                     l2879:	
  6430                           	line	105
  6431                           ;map.c: 105: break;
  6432  0597  2DE8               	goto	l10909
  6433                           	line	106
  6434                           	
  6435  0598                     l10885:	
  6436                           ;map.c: 106: }
  6437  0598  2DE8               	goto	l10909
  6438                           	line	90
  6439                           	
  6440  0599                     l2875:	
  6441                           	
  6442  0599                     l10887:	
  6443  0599  0824               	movf	(findFinalDestination@virtualWallY),w
  6444                           	; Switch size 1, requested type "space"
  6445                           ; Number of cases is 2, Range of values is 0 to 2
  6446                           ; switch strategies available:
  6447                           ; Name         Instructions Cycles
  6448                           ; simple_byte            7     4 (average)
  6449                           ; direct_byte           17     8 (fixed)
  6450                           ; jumptable            260     6 (fixed)
  6451                           ; rangetable             7     6 (fixed)
  6452                           ; spacedrange           12     9 (fixed)
  6453                           ; locatedrange           3     3 (fixed)
  6454                           ;	Chosen strategy is simple_byte
  6455                           
  6456                           	opt asmopt_off
  6457  059A  3A00               	xorlw	0^0	; case 0
  6458  059B  1903               	skipnz
  6459  059C  2D88               	goto	l10879
  6460  059D  3A02               	xorlw	2^0	; case 2
  6461  059E  1903               	skipnz
  6462  059F  2D8E               	goto	l10883
  6463  05A0  2DE8               	goto	l10909
  6464                           	opt asmopt_on
  6465                           
  6466                           	line	106
  6467                           	
  6468  05A1                     l2877:	
  6469                           	line	107
  6470                           ;map.c: 107: break;
  6471  05A1  2DE8               	goto	l10909
  6472                           	line	109
  6473                           ;map.c: 109: case 4:
  6474                           	
  6475  05A2                     l2880:	
  6476                           	line	110
  6477                           ;map.c: 110: switch (virtualWallY)
  6478  05A2  2DC6               	goto	l10903
  6479                           	line	112
  6480                           ;map.c: 111: {
  6481                           ;map.c: 112: case 0:
  6482                           	
  6483  05A3                     l2882:	
  6484                           	line	113
  6485                           	
  6486  05A3                     l10889:	
  6487                           ;map.c: 113: finalX = 4;
  6488  05A3  3004               	movlw	(04h)
  6489  05A4  00A6               	movwf	(??_findFinalDestination+0)+0
  6490  05A5  0826               	movf	(??_findFinalDestination+0)+0,w
  6491  05A6  00DD               	movwf	(_finalX)
  6492                           	line	114
  6493                           	
  6494  05A7                     l10891:	
  6495                           ;map.c: 114: finalY = 0;
  6496  05A7  01DE               	clrf	(_finalY)
  6497                           	line	115
  6498                           ;map.c: 115: break;
  6499  05A8  2DE8               	goto	l10909
  6500                           	line	116
  6501                           ;map.c: 116: case 1:
  6502                           	
  6503  05A9                     l2884:	
  6504                           	line	117
  6505                           	
  6506  05A9                     l10893:	
  6507                           ;map.c: 117: finalX = 4;
  6508  05A9  3004               	movlw	(04h)
  6509  05AA  00A6               	movwf	(??_findFinalDestination+0)+0
  6510  05AB  0826               	movf	(??_findFinalDestination+0)+0,w
  6511  05AC  00DD               	movwf	(_finalX)
  6512                           	line	118
  6513                           	
  6514  05AD                     l10895:	
  6515                           ;map.c: 118: finalY = 1;
  6516  05AD  01DE               	clrf	(_finalY)
  6517  05AE  1403               	bsf	status,0
  6518  05AF  0DDE               	rlf	(_finalY),f
  6519                           	line	119
  6520                           ;map.c: 119: break;
  6521  05B0  2DE8               	goto	l10909
  6522                           	line	120
  6523                           ;map.c: 120: case 2:
  6524                           	
  6525  05B1                     l2885:	
  6526                           	line	121
  6527                           	
  6528  05B1                     l10897:	
  6529                           ;map.c: 121: if (robotOrientation == SOUTH)
  6530  05B1  0825               	movf	(findFinalDestination@robotOrientation),w
  6531  05B2  3A01               	xorlw	01h
  6532  05B3  1D03               	skipz
  6533  05B4  2DB6               	goto	u4231
  6534  05B5  2DB7               	goto	u4230
  6535  05B6                     u4231:
  6536  05B6  2DE8               	goto	l10909
  6537  05B7                     u4230:
  6538                           	line	123
  6539                           	
  6540  05B7                     l10899:	
  6541                           ;map.c: 122: {
  6542                           ;map.c: 123: finalX = 4;
  6543  05B7  3004               	movlw	(04h)
  6544  05B8  00A6               	movwf	(??_findFinalDestination+0)+0
  6545  05B9  0826               	movf	(??_findFinalDestination+0)+0,w
  6546  05BA  00DD               	movwf	(_finalX)
  6547                           	line	124
  6548                           ;map.c: 124: finalY = 2;
  6549  05BB  3002               	movlw	(02h)
  6550  05BC  00A6               	movwf	(??_findFinalDestination+0)+0
  6551  05BD  0826               	movf	(??_findFinalDestination+0)+0,w
  6552  05BE  00DE               	movwf	(_finalY)
  6553  05BF  2DE8               	goto	l10909
  6554                           	line	125
  6555                           	
  6556  05C0                     l2886:	
  6557                           	line	126
  6558                           ;map.c: 125: }
  6559                           ;map.c: 126: break;
  6560  05C0  2DE8               	goto	l10909
  6561                           	line	127
  6562                           ;map.c: 127: case 3:
  6563                           	
  6564  05C1                     l2887:	
  6565                           	line	128
  6566                           ;map.c: 128: finalX = 0;
  6567  05C1  01DD               	clrf	(_finalX)
  6568                           	line	129
  6569                           ;map.c: 129: finalY = 0;
  6570  05C2  01DE               	clrf	(_finalY)
  6571                           	line	130
  6572                           ;map.c: 130: break;
  6573  05C3  2DE8               	goto	l10909
  6574                           	line	131
  6575                           ;map.c: 131: default:
  6576                           	
  6577  05C4                     l2888:	
  6578                           	line	132
  6579                           ;map.c: 132: break;
  6580  05C4  2DE8               	goto	l10909
  6581                           	line	133
  6582                           	
  6583  05C5                     l10901:	
  6584                           ;map.c: 133: }
  6585  05C5  2DE8               	goto	l10909
  6586                           	line	110
  6587                           	
  6588  05C6                     l2881:	
  6589                           	
  6590  05C6                     l10903:	
  6591  05C6  0824               	movf	(findFinalDestination@virtualWallY),w
  6592                           	; Switch size 1, requested type "space"
  6593                           ; Number of cases is 4, Range of values is 0 to 3
  6594                           ; switch strategies available:
  6595                           ; Name         Instructions Cycles
  6596                           ; simple_byte           13     7 (average)
  6597                           ; direct_byte           20     8 (fixed)
  6598                           ; jumptable            260     6 (fixed)
  6599                           ; rangetable             8     6 (fixed)
  6600                           ; spacedrange           14     9 (fixed)
  6601                           ; locatedrange           4     3 (fixed)
  6602                           ;	Chosen strategy is simple_byte
  6603                           
  6604                           	opt asmopt_off
  6605  05C7  3A00               	xorlw	0^0	; case 0
  6606  05C8  1903               	skipnz
  6607  05C9  2DA3               	goto	l10889
  6608  05CA  3A01               	xorlw	1^0	; case 1
  6609  05CB  1903               	skipnz
  6610  05CC  2DA9               	goto	l10893
  6611  05CD  3A03               	xorlw	2^1	; case 2
  6612  05CE  1903               	skipnz
  6613  05CF  2DB1               	goto	l10897
  6614  05D0  3A01               	xorlw	3^2	; case 3
  6615  05D1  1903               	skipnz
  6616  05D2  2DC1               	goto	l2887
  6617  05D3  2DE8               	goto	l10909
  6618                           	opt asmopt_on
  6619                           
  6620                           	line	133
  6621                           	
  6622  05D4                     l2883:	
  6623                           	line	134
  6624                           ;map.c: 134: break;
  6625  05D4  2DE8               	goto	l10909
  6626                           	line	136
  6627                           ;map.c: 136: default:
  6628                           	
  6629  05D5                     l2889:	
  6630                           	line	137
  6631                           ;map.c: 137: break;
  6632  05D5  2DE8               	goto	l10909
  6633                           	line	138
  6634                           	
  6635  05D6                     l10905:	
  6636                           ;map.c: 138: }
  6637  05D6  2DE8               	goto	l10909
  6638                           	line	13
  6639                           	
  6640  05D7                     l2848:	
  6641                           	
  6642  05D7                     l10907:	
  6643  05D7  0827               	movf	(findFinalDestination@virtualWallX),w
  6644                           	; Switch size 1, requested type "space"
  6645                           ; Number of cases is 5, Range of values is 0 to 4
  6646                           ; switch strategies available:
  6647                           ; Name         Instructions Cycles
  6648                           ; simple_byte           16     9 (average)
  6649                           ; direct_byte           23     8 (fixed)
  6650                           ; jumptable            260     6 (fixed)
  6651                           ; rangetable             9     6 (fixed)
  6652                           ; spacedrange           16     9 (fixed)
  6653                           ; locatedrange           5     3 (fixed)
  6654                           ;	Chosen strategy is simple_byte
  6655                           
  6656                           	opt asmopt_off
  6657  05D8  3A00               	xorlw	0^0	; case 0
  6658  05D9  1903               	skipnz
  6659  05DA  2D18               	goto	l10841
  6660  05DB  3A01               	xorlw	1^0	; case 1
  6661  05DC  1903               	skipnz
  6662  05DD  2D43               	goto	l10859
  6663  05DE  3A03               	xorlw	2^1	; case 2
  6664  05DF  1903               	skipnz
  6665  05E0  2D7B               	goto	l10877
  6666  05E1  3A01               	xorlw	3^2	; case 3
  6667  05E2  1903               	skipnz
  6668  05E3  2D99               	goto	l10887
  6669  05E4  3A07               	xorlw	4^3	; case 4
  6670  05E5  1903               	skipnz
  6671  05E6  2DC6               	goto	l10903
  6672  05E7  2DE8               	goto	l10909
  6673                           	opt asmopt_on
  6674                           
  6675                           	line	138
  6676                           	
  6677  05E8                     l2856:	
  6678                           	line	140
  6679                           	
  6680  05E8                     l10909:	
  6681                           ;map.c: 140: lcd_set_cursor(0x47);
  6682  05E8  3047               	movlw	(047h)
  6683  05E9  160A  118A  2587   	fcall	_lcd_set_cursor
              120A  118A         
  6684                           	line	141
  6685                           ;map.c: 141: lcd_write_1_digit_bcd(finalX);
  6686  05EE  1283               	bcf	status, 5	;RP0=0, select bank0
  6687  05EF  1303               	bcf	status, 6	;RP1=0, select bank0
  6688  05F0  085D               	movf	(_finalX),w
  6689  05F1  120A  118A  27F4   	fcall	_lcd_write_1_digit_bcd
              120A  118A         
  6690                           	line	142
  6691                           ;map.c: 142: lcd_set_cursor(0x49);
  6692  05F6  3049               	movlw	(049h)
  6693  05F7  160A  118A  2587   	fcall	_lcd_set_cursor
              120A  118A         
  6694                           	line	143
  6695                           ;map.c: 143: lcd_write_1_digit_bcd(finalY);
  6696  05FC  1283               	bcf	status, 5	;RP0=0, select bank0
  6697  05FD  1303               	bcf	status, 6	;RP1=0, select bank0
  6698  05FE  085E               	movf	(_finalY),w
  6699  05FF  120A  118A  27F4   	fcall	_lcd_write_1_digit_bcd
              120A  118A         
  6700                           	line	144
  6701                           	
  6702  0604                     l2890:	
  6703  0604  0008               	return
  6704                           	opt stack 0
  6705                           GLOBAL	__end_of_findFinalDestination
  6706  0605                     	__end_of_findFinalDestination:
  6707 ;; =============== function _findFinalDestination ends ============
  6708                           
  6709                           	signat	_findFinalDestination,12408
  6710                           	global	_updateMapData
  6711                           psect	text1254,local,class=CODE,delta=2
  6712                           global __ptext1254
  6713  0C67                     __ptext1254:
  6714                           
  6715 ;; *************** function _updateMapData *****************
  6716 ;; Defined at:
  6717 ;;		line 135 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\eeprom.c"
  6718 ;; Parameters:    Size  Location     Type
  6719 ;;  virtualW        1    wreg     unsigned char 
  6720 ;;  virtualS        1    9[BANK0 ] unsigned char 
  6721 ;;  virtualE        1   10[BANK0 ] unsigned char 
  6722 ;;  virtualN        1   11[BANK0 ] unsigned char 
  6723 ;;  victim          1   12[BANK0 ] unsigned char 
  6724 ;;  move            1   13[BANK0 ] unsigned char 
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;  virtualW        1   16[BANK0 ] unsigned char 
  6727 ;;  completeData    1   17[BANK0 ] unsigned char 
  6728 ;; Return value:  Size  Location     Type
  6729 ;;		None               void
  6730 ;; Registers used:
  6731 ;;		wreg, status,2, status,0, pclath, cstack
  6732 ;; Tracked objects:
  6733 ;;		On entry : 0/0
  6734 ;;		On exit  : 0/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6737 ;;      Params:         0       5       0       0       0
  6738 ;;      Locals:         0       2       0       0       0
  6739 ;;      Temps:          0       2       0       0       0
  6740 ;;      Totals:         0       9       0       0       0
  6741 ;;Total ram usage:        9 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; Hardware stack levels required when called:    4
  6744 ;; This function calls:
  6745 ;;		_addNewData
  6746 ;; This function is called by:
  6747 ;;		_main
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           psect	text1254
  6751                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\eeprom.c"
  6752                           	line	135
  6753                           	global	__size_of_updateMapData
  6754  004D                     	__size_of_updateMapData	equ	__end_of_updateMapData-_updateMapData
  6755                           	
  6756  0C67                     _updateMapData:	
  6757                           	opt	stack 3
  6758                           ; Regs used in _updateMapData: [wreg+status,2+status,0+pclath+cstack]
  6759                           ;updateMapData@virtualW stored from wreg
  6760  0C67  1283               	bcf	status, 5	;RP0=0, select bank0
  6761  0C68  1303               	bcf	status, 6	;RP1=0, select bank0
  6762  0C69  00B0               	movwf	(updateMapData@virtualW)
  6763                           	line	136
  6764                           	
  6765  0C6A                     l10825:	
  6766                           ;eeprom.c: 136: char completeData = 0;
  6767  0C6A  01B1               	clrf	(updateMapData@completeData)
  6768                           	line	137
  6769                           	
  6770  0C6B                     l10827:	
  6771                           ;eeprom.c: 137: completeData |= virtualW;
  6772  0C6B  0830               	movf	(updateMapData@virtualW),w
  6773  0C6C  00AE               	movwf	(??_updateMapData+0)+0
  6774  0C6D  082E               	movf	(??_updateMapData+0)+0,w
  6775  0C6E  04B1               	iorwf	(updateMapData@completeData),f
  6776                           	line	138
  6777                           ;eeprom.c: 138: completeData |= virtualS << 1;
  6778  0C6F  0829               	movf	(updateMapData@virtualS),w
  6779  0C70  00AE               	movwf	(??_updateMapData+0)+0
  6780  0C71  072E               	addwf	(??_updateMapData+0)+0,w
  6781  0C72  00AF               	movwf	(??_updateMapData+1)+0
  6782  0C73  082F               	movf	(??_updateMapData+1)+0,w
  6783  0C74  04B1               	iorwf	(updateMapData@completeData),f
  6784                           	line	139
  6785                           ;eeprom.c: 139: completeData |= virtualE << 2;
  6786  0C75  082A               	movf	(updateMapData@virtualE),w
  6787  0C76  00AE               	movwf	(??_updateMapData+0)+0
  6788  0C77  3001               	movlw	(02h)-1
  6789  0C78                     u4175:
  6790  0C78  1003               	clrc
  6791  0C79  0DAE               	rlf	(??_updateMapData+0)+0,f
  6792  0C7A  3EFF               	addlw	-1
  6793  0C7B  1D03               	skipz
  6794  0C7C  2C78               	goto	u4175
  6795  0C7D  1003               	clrc
  6796  0C7E  0D2E               	rlf	(??_updateMapData+0)+0,w
  6797  0C7F  00AF               	movwf	(??_updateMapData+1)+0
  6798  0C80  082F               	movf	(??_updateMapData+1)+0,w
  6799  0C81  04B1               	iorwf	(updateMapData@completeData),f
  6800                           	line	140
  6801                           ;eeprom.c: 140: completeData |= virtualN << 3;
  6802  0C82  082B               	movf	(updateMapData@virtualN),w
  6803  0C83  00AE               	movwf	(??_updateMapData+0)+0
  6804  0C84  3002               	movlw	(03h)-1
  6805  0C85                     u4185:
  6806  0C85  1003               	clrc
  6807  0C86  0DAE               	rlf	(??_updateMapData+0)+0,f
  6808  0C87  3EFF               	addlw	-1
  6809  0C88  1D03               	skipz
  6810  0C89  2C85               	goto	u4185
  6811  0C8A  1003               	clrc
  6812  0C8B  0D2E               	rlf	(??_updateMapData+0)+0,w
  6813  0C8C  00AF               	movwf	(??_updateMapData+1)+0
  6814  0C8D  082F               	movf	(??_updateMapData+1)+0,w
  6815  0C8E  04B1               	iorwf	(updateMapData@completeData),f
  6816                           	line	141
  6817                           ;eeprom.c: 141: completeData |= victim << 4;
  6818  0C8F  082C               	movf	(updateMapData@victim),w
  6819  0C90  00AE               	movwf	(??_updateMapData+0)+0
  6820  0C91  3003               	movlw	(04h)-1
  6821  0C92                     u4195:
  6822  0C92  1003               	clrc
  6823  0C93  0DAE               	rlf	(??_updateMapData+0)+0,f
  6824  0C94  3EFF               	addlw	-1
  6825  0C95  1D03               	skipz
  6826  0C96  2C92               	goto	u4195
  6827  0C97  1003               	clrc
  6828  0C98  0D2E               	rlf	(??_updateMapData+0)+0,w
  6829  0C99  00AF               	movwf	(??_updateMapData+1)+0
  6830  0C9A  082F               	movf	(??_updateMapData+1)+0,w
  6831  0C9B  04B1               	iorwf	(updateMapData@completeData),f
  6832                           	line	142
  6833                           ;eeprom.c: 142: completeData |= move << 5;
  6834  0C9C  082D               	movf	(updateMapData@move),w
  6835  0C9D  00AE               	movwf	(??_updateMapData+0)+0
  6836  0C9E  3004               	movlw	(05h)-1
  6837  0C9F                     u4205:
  6838  0C9F  1003               	clrc
  6839  0CA0  0DAE               	rlf	(??_updateMapData+0)+0,f
  6840  0CA1  3EFF               	addlw	-1
  6841  0CA2  1D03               	skipz
  6842  0CA3  2C9F               	goto	u4205
  6843  0CA4  1003               	clrc
  6844  0CA5  0D2E               	rlf	(??_updateMapData+0)+0,w
  6845  0CA6  00AF               	movwf	(??_updateMapData+1)+0
  6846  0CA7  082F               	movf	(??_updateMapData+1)+0,w
  6847  0CA8  04B1               	iorwf	(updateMapData@completeData),f
  6848                           	line	143
  6849                           ;eeprom.c: 143: completeData &= 0b01111111;
  6850  0CA9  307F               	movlw	(07Fh)
  6851  0CAA  00AE               	movwf	(??_updateMapData+0)+0
  6852  0CAB  082E               	movf	(??_updateMapData+0)+0,w
  6853  0CAC  05B1               	andwf	(updateMapData@completeData),f
  6854                           	line	144
  6855                           	
  6856  0CAD                     l10829:	
  6857                           ;eeprom.c: 144: addNewData(completeData);
  6858  0CAD  0831               	movf	(updateMapData@completeData),w
  6859  0CAE  160A  118A  2670   	fcall	_addNewData
              120A  158A         
  6860                           	line	145
  6861                           	
  6862  0CB3                     l1430:	
  6863  0CB3  0008               	return
  6864                           	opt stack 0
  6865                           GLOBAL	__end_of_updateMapData
  6866  0CB4                     	__end_of_updateMapData:
  6867 ;; =============== function _updateMapData ends ============
  6868                           
  6869                           	signat	_updateMapData,24696
  6870                           	global	_checkIfHome
  6871                           psect	text1255,local,class=CODE,delta=2
  6872                           global __ptext1255
  6873  168E                     __ptext1255:
  6874                           
  6875 ;; *************** function _checkIfHome *****************
  6876 ;; Defined at:
  6877 ;;		line 305 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  6878 ;; Parameters:    Size  Location     Type
  6879 ;;		None
  6880 ;; Auto vars:     Size  Location     Type
  6881 ;;		None
  6882 ;; Return value:  Size  Location     Type
  6883 ;;		None               void
  6884 ;; Registers used:
  6885 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6886 ;; Tracked objects:
  6887 ;;		On entry : 0/0
  6888 ;;		On exit  : 0/0
  6889 ;;		Unchanged: 0/0
  6890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6891 ;;      Params:         0       0       0       0       0
  6892 ;;      Locals:         0       0       0       0       0
  6893 ;;      Temps:          0       0       0       0       0
  6894 ;;      Totals:         0       0       0       0       0
  6895 ;;Total ram usage:        0 bytes
  6896 ;; Hardware stack levels used:    1
  6897 ;; Hardware stack levels required when called:    3
  6898 ;; This function calls:
  6899 ;;		_drive
  6900 ;;		_play_iCreate_song
  6901 ;; This function is called by:
  6902 ;;		_main
  6903 ;; This function uses a non-reentrant model
  6904 ;;
  6905                           psect	text1255
  6906                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  6907                           	line	305
  6908                           	global	__size_of_checkIfHome
  6909  0020                     	__size_of_checkIfHome	equ	__end_of_checkIfHome-_checkIfHome
  6910                           	
  6911  168E                     _checkIfHome:	
  6912                           	opt	stack 4
  6913                           ; Regs used in _checkIfHome: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6914                           	line	306
  6915                           	
  6916  168E                     l10817:	
  6917                           ;main.c: 306: if((xCoord == 1) && (yCoord == 3))
  6918  168E  1283               	bcf	status, 5	;RP0=0, select bank0
  6919  168F  1303               	bcf	status, 6	;RP1=0, select bank0
  6920  1690  0860               	movf	(_xCoord),w	;volatile
  6921  1691  3A01               	xorlw	01h
  6922  1692  1D03               	skipz
  6923  1693  2E95               	goto	u4151
  6924  1694  2E96               	goto	u4150
  6925  1695                     u4151:
  6926  1695  2EAD               	goto	l6769
  6927  1696                     u4150:
  6928                           	
  6929  1696                     l10819:	
  6930  1696  0861               	movf	(_yCoord),w	;volatile
  6931  1697  3A03               	xorlw	03h
  6932  1698  1D03               	skipz
  6933  1699  2E9B               	goto	u4161
  6934  169A  2E9C               	goto	u4160
  6935  169B                     u4161:
  6936  169B  2EAD               	goto	l6769
  6937  169C                     u4160:
  6938                           	line	308
  6939                           	
  6940  169C                     l10821:	
  6941                           ;main.c: 307: {
  6942                           ;main.c: 308: drive(0, 0, 0, 0);
  6943  169C  01A2               	clrf	(?_drive)
  6944  169D  01A3               	clrf	0+(?_drive)+01h
  6945  169E  01A4               	clrf	0+(?_drive)+02h
  6946  169F  3000               	movlw	(0)
  6947  16A0  120A  158A  2130   	fcall	_drive
              160A  118A         
  6948                           	line	309
  6949                           ;main.c: 309: play_iCreate_song(4);
  6950  16A5  3004               	movlw	(04h)
  6951  16A6  160A  118A  25BF   	fcall	_play_iCreate_song
              160A  118A         
  6952                           	line	310
  6953                           	
  6954  16AB                     l10823:	
  6955                           ;main.c: 310: home = 1;
  6956  16AB  1770               	bsf	(_home/8),(_home)&7
  6957  16AC  2EAD               	goto	l6769
  6958                           	line	311
  6959                           	
  6960  16AD                     l6768:	
  6961                           	line	312
  6962                           	
  6963  16AD                     l6769:	
  6964  16AD  0008               	return
  6965                           	opt stack 0
  6966                           GLOBAL	__end_of_checkIfHome
  6967  16AE                     	__end_of_checkIfHome:
  6968 ;; =============== function _checkIfHome ends ============
  6969                           
  6970                           	signat	_checkIfHome,88
  6971                           	global	_turnAround
  6972                           psect	text1256,local,class=CODE,delta=2
  6973                           global __ptext1256
  6974  0BD9                     __ptext1256:
  6975                           
  6976 ;; *************** function _turnAround *****************
  6977 ;; Defined at:
  6978 ;;		line 261 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  6979 ;; Parameters:    Size  Location     Type
  6980 ;;		None
  6981 ;; Auto vars:     Size  Location     Type
  6982 ;;		None
  6983 ;; Return value:  Size  Location     Type
  6984 ;;		None               void
  6985 ;; Registers used:
  6986 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6987 ;; Tracked objects:
  6988 ;;		On entry : 0/0
  6989 ;;		On exit  : 0/0
  6990 ;;		Unchanged: 0/0
  6991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6992 ;;      Params:         0       0       0       0       0
  6993 ;;      Locals:         0       0       0       0       0
  6994 ;;      Temps:          0       3       0       0       0
  6995 ;;      Totals:         0       3       0       0       0
  6996 ;;Total ram usage:        3 bytes
  6997 ;; Hardware stack levels used:    1
  6998 ;; Hardware stack levels required when called:    3
  6999 ;; This function calls:
  7000 ;;		_drive
  7001 ;;		_waitFor
  7002 ;; This function is called by:
  7003 ;;		_goBackward
  7004 ;; This function uses a non-reentrant model
  7005 ;;
  7006                           psect	text1256
  7007                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  7008                           	line	261
  7009                           	global	__size_of_turnAround
  7010  0047                     	__size_of_turnAround	equ	__end_of_turnAround-_turnAround
  7011                           	
  7012  0BD9                     _turnAround:	
  7013                           	opt	stack 2
  7014                           ; Regs used in _turnAround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7015                           	line	262
  7016                           	
  7017  0BD9                     l10811:	
  7018                           ;drive.c: 262: drive(0, 50, 0, 1);
  7019  0BD9  3032               	movlw	(032h)
  7020  0BDA  1283               	bcf	status, 5	;RP0=0, select bank0
  7021  0BDB  1303               	bcf	status, 6	;RP1=0, select bank0
  7022  0BDC  00A9               	movwf	(??_turnAround+0)+0
  7023  0BDD  0829               	movf	(??_turnAround+0)+0,w
  7024  0BDE  00A2               	movwf	(?_drive)
  7025  0BDF  01A3               	clrf	0+(?_drive)+01h
  7026  0BE0  01A4               	clrf	0+(?_drive)+02h
  7027  0BE1  1403               	bsf	status,0
  7028  0BE2  0DA4               	rlf	0+(?_drive)+02h,f
  7029  0BE3  3000               	movlw	(0)
  7030  0BE4  120A  158A  2130   	fcall	_drive
              120A  158A         
  7031                           	line	263
  7032                           ;drive.c: 263: waitFor(157,0,180);
  7033  0BE9  1283               	bcf	status, 5	;RP0=0, select bank0
  7034  0BEA  1303               	bcf	status, 6	;RP1=0, select bank0
  7035  0BEB  01A2               	clrf	(?_waitFor)
  7036  0BEC  30B4               	movlw	(0B4h)
  7037  0BED  00A9               	movwf	(??_turnAround+0)+0
  7038  0BEE  0829               	movf	(??_turnAround+0)+0,w
  7039  0BEF  00A3               	movwf	0+(?_waitFor)+01h
  7040  0BF0  309D               	movlw	(09Dh)
  7041  0BF1  160A  118A  27AE   	fcall	_waitFor
              120A  158A         
  7042                           	line	264
  7043                           ;drive.c: 264: drive(0, 0, 0, 0);
  7044  0BF6  1283               	bcf	status, 5	;RP0=0, select bank0
  7045  0BF7  1303               	bcf	status, 6	;RP1=0, select bank0
  7046  0BF8  01A2               	clrf	(?_drive)
  7047  0BF9  01A3               	clrf	0+(?_drive)+01h
  7048  0BFA  01A4               	clrf	0+(?_drive)+02h
  7049  0BFB  3000               	movlw	(0)
  7050  0BFC  120A  158A  2130   	fcall	_drive
              120A  158A         
  7051                           	line	265
  7052                           	
  7053  0C01                     l10813:	
  7054                           ;drive.c: 265: _delay((unsigned long)((3000)*(20000000/4000.0)));
  7055                           	opt asmopt_off
  7056  0C01  304D               movlw  77
  7057  0C02  1283               	bcf	status, 5	;RP0=0, select bank0
  7058  0C03  1303               	bcf	status, 6	;RP1=0, select bank0
  7059  0C04  00AB               movwf	((??_turnAround+0)+0+2),f
  7060  0C05  3019               movlw	25
  7061  0C06  00AA               movwf	((??_turnAround+0)+0+1),f
  7062  0C07  309A               	movlw	154
  7063  0C08  00A9               movwf	((??_turnAround+0)+0),f
  7064  0C09                     u4867:
  7065  0C09  0BA9               	decfsz	((??_turnAround+0)+0),f
  7066  0C0A  2C09               	goto	u4867
  7067  0C0B  0BAA               	decfsz	((??_turnAround+0)+0+1),f
  7068  0C0C  2C09               	goto	u4867
  7069  0C0D  0BAB               	decfsz	((??_turnAround+0)+0+2),f
  7070  0C0E  2C09               	goto	u4867
  7071  0C0F  2C10               	nop2
  7072                           opt asmopt_on
  7073                           
  7074                           	line	266
  7075                           	
  7076  0C10                     l10815:	
  7077                           ;drive.c: 266: _delay((unsigned long)((3000)*(20000000/4000.0)));
  7078                           	opt asmopt_off
  7079  0C10  304D               movlw  77
  7080  0C11  1283               	bcf	status, 5	;RP0=0, select bank0
  7081  0C12  1303               	bcf	status, 6	;RP1=0, select bank0
  7082  0C13  00AB               movwf	((??_turnAround+0)+0+2),f
  7083  0C14  3019               movlw	25
  7084  0C15  00AA               movwf	((??_turnAround+0)+0+1),f
  7085  0C16  309A               	movlw	154
  7086  0C17  00A9               movwf	((??_turnAround+0)+0),f
  7087  0C18                     u4877:
  7088  0C18  0BA9               	decfsz	((??_turnAround+0)+0),f
  7089  0C19  2C18               	goto	u4877
  7090  0C1A  0BAA               	decfsz	((??_turnAround+0)+0+1),f
  7091  0C1B  2C18               	goto	u4877
  7092  0C1C  0BAB               	decfsz	((??_turnAround+0)+0+2),f
  7093  0C1D  2C18               	goto	u4877
  7094  0C1E  2C1F               	nop2
  7095                           opt asmopt_on
  7096                           
  7097                           	line	267
  7098                           	
  7099  0C1F                     l5868:	
  7100  0C1F  0008               	return
  7101                           	opt stack 0
  7102                           GLOBAL	__end_of_turnAround
  7103  0C20                     	__end_of_turnAround:
  7104 ;; =============== function _turnAround ends ============
  7105                           
  7106                           	signat	_turnAround,88
  7107                           	global	_turnLeft90
  7108                           psect	text1257,local,class=CODE,delta=2
  7109                           global __ptext1257
  7110  0CB4                     __ptext1257:
  7111                           
  7112 ;; *************** function _turnLeft90 *****************
  7113 ;; Defined at:
  7114 ;;		line 270 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  7115 ;; Parameters:    Size  Location     Type
  7116 ;;		None
  7117 ;; Auto vars:     Size  Location     Type
  7118 ;;		None
  7119 ;; Return value:  Size  Location     Type
  7120 ;;		None               void
  7121 ;; Registers used:
  7122 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7123 ;; Tracked objects:
  7124 ;;		On entry : 0/0
  7125 ;;		On exit  : 0/0
  7126 ;;		Unchanged: 0/0
  7127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7128 ;;      Params:         0       0       0       0       0
  7129 ;;      Locals:         0       0       0       0       0
  7130 ;;      Temps:          0       3       0       0       0
  7131 ;;      Totals:         0       3       0       0       0
  7132 ;;Total ram usage:        3 bytes
  7133 ;; Hardware stack levels used:    1
  7134 ;; Hardware stack levels required when called:    3
  7135 ;; This function calls:
  7136 ;;		_drive
  7137 ;;		_getCurrentX
  7138 ;;		_getCurrentY
  7139 ;;		_waitFor
  7140 ;; This function is called by:
  7141 ;;		_driveForDistance
  7142 ;;		_goLeft
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           psect	text1257
  7146                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  7147                           	line	270
  7148                           	global	__size_of_turnLeft90
  7149  005A                     	__size_of_turnLeft90	equ	__end_of_turnLeft90-_turnLeft90
  7150                           	
  7151  0CB4                     _turnLeft90:	
  7152                           	opt	stack 2
  7153                           ; Regs used in _turnLeft90: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7154                           	line	271
  7155                           	
  7156  0CB4                     l10799:	
  7157                           ;drive.c: 271: drive(0, 50, 0, 1);
  7158  0CB4  3032               	movlw	(032h)
  7159  0CB5  1283               	bcf	status, 5	;RP0=0, select bank0
  7160  0CB6  1303               	bcf	status, 6	;RP1=0, select bank0
  7161  0CB7  00A9               	movwf	(??_turnLeft90+0)+0
  7162  0CB8  0829               	movf	(??_turnLeft90+0)+0,w
  7163  0CB9  00A2               	movwf	(?_drive)
  7164  0CBA  01A3               	clrf	0+(?_drive)+01h
  7165  0CBB  01A4               	clrf	0+(?_drive)+02h
  7166  0CBC  1403               	bsf	status,0
  7167  0CBD  0DA4               	rlf	0+(?_drive)+02h,f
  7168  0CBE  3000               	movlw	(0)
  7169  0CBF  120A  158A  2130   	fcall	_drive
              120A  158A         
  7170                           	line	272
  7171                           	
  7172  0CC4                     l10801:	
  7173                           ;drive.c: 272: if( (getCurrentX() == 2 && getCurrentY() == 2))
  7174  0CC4  160A  118A  2559   	fcall	_getCurrentX
              120A  158A         
  7175  0CC9  3A02               	xorlw	02h
  7176  0CCA  1D03               	skipz
  7177  0CCB  2CCD               	goto	u4131
  7178  0CCC  2CCE               	goto	u4130
  7179  0CCD                     u4131:
  7180  0CCD  2CE6               	goto	l10807
  7181  0CCE                     u4130:
  7182                           	
  7183  0CCE                     l10803:	
  7184  0CCE  160A  118A  255E   	fcall	_getCurrentY
              120A  158A         
  7185  0CD3  3A02               	xorlw	02h
  7186  0CD4  1D03               	skipz
  7187  0CD5  2CD7               	goto	u4141
  7188  0CD6  2CD8               	goto	u4140
  7189  0CD7                     u4141:
  7190  0CD7  2CE6               	goto	l10807
  7191  0CD8                     u4140:
  7192                           	line	274
  7193                           	
  7194  0CD8                     l10805:	
  7195                           ;drive.c: 273: {
  7196                           ;drive.c: 274: waitFor(157,0,85);
  7197  0CD8  1283               	bcf	status, 5	;RP0=0, select bank0
  7198  0CD9  1303               	bcf	status, 6	;RP1=0, select bank0
  7199  0CDA  01A2               	clrf	(?_waitFor)
  7200  0CDB  3055               	movlw	(055h)
  7201  0CDC  00A9               	movwf	(??_turnLeft90+0)+0
  7202  0CDD  0829               	movf	(??_turnLeft90+0)+0,w
  7203  0CDE  00A3               	movwf	0+(?_waitFor)+01h
  7204  0CDF  309D               	movlw	(09Dh)
  7205  0CE0  160A  118A  27AE   	fcall	_waitFor
              120A  158A         
  7206                           	line	275
  7207                           ;drive.c: 275: }else
  7208  0CE5  2CF3               	goto	l5872
  7209                           	
  7210  0CE6                     l5871:	
  7211                           	line	277
  7212                           	
  7213  0CE6                     l10807:	
  7214                           ;drive.c: 276: {
  7215                           ;drive.c: 277: waitFor(157,0,90);
  7216  0CE6  1283               	bcf	status, 5	;RP0=0, select bank0
  7217  0CE7  1303               	bcf	status, 6	;RP1=0, select bank0
  7218  0CE8  01A2               	clrf	(?_waitFor)
  7219  0CE9  305A               	movlw	(05Ah)
  7220  0CEA  00A9               	movwf	(??_turnLeft90+0)+0
  7221  0CEB  0829               	movf	(??_turnLeft90+0)+0,w
  7222  0CEC  00A3               	movwf	0+(?_waitFor)+01h
  7223  0CED  309D               	movlw	(09Dh)
  7224  0CEE  160A  118A  27AE   	fcall	_waitFor
              120A  158A         
  7225                           	line	278
  7226                           	
  7227  0CF3                     l5872:	
  7228                           	line	279
  7229                           ;drive.c: 278: }
  7230                           ;drive.c: 279: drive(0, 0, 0, 0);
  7231  0CF3  1283               	bcf	status, 5	;RP0=0, select bank0
  7232  0CF4  1303               	bcf	status, 6	;RP1=0, select bank0
  7233  0CF5  01A2               	clrf	(?_drive)
  7234  0CF6  01A3               	clrf	0+(?_drive)+01h
  7235  0CF7  01A4               	clrf	0+(?_drive)+02h
  7236  0CF8  3000               	movlw	(0)
  7237  0CF9  120A  158A  2130   	fcall	_drive
              120A  158A         
  7238                           	line	280
  7239                           	
  7240  0CFE                     l10809:	
  7241                           ;drive.c: 280: _delay((unsigned long)((3000)*(20000000/4000.0)));
  7242                           	opt asmopt_off
  7243  0CFE  304D               movlw  77
  7244  0CFF  1283               	bcf	status, 5	;RP0=0, select bank0
  7245  0D00  1303               	bcf	status, 6	;RP1=0, select bank0
  7246  0D01  00AB               movwf	((??_turnLeft90+0)+0+2),f
  7247  0D02  3019               movlw	25
  7248  0D03  00AA               movwf	((??_turnLeft90+0)+0+1),f
  7249  0D04  309A               	movlw	154
  7250  0D05  00A9               movwf	((??_turnLeft90+0)+0),f
  7251  0D06                     u4887:
  7252  0D06  0BA9               	decfsz	((??_turnLeft90+0)+0),f
  7253  0D07  2D06               	goto	u4887
  7254  0D08  0BAA               	decfsz	((??_turnLeft90+0)+0+1),f
  7255  0D09  2D06               	goto	u4887
  7256  0D0A  0BAB               	decfsz	((??_turnLeft90+0)+0+2),f
  7257  0D0B  2D06               	goto	u4887
  7258  0D0C  2D0D               	nop2
  7259                           opt asmopt_on
  7260                           
  7261                           	line	281
  7262                           	
  7263  0D0D                     l5873:	
  7264  0D0D  0008               	return
  7265                           	opt stack 0
  7266                           GLOBAL	__end_of_turnLeft90
  7267  0D0E                     	__end_of_turnLeft90:
  7268 ;; =============== function _turnLeft90 ends ============
  7269                           
  7270                           	signat	_turnLeft90,88
  7271                           	global	_turnRight90
  7272                           psect	text1258,local,class=CODE,delta=2
  7273                           global __ptext1258
  7274  0A8E                     __ptext1258:
  7275                           
  7276 ;; *************** function _turnRight90 *****************
  7277 ;; Defined at:
  7278 ;;		line 284 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  7279 ;; Parameters:    Size  Location     Type
  7280 ;;		None
  7281 ;; Auto vars:     Size  Location     Type
  7282 ;;		None
  7283 ;; Return value:  Size  Location     Type
  7284 ;;		None               void
  7285 ;; Registers used:
  7286 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7287 ;; Tracked objects:
  7288 ;;		On entry : 0/0
  7289 ;;		On exit  : 0/0
  7290 ;;		Unchanged: 0/0
  7291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7292 ;;      Params:         0       0       0       0       0
  7293 ;;      Locals:         0       0       0       0       0
  7294 ;;      Temps:          0       3       0       0       0
  7295 ;;      Totals:         0       3       0       0       0
  7296 ;;Total ram usage:        3 bytes
  7297 ;; Hardware stack levels used:    1
  7298 ;; Hardware stack levels required when called:    3
  7299 ;; This function calls:
  7300 ;;		_drive
  7301 ;;		_waitFor
  7302 ;; This function is called by:
  7303 ;;		_driveForDistance
  7304 ;;		_goRight
  7305 ;; This function uses a non-reentrant model
  7306 ;;
  7307                           psect	text1258
  7308                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  7309                           	line	284
  7310                           	global	__size_of_turnRight90
  7311  003F                     	__size_of_turnRight90	equ	__end_of_turnRight90-_turnRight90
  7312                           	
  7313  0A8E                     _turnRight90:	
  7314                           	opt	stack 2
  7315                           ; Regs used in _turnRight90: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7316                           	line	285
  7317                           	
  7318  0A8E                     l10795:	
  7319                           ;drive.c: 285: drive(0, 50, 255, 255);
  7320  0A8E  3032               	movlw	(032h)
  7321  0A8F  1283               	bcf	status, 5	;RP0=0, select bank0
  7322  0A90  1303               	bcf	status, 6	;RP1=0, select bank0
  7323  0A91  00A9               	movwf	(??_turnRight90+0)+0
  7324  0A92  0829               	movf	(??_turnRight90+0)+0,w
  7325  0A93  00A2               	movwf	(?_drive)
  7326  0A94  30FF               	movlw	(0FFh)
  7327  0A95  00AA               	movwf	(??_turnRight90+1)+0
  7328  0A96  082A               	movf	(??_turnRight90+1)+0,w
  7329  0A97  00A3               	movwf	0+(?_drive)+01h
  7330  0A98  30FF               	movlw	(0FFh)
  7331  0A99  00AB               	movwf	(??_turnRight90+2)+0
  7332  0A9A  082B               	movf	(??_turnRight90+2)+0,w
  7333  0A9B  00A4               	movwf	0+(?_drive)+02h
  7334  0A9C  3000               	movlw	(0)
  7335  0A9D  120A  158A  2130   	fcall	_drive
              120A  158A         
  7336                           	line	286
  7337                           ;drive.c: 286: waitFor(157,255,174);
  7338  0AA2  30FF               	movlw	(0FFh)
  7339  0AA3  1283               	bcf	status, 5	;RP0=0, select bank0
  7340  0AA4  1303               	bcf	status, 6	;RP1=0, select bank0
  7341  0AA5  00A9               	movwf	(??_turnRight90+0)+0
  7342  0AA6  0829               	movf	(??_turnRight90+0)+0,w
  7343  0AA7  00A2               	movwf	(?_waitFor)
  7344  0AA8  30AE               	movlw	(0AEh)
  7345  0AA9  00AA               	movwf	(??_turnRight90+1)+0
  7346  0AAA  082A               	movf	(??_turnRight90+1)+0,w
  7347  0AAB  00A3               	movwf	0+(?_waitFor)+01h
  7348  0AAC  309D               	movlw	(09Dh)
  7349  0AAD  160A  118A  27AE   	fcall	_waitFor
              120A  158A         
  7350                           	line	287
  7351                           ;drive.c: 287: drive(0, 0, 0, 0);
  7352  0AB2  1283               	bcf	status, 5	;RP0=0, select bank0
  7353  0AB3  1303               	bcf	status, 6	;RP1=0, select bank0
  7354  0AB4  01A2               	clrf	(?_drive)
  7355  0AB5  01A3               	clrf	0+(?_drive)+01h
  7356  0AB6  01A4               	clrf	0+(?_drive)+02h
  7357  0AB7  3000               	movlw	(0)
  7358  0AB8  120A  158A  2130   	fcall	_drive
              120A  158A         
  7359                           	line	288
  7360                           	
  7361  0ABD                     l10797:	
  7362                           ;drive.c: 288: _delay((unsigned long)((3000)*(20000000/4000.0)));
  7363                           	opt asmopt_off
  7364  0ABD  304D               movlw  77
  7365  0ABE  1283               	bcf	status, 5	;RP0=0, select bank0
  7366  0ABF  1303               	bcf	status, 6	;RP1=0, select bank0
  7367  0AC0  00AB               movwf	((??_turnRight90+0)+0+2),f
  7368  0AC1  3019               movlw	25
  7369  0AC2  00AA               movwf	((??_turnRight90+0)+0+1),f
  7370  0AC3  309A               	movlw	154
  7371  0AC4  00A9               movwf	((??_turnRight90+0)+0),f
  7372  0AC5                     u4897:
  7373  0AC5  0BA9               	decfsz	((??_turnRight90+0)+0),f
  7374  0AC6  2AC5               	goto	u4897
  7375  0AC7  0BAA               	decfsz	((??_turnRight90+0)+0+1),f
  7376  0AC8  2AC5               	goto	u4897
  7377  0AC9  0BAB               	decfsz	((??_turnRight90+0)+0+2),f
  7378  0ACA  2AC5               	goto	u4897
  7379  0ACB  2ACC               	nop2
  7380                           opt asmopt_on
  7381                           
  7382                           	line	289
  7383                           	
  7384  0ACC                     l5876:	
  7385  0ACC  0008               	return
  7386                           	opt stack 0
  7387                           GLOBAL	__end_of_turnRight90
  7388  0ACD                     	__end_of_turnRight90:
  7389 ;; =============== function _turnRight90 ends ============
  7390                           
  7391                           	signat	_turnRight90,88
  7392                           	global	_initSongs
  7393                           psect	text1259,local,class=CODE,delta=2
  7394                           global __ptext1259
  7395  0D0E                     __ptext1259:
  7396                           
  7397 ;; *************** function _initSongs *****************
  7398 ;; Defined at:
  7399 ;;		line 32 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\songs.c"
  7400 ;; Parameters:    Size  Location     Type
  7401 ;;		None
  7402 ;; Auto vars:     Size  Location     Type
  7403 ;;		None
  7404 ;; Return value:  Size  Location     Type
  7405 ;;		None               void
  7406 ;; Registers used:
  7407 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7408 ;; Tracked objects:
  7409 ;;		On entry : 0/0
  7410 ;;		On exit  : 0/0
  7411 ;;		Unchanged: 0/0
  7412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7413 ;;      Params:         0       0       0       0       0
  7414 ;;      Locals:         0       0       0       0       0
  7415 ;;      Temps:          0       0       0       0       0
  7416 ;;      Totals:         0       0       0       0       0
  7417 ;;Total ram usage:        0 bytes
  7418 ;; Hardware stack levels used:    1
  7419 ;; Hardware stack levels required when called:    3
  7420 ;; This function calls:
  7421 ;;		_ser_putArr
  7422 ;; This function is called by:
  7423 ;;		_init
  7424 ;; This function uses a non-reentrant model
  7425 ;;
  7426                           psect	text1259
  7427                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\songs.c"
  7428                           	line	32
  7429                           	global	__size_of_initSongs
  7430  005B                     	__size_of_initSongs	equ	__end_of_initSongs-_initSongs
  7431                           	
  7432  0D0E                     _initSongs:	
  7433                           	opt	stack 3
  7434                           ; Regs used in _initSongs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7435                           	line	33
  7436                           	
  7437  0D0E                     l10793:	
  7438                           ;songs.c: 33: ser_putArr(finalCountdown, 27);
  7439  0D0E  30AD               	movlw	(_finalCountdown&0ffh)
  7440  0D0F  1283               	bcf	status, 5	;RP0=0, select bank0
  7441  0D10  1303               	bcf	status, 6	;RP1=0, select bank0
  7442  0D11  00A2               	movwf	(?_ser_putArr)
  7443  0D12  3001               	movlw	(0x3/2)
  7444  0D13  00A3               	movwf	(?_ser_putArr+1)
  7445  0D14  301B               	movlw	low(01Bh)
  7446  0D15  00A4               	movwf	0+(?_ser_putArr)+02h
  7447  0D16  3000               	movlw	high(01Bh)
  7448  0D17  00A5               	movwf	(0+(?_ser_putArr)+02h)+1
  7449  0D18  120A  158A  219F   	fcall	_ser_putArr
              120A  158A         
  7450                           	line	34
  7451                           ;songs.c: 34: ser_putArr(superMarioBros, 25);
  7452  0D1D  30A0               	movlw	(_superMarioBros&0ffh)
  7453  0D1E  1283               	bcf	status, 5	;RP0=0, select bank0
  7454  0D1F  1303               	bcf	status, 6	;RP1=0, select bank0
  7455  0D20  00A2               	movwf	(?_ser_putArr)
  7456  0D21  3000               	movlw	(0x1/2)
  7457  0D22  00A3               	movwf	(?_ser_putArr+1)
  7458  0D23  3019               	movlw	low(019h)
  7459  0D24  00A4               	movwf	0+(?_ser_putArr)+02h
  7460  0D25  3000               	movlw	high(019h)
  7461  0D26  00A5               	movwf	(0+(?_ser_putArr)+02h)+1
  7462  0D27  120A  158A  219F   	fcall	_ser_putArr
              120A  158A         
  7463                           	line	35
  7464                           ;songs.c: 35: ser_putArr(lookingForU2, 29);
  7465  0D2C  3090               	movlw	(_lookingForU2&0ffh)
  7466  0D2D  1283               	bcf	status, 5	;RP0=0, select bank0
  7467  0D2E  1303               	bcf	status, 6	;RP1=0, select bank0
  7468  0D2F  00A2               	movwf	(?_ser_putArr)
  7469  0D30  3001               	movlw	(0x3/2)
  7470  0D31  00A3               	movwf	(?_ser_putArr+1)
  7471  0D32  301D               	movlw	low(01Dh)
  7472  0D33  00A4               	movwf	0+(?_ser_putArr)+02h
  7473  0D34  3000               	movlw	high(01Dh)
  7474  0D35  00A5               	movwf	(0+(?_ser_putArr)+02h)+1
  7475  0D36  120A  158A  219F   	fcall	_ser_putArr
              120A  158A         
  7476                           	line	36
  7477                           ;songs.c: 36: ser_putArr(champions, 21);
  7478  0D3B  30B9               	movlw	(_champions&0ffh)
  7479  0D3C  1283               	bcf	status, 5	;RP0=0, select bank0
  7480  0D3D  1303               	bcf	status, 6	;RP1=0, select bank0
  7481  0D3E  00A2               	movwf	(?_ser_putArr)
  7482  0D3F  3000               	movlw	(0x1/2)
  7483  0D40  00A3               	movwf	(?_ser_putArr+1)
  7484  0D41  3015               	movlw	low(015h)
  7485  0D42  00A4               	movwf	0+(?_ser_putArr)+02h
  7486  0D43  3000               	movlw	high(015h)
  7487  0D44  00A5               	movwf	(0+(?_ser_putArr)+02h)+1
  7488  0D45  120A  158A  219F   	fcall	_ser_putArr
              120A  158A         
  7489                           	line	37
  7490                           ;songs.c: 37: ser_putArr(beep, 5);
  7491  0D4A  3062               	movlw	(_beep&0ffh)
  7492  0D4B  1283               	bcf	status, 5	;RP0=0, select bank0
  7493  0D4C  1303               	bcf	status, 6	;RP1=0, select bank0
  7494  0D4D  00A2               	movwf	(?_ser_putArr)
  7495  0D4E  3000               	movlw	(0x0/2)
  7496  0D4F  00A3               	movwf	(?_ser_putArr+1)
  7497  0D50  3005               	movlw	low(05h)
  7498  0D51  00A4               	movwf	0+(?_ser_putArr)+02h
  7499  0D52  3000               	movlw	high(05h)
  7500  0D53  00A5               	movwf	(0+(?_ser_putArr)+02h)+1
  7501  0D54  120A  158A  219F   	fcall	_ser_putArr
              120A  158A         
  7502                           	line	38
  7503                           ;songs.c: 38: ser_putArr(longbeep, 6);
  7504  0D59  3067               	movlw	(_longbeep&0ffh)
  7505  0D5A  1283               	bcf	status, 5	;RP0=0, select bank0
  7506  0D5B  1303               	bcf	status, 6	;RP1=0, select bank0
  7507  0D5C  00A2               	movwf	(?_ser_putArr)
  7508  0D5D  3000               	movlw	(0x0/2)
  7509  0D5E  00A3               	movwf	(?_ser_putArr+1)
  7510  0D5F  3006               	movlw	low(06h)
  7511  0D60  00A4               	movwf	0+(?_ser_putArr)+02h
  7512  0D61  3000               	movlw	high(06h)
  7513  0D62  00A5               	movwf	(0+(?_ser_putArr)+02h)+1
  7514  0D63  120A  158A  219F   	fcall	_ser_putArr
              120A  158A         
  7515                           	line	39
  7516                           	
  7517  0D68                     l4377:	
  7518  0D68  0008               	return
  7519                           	opt stack 0
  7520                           GLOBAL	__end_of_initSongs
  7521  0D69                     	__end_of_initSongs:
  7522 ;; =============== function _initSongs ends ============
  7523                           
  7524                           	signat	_initSongs,88
  7525                           	global	_lcd_init
  7526                           psect	text1260,local,class=CODE,delta=2
  7527                           global __ptext1260
  7528  0848                     __ptext1260:
  7529                           
  7530 ;; *************** function _lcd_init *****************
  7531 ;; Defined at:
  7532 ;;		line 78 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\lcd.c"
  7533 ;; Parameters:    Size  Location     Type
  7534 ;;		None
  7535 ;; Auto vars:     Size  Location     Type
  7536 ;;		None
  7537 ;; Return value:  Size  Location     Type
  7538 ;;		None               void
  7539 ;; Registers used:
  7540 ;;		wreg, status,2, status,0, pclath, cstack
  7541 ;; Tracked objects:
  7542 ;;		On entry : 0/0
  7543 ;;		On exit  : 0/0
  7544 ;;		Unchanged: 0/0
  7545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7546 ;;      Params:         0       0       0       0       0
  7547 ;;      Locals:         0       0       0       0       0
  7548 ;;      Temps:          0       0       0       0       0
  7549 ;;      Totals:         0       0       0       0       0
  7550 ;;Total ram usage:        0 bytes
  7551 ;; Hardware stack levels used:    1
  7552 ;; Hardware stack levels required when called:    2
  7553 ;; This function calls:
  7554 ;;		_lcd_write_control
  7555 ;; This function is called by:
  7556 ;;		_init
  7557 ;; This function uses a non-reentrant model
  7558 ;;
  7559                           psect	text1260
  7560                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\lcd.c"
  7561                           	line	78
  7562                           	global	__size_of_lcd_init
  7563  002B                     	__size_of_lcd_init	equ	__end_of_lcd_init-_lcd_init
  7564                           	
  7565  0848                     _lcd_init:	
  7566                           	opt	stack 4
  7567                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  7568                           	line	82
  7569                           	
  7570  0848                     l10773:	
  7571                           ;lcd.c: 82: ADCON1 = 0b00000010;
  7572  0848  3002               	movlw	(02h)
  7573  0849  1683               	bsf	status, 5	;RP0=1, select bank1
  7574  084A  1303               	bcf	status, 6	;RP1=0, select bank1
  7575  084B  009F               	movwf	(159)^080h	;volatile
  7576                           	line	85
  7577                           	
  7578  084C                     l10775:	
  7579                           ;lcd.c: 85: PORTD = 0;
  7580  084C  1283               	bcf	status, 5	;RP0=0, select bank0
  7581  084D  1303               	bcf	status, 6	;RP1=0, select bank0
  7582  084E  0188               	clrf	(8)	;volatile
  7583                           	line	86
  7584                           	
  7585  084F                     l10777:	
  7586                           ;lcd.c: 86: PORTE = 0;
  7587  084F  0189               	clrf	(9)	;volatile
  7588                           	line	88
  7589                           	
  7590  0850                     l10779:	
  7591                           ;lcd.c: 88: TRISD = 0b00000000;
  7592  0850  1683               	bsf	status, 5	;RP0=1, select bank1
  7593  0851  1303               	bcf	status, 6	;RP1=0, select bank1
  7594  0852  0188               	clrf	(136)^080h	;volatile
  7595                           	line	89
  7596                           	
  7597  0853                     l10781:	
  7598                           ;lcd.c: 89: TRISE = 0b00000000;
  7599  0853  0189               	clrf	(137)^080h	;volatile
  7600                           	line	92
  7601                           	
  7602  0854                     l10783:	
  7603                           ;lcd.c: 92: lcd_write_control(0b00000001);
  7604  0854  3001               	movlw	(01h)
  7605  0855  160A  118A  25F7   	fcall	_lcd_write_control
              120A  158A         
  7606                           	line	93
  7607                           	
  7608  085A                     l10785:	
  7609                           ;lcd.c: 93: lcd_write_control(0b00111000);
  7610  085A  3038               	movlw	(038h)
  7611  085B  160A  118A  25F7   	fcall	_lcd_write_control
              120A  158A         
  7612                           	line	94
  7613                           	
  7614  0860                     l10787:	
  7615                           ;lcd.c: 94: lcd_write_control(0b00001100);
  7616  0860  300C               	movlw	(0Ch)
  7617  0861  160A  118A  25F7   	fcall	_lcd_write_control
              120A  158A         
  7618                           	line	95
  7619                           	
  7620  0866                     l10789:	
  7621                           ;lcd.c: 95: lcd_write_control(0b00000110);
  7622  0866  3006               	movlw	(06h)
  7623  0867  160A  118A  25F7   	fcall	_lcd_write_control
              120A  158A         
  7624                           	line	96
  7625                           	
  7626  086C                     l10791:	
  7627                           ;lcd.c: 96: lcd_write_control(0b00000010);
  7628  086C  3002               	movlw	(02h)
  7629  086D  160A  118A  25F7   	fcall	_lcd_write_control
              120A  158A         
  7630                           	line	98
  7631                           	
  7632  0872                     l2153:	
  7633  0872  0008               	return
  7634                           	opt stack 0
  7635                           GLOBAL	__end_of_lcd_init
  7636  0873                     	__end_of_lcd_init:
  7637 ;; =============== function _lcd_init ends ============
  7638                           
  7639                           	signat	_lcd_init,88
  7640                           	global	_lcd_write_1_digit_bcd
  7641                           psect	text1261,local,class=CODE,delta=2
  7642                           global __ptext1261
  7643  07F4                     __ptext1261:
  7644                           
  7645 ;; *************** function _lcd_write_1_digit_bcd *****************
  7646 ;; Defined at:
  7647 ;;		line 44 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\lcd.c"
  7648 ;; Parameters:    Size  Location     Type
  7649 ;;  data            1    wreg     unsigned char 
  7650 ;; Auto vars:     Size  Location     Type
  7651 ;;  data            1    3[BANK0 ] unsigned char 
  7652 ;; Return value:  Size  Location     Type
  7653 ;;		None               void
  7654 ;; Registers used:
  7655 ;;		wreg, status,2, status,0, pclath, cstack
  7656 ;; Tracked objects:
  7657 ;;		On entry : 0/0
  7658 ;;		On exit  : 0/0
  7659 ;;		Unchanged: 0/0
  7660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7661 ;;      Params:         0       0       0       0       0
  7662 ;;      Locals:         0       1       0       0       0
  7663 ;;      Temps:          0       0       0       0       0
  7664 ;;      Totals:         0       1       0       0       0
  7665 ;;Total ram usage:        1 bytes
  7666 ;; Hardware stack levels used:    1
  7667 ;; Hardware stack levels required when called:    2
  7668 ;; This function calls:
  7669 ;;		_lcd_write_data
  7670 ;; This function is called by:
  7671 ;;		_findFinalDestination
  7672 ;;		_lookForVictim
  7673 ;;		_updateLocation
  7674 ;; This function uses a non-reentrant model
  7675 ;;
  7676                           psect	text1261
  7677                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\lcd.c"
  7678                           	line	44
  7679                           	global	__size_of_lcd_write_1_digit_bcd
  7680  000B                     	__size_of_lcd_write_1_digit_bcd	equ	__end_of_lcd_write_1_digit_bcd-_lcd_write_1_digit_b
                                 cd
  7681                           	
  7682  07F4                     _lcd_write_1_digit_bcd:	
  7683                           	opt	stack 4
  7684                           ; Regs used in _lcd_write_1_digit_bcd: [wreg+status,2+status,0+pclath+cstack]
  7685                           ;lcd_write_1_digit_bcd@data stored from wreg
  7686  07F4  1283               	bcf	status, 5	;RP0=0, select bank0
  7687  07F5  1303               	bcf	status, 6	;RP1=0, select bank0
  7688  07F6  00A3               	movwf	(lcd_write_1_digit_bcd@data)
  7689                           	line	45
  7690                           	
  7691  07F7                     l10771:	
  7692                           ;lcd.c: 45: lcd_write_data(data + 48);
  7693  07F7  0823               	movf	(lcd_write_1_digit_bcd@data),w
  7694  07F8  3E30               	addlw	030h
  7695  07F9  160A  118A  25D1   	fcall	_lcd_write_data
              120A  118A         
  7696                           	line	46
  7697                           	
  7698  07FE                     l2141:	
  7699  07FE  0008               	return
  7700                           	opt stack 0
  7701                           GLOBAL	__end_of_lcd_write_1_digit_bcd
  7702  07FF                     	__end_of_lcd_write_1_digit_bcd:
  7703 ;; =============== function _lcd_write_1_digit_bcd ends ============
  7704                           
  7705                           	signat	_lcd_write_1_digit_bcd,4216
  7706                           	global	_lcd_set_cursor
  7707                           psect	text1262,local,class=CODE,delta=2
  7708                           global __ptext1262
  7709  1587                     __ptext1262:
  7710                           
  7711 ;; *************** function _lcd_set_cursor *****************
  7712 ;; Defined at:
  7713 ;;		line 32 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\lcd.c"
  7714 ;; Parameters:    Size  Location     Type
  7715 ;;  address         1    wreg     unsigned char 
  7716 ;; Auto vars:     Size  Location     Type
  7717 ;;  address         1    3[BANK0 ] unsigned char 
  7718 ;; Return value:  Size  Location     Type
  7719 ;;		None               void
  7720 ;; Registers used:
  7721 ;;		wreg, status,2, status,0, pclath, cstack
  7722 ;; Tracked objects:
  7723 ;;		On entry : 0/0
  7724 ;;		On exit  : 0/0
  7725 ;;		Unchanged: 0/0
  7726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7727 ;;      Params:         0       0       0       0       0
  7728 ;;      Locals:         0       1       0       0       0
  7729 ;;      Temps:          0       0       0       0       0
  7730 ;;      Totals:         0       1       0       0       0
  7731 ;;Total ram usage:        1 bytes
  7732 ;; Hardware stack levels used:    1
  7733 ;; Hardware stack levels required when called:    2
  7734 ;; This function calls:
  7735 ;;		_lcd_write_control
  7736 ;; This function is called by:
  7737 ;;		_findFinalDestination
  7738 ;;		_goBackward
  7739 ;;		_goForward
  7740 ;;		_goLeft
  7741 ;;		_goReverse
  7742 ;;		_goRight
  7743 ;;		_checkForFinalDestination
  7744 ;;		_lookForVictim
  7745 ;;		_findWalls
  7746 ;;		_updateLocation
  7747 ;;		_main
  7748 ;; This function uses a non-reentrant model
  7749 ;;
  7750                           psect	text1262
  7751                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\lcd.c"
  7752                           	line	32
  7753                           	global	__size_of_lcd_set_cursor
  7754  000B                     	__size_of_lcd_set_cursor	equ	__end_of_lcd_set_cursor-_lcd_set_cursor
  7755                           	
  7756  1587                     _lcd_set_cursor:	
  7757                           	opt	stack 4
  7758                           ; Regs used in _lcd_set_cursor: [wreg+status,2+status,0+pclath+cstack]
  7759                           ;lcd_set_cursor@address stored from wreg
  7760  1587  1283               	bcf	status, 5	;RP0=0, select bank0
  7761  1588  1303               	bcf	status, 6	;RP1=0, select bank0
  7762  1589  00A3               	movwf	(lcd_set_cursor@address)
  7763                           	line	33
  7764                           	
  7765  158A                     l10767:	
  7766                           ;lcd.c: 33: address |= 0b10000000;
  7767  158A  17A3               	bsf	(lcd_set_cursor@address)+(7/8),(7)&7
  7768                           	line	34
  7769                           	
  7770  158B                     l10769:	
  7771                           ;lcd.c: 34: lcd_write_control(address);
  7772  158B  0823               	movf	(lcd_set_cursor@address),w
  7773  158C  160A  118A  25F7   	fcall	_lcd_write_control
              160A  118A         
  7774                           	line	35
  7775                           	
  7776  1591                     l2132:	
  7777  1591  0008               	return
  7778                           	opt stack 0
  7779                           GLOBAL	__end_of_lcd_set_cursor
  7780  1592                     	__end_of_lcd_set_cursor:
  7781 ;; =============== function _lcd_set_cursor ends ============
  7782                           
  7783                           	signat	_lcd_set_cursor,4216
  7784                           	global	_addNewData
  7785                           psect	text1263,local,class=CODE,delta=2
  7786                           global __ptext1263
  7787  1670                     __ptext1263:
  7788                           
  7789 ;; *************** function _addNewData *****************
  7790 ;; Defined at:
  7791 ;;		line 94 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\eeprom.c"
  7792 ;; Parameters:    Size  Location     Type
  7793 ;;  data            1    wreg     unsigned char 
  7794 ;; Auto vars:     Size  Location     Type
  7795 ;;  data            1    8[BANK0 ] unsigned char 
  7796 ;; Return value:  Size  Location     Type
  7797 ;;		None               void
  7798 ;; Registers used:
  7799 ;;		wreg, status,2, status,0, pclath, cstack
  7800 ;; Tracked objects:
  7801 ;;		On entry : 0/0
  7802 ;;		On exit  : 0/0
  7803 ;;		Unchanged: 0/0
  7804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7805 ;;      Params:         0       0       0       0       0
  7806 ;;      Locals:         0       1       0       0       0
  7807 ;;      Temps:          0       1       0       0       0
  7808 ;;      Totals:         0       2       0       0       0
  7809 ;;Total ram usage:        2 bytes
  7810 ;; Hardware stack levels used:    1
  7811 ;; Hardware stack levels required when called:    3
  7812 ;; This function calls:
  7813 ;;		_writeEEPROM
  7814 ;; This function is called by:
  7815 ;;		_updateMapData
  7816 ;;		_writeEEPROMTestData
  7817 ;; This function uses a non-reentrant model
  7818 ;;
  7819                           psect	text1263
  7820                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\eeprom.c"
  7821                           	line	94
  7822                           	global	__size_of_addNewData
  7823  001E                     	__size_of_addNewData	equ	__end_of_addNewData-_addNewData
  7824                           	
  7825  1670                     _addNewData:	
  7826                           	opt	stack 3
  7827                           ; Regs used in _addNewData: [wreg+status,2+status,0+pclath+cstack]
  7828                           ;addNewData@data stored from wreg
  7829  1670  1283               	bcf	status, 5	;RP0=0, select bank0
  7830  1671  1303               	bcf	status, 6	;RP1=0, select bank0
  7831  1672  00A8               	movwf	(addNewData@data)
  7832                           	line	95
  7833                           	
  7834  1673                     l10761:	
  7835                           ;eeprom.c: 95: writeEEPROM(data,0,addressCount + 1);
  7836  1673  01A1               	clrf	(?_writeEEPROM)
  7837  1674  0850               	movf	(_addressCount),w
  7838  1675  3E01               	addlw	01h
  7839  1676  00A7               	movwf	(??_addNewData+0)+0
  7840  1677  0827               	movf	(??_addNewData+0)+0,w
  7841  1678  00A2               	movwf	0+(?_writeEEPROM)+01h
  7842  1679  0828               	movf	(addNewData@data),w
  7843  167A  120A  158A  2350   	fcall	_writeEEPROM
              160A  118A         
  7844                           	line	96
  7845                           	
  7846  167F                     l10763:	
  7847                           ;eeprom.c: 96: addressCount ++;
  7848  167F  3001               	movlw	(01h)
  7849  1680  1283               	bcf	status, 5	;RP0=0, select bank0
  7850  1681  1303               	bcf	status, 6	;RP1=0, select bank0
  7851  1682  00A7               	movwf	(??_addNewData+0)+0
  7852  1683  0827               	movf	(??_addNewData+0)+0,w
  7853  1684  07D0               	addwf	(_addressCount),f
  7854                           	line	97
  7855                           	
  7856  1685                     l10765:	
  7857                           ;eeprom.c: 97: writeEEPROM(addressCount,0,0);
  7858  1685  01A1               	clrf	(?_writeEEPROM)
  7859  1686  01A2               	clrf	0+(?_writeEEPROM)+01h
  7860  1687  0850               	movf	(_addressCount),w
  7861  1688  120A  158A  2350   	fcall	_writeEEPROM
              160A  118A         
  7862                           	line	98
  7863                           	
  7864  168D                     l1424:	
  7865  168D  0008               	return
  7866                           	opt stack 0
  7867                           GLOBAL	__end_of_addNewData
  7868  168E                     	__end_of_addNewData:
  7869 ;; =============== function _addNewData ends ============
  7870                           
  7871                           	signat	_addNewData,4216
  7872                           	global	_lcd_write_string
  7873                           psect	text1264,local,class=CODE,delta=2
  7874                           global __ptext1264
  7875  1714                     __ptext1264:
  7876                           
  7877 ;; *************** function _lcd_write_string *****************
  7878 ;; Defined at:
  7879 ;;		line 38 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\lcd.c"
  7880 ;; Parameters:    Size  Location     Type
  7881 ;;  s               1    wreg     PTR const unsigned char 
  7882 ;;		 -> STR_4(17), STR_3(17), STR_2(14), STR_1(15), 
  7883 ;; Auto vars:     Size  Location     Type
  7884 ;;  s               1    4[BANK0 ] PTR const unsigned char 
  7885 ;;		 -> STR_4(17), STR_3(17), STR_2(14), STR_1(15), 
  7886 ;; Return value:  Size  Location     Type
  7887 ;;		None               void
  7888 ;; Registers used:
  7889 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7890 ;; Tracked objects:
  7891 ;;		On entry : 0/0
  7892 ;;		On exit  : 0/0
  7893 ;;		Unchanged: 0/0
  7894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7895 ;;      Params:         0       0       0       0       0
  7896 ;;      Locals:         0       1       0       0       0
  7897 ;;      Temps:          0       1       0       0       0
  7898 ;;      Totals:         0       2       0       0       0
  7899 ;;Total ram usage:        2 bytes
  7900 ;; Hardware stack levels used:    1
  7901 ;; Hardware stack levels required when called:    2
  7902 ;; This function calls:
  7903 ;;		_lcd_write_data
  7904 ;; This function is called by:
  7905 ;;		_main
  7906 ;;		_testEEPROM
  7907 ;; This function uses a non-reentrant model
  7908 ;;
  7909                           psect	text1264
  7910                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\lcd.c"
  7911                           	line	38
  7912                           	global	__size_of_lcd_write_string
  7913  0025                     	__size_of_lcd_write_string	equ	__end_of_lcd_write_string-_lcd_write_string
  7914                           	
  7915  1714                     _lcd_write_string:	
  7916                           	opt	stack 5
  7917                           ; Regs used in _lcd_write_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7918                           ;lcd_write_string@s stored from wreg
  7919  1714  1283               	bcf	status, 5	;RP0=0, select bank0
  7920  1715  1303               	bcf	status, 6	;RP1=0, select bank0
  7921  1716  00A4               	movwf	(lcd_write_string@s)
  7922                           	line	40
  7923                           	
  7924  1717                     l10753:	
  7925                           ;lcd.c: 40: while(*s) lcd_write_data(*s++);
  7926  1717  2F2B               	goto	l10759
  7927                           	
  7928  1718                     l2136:	
  7929                           	
  7930  1718                     l10755:	
  7931  1718  0824               	movf	(lcd_write_string@s),w
  7932  1719  0084               	movwf	fsr0
  7933  171A  120A  158A  2000   	fcall	stringdir
              160A  118A         
  7934  171F  160A  118A  25D1   	fcall	_lcd_write_data
              160A  118A         
  7935                           	
  7936  1724                     l10757:	
  7937  1724  3001               	movlw	(01h)
  7938  1725  1283               	bcf	status, 5	;RP0=0, select bank0
  7939  1726  1303               	bcf	status, 6	;RP1=0, select bank0
  7940  1727  00A3               	movwf	(??_lcd_write_string+0)+0
  7941  1728  0823               	movf	(??_lcd_write_string+0)+0,w
  7942  1729  07A4               	addwf	(lcd_write_string@s),f
  7943  172A  2F2B               	goto	l10759
  7944                           	
  7945  172B                     l2135:	
  7946                           	
  7947  172B                     l10759:	
  7948  172B  0824               	movf	(lcd_write_string@s),w
  7949  172C  0084               	movwf	fsr0
  7950  172D  120A  158A  2000   	fcall	stringdir
              160A  118A         
  7951  1732  3800               	iorlw	0
  7952  1733  1D03               	skipz
  7953  1734  2F36               	goto	u4121
  7954  1735  2F37               	goto	u4120
  7955  1736                     u4121:
  7956  1736  2F18               	goto	l10755
  7957  1737                     u4120:
  7958  1737  2F38               	goto	l2138
  7959                           	
  7960  1738                     l2137:	
  7961                           	line	41
  7962                           	
  7963  1738                     l2138:	
  7964  1738  0008               	return
  7965                           	opt stack 0
  7966                           GLOBAL	__end_of_lcd_write_string
  7967  1739                     	__end_of_lcd_write_string:
  7968 ;; =============== function _lcd_write_string ends ============
  7969                           
  7970                           	signat	_lcd_write_string,4216
  7971                           	global	_adc_read_channel
  7972                           psect	text1265,local,class=CODE,delta=2
  7973                           global __ptext1265
  7974  0ACD                     __ptext1265:
  7975                           
  7976 ;; *************** function _adc_read_channel *****************
  7977 ;; Defined at:
  7978 ;;		line 7 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\adc.c"
  7979 ;; Parameters:    Size  Location     Type
  7980 ;;  channel         1    wreg     unsigned char 
  7981 ;; Auto vars:     Size  Location     Type
  7982 ;;  channel         1   30[BANK0 ] unsigned char 
  7983 ;; Return value:  Size  Location     Type
  7984 ;;                  2   27[BANK0 ] int 
  7985 ;; Registers used:
  7986 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7987 ;; Tracked objects:
  7988 ;;		On entry : 0/0
  7989 ;;		On exit  : 0/0
  7990 ;;		Unchanged: 0/0
  7991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7992 ;;      Params:         0       2       0       0       0
  7993 ;;      Locals:         0       1       0       0       0
  7994 ;;      Temps:          0       1       0       0       0
  7995 ;;      Totals:         0       4       0       0       0
  7996 ;;Total ram usage:        4 bytes
  7997 ;; Hardware stack levels used:    1
  7998 ;; Hardware stack levels required when called:    3
  7999 ;; This function calls:
  8000 ;;		_adc_read
  8001 ;; This function is called by:
  8002 ;;		_readIR
  8003 ;; This function uses a non-reentrant model
  8004 ;;
  8005                           psect	text1265
  8006                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\adc.c"
  8007                           	line	7
  8008                           	global	__size_of_adc_read_channel
  8009  0041                     	__size_of_adc_read_channel	equ	__end_of_adc_read_channel-_adc_read_channel
  8010                           	
  8011  0ACD                     _adc_read_channel:	
  8012                           	opt	stack 2
  8013                           ; Regs used in _adc_read_channel: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8014                           ;adc_read_channel@channel stored from wreg
  8015  0ACD  1283               	bcf	status, 5	;RP0=0, select bank0
  8016  0ACE  1303               	bcf	status, 6	;RP1=0, select bank0
  8017  0ACF  00BE               	movwf	(adc_read_channel@channel)
  8018                           	line	8
  8019                           	
  8020  0AD0                     l10737:	
  8021                           ;adc.c: 8: switch(channel)
  8022  0AD0  2AEA               	goto	l10745
  8023                           	line	10
  8024                           ;adc.c: 9: {
  8025                           ;adc.c: 10: case 0:
  8026                           	
  8027  0AD1                     l690:	
  8028                           	line	11
  8029                           ;adc.c: 11: CHS0 = 0;
  8030  0AD1  119F               	bcf	(251/8),(251)&7
  8031                           	line	12
  8032                           ;adc.c: 12: CHS1 = 0;
  8033  0AD2  121F               	bcf	(252/8),(252)&7
  8034                           	line	13
  8035                           ;adc.c: 13: CHS2 = 0;
  8036  0AD3  129F               	bcf	(253/8),(253)&7
  8037                           	line	14
  8038                           ;adc.c: 14: break;
  8039  0AD4  2AFB               	goto	l10747
  8040                           	line	15
  8041                           ;adc.c: 15: case 1:
  8042                           	
  8043  0AD5                     l692:	
  8044                           	line	16
  8045                           ;adc.c: 16: CHS0 = 1;
  8046  0AD5  159F               	bsf	(251/8),(251)&7
  8047                           	line	17
  8048                           ;adc.c: 17: CHS1 = 0;
  8049  0AD6  121F               	bcf	(252/8),(252)&7
  8050                           	line	18
  8051                           ;adc.c: 18: CHS2 = 0;
  8052  0AD7  129F               	bcf	(253/8),(253)&7
  8053                           	line	19
  8054                           ;adc.c: 19: break;
  8055  0AD8  2AFB               	goto	l10747
  8056                           	line	20
  8057                           ;adc.c: 20: case 2:
  8058                           	
  8059  0AD9                     l693:	
  8060                           	line	21
  8061                           ;adc.c: 21: CHS0 = 0;
  8062  0AD9  119F               	bcf	(251/8),(251)&7
  8063                           	line	22
  8064                           ;adc.c: 22: CHS1 = 1;
  8065  0ADA  161F               	bsf	(252/8),(252)&7
  8066                           	line	23
  8067                           ;adc.c: 23: CHS2 = 0;
  8068  0ADB  129F               	bcf	(253/8),(253)&7
  8069                           	line	24
  8070                           ;adc.c: 24: break;
  8071  0ADC  2AFB               	goto	l10747
  8072                           	line	25
  8073                           ;adc.c: 25: case 3:
  8074                           	
  8075  0ADD                     l694:	
  8076                           	line	26
  8077                           ;adc.c: 26: CHS0 = 1;
  8078  0ADD  159F               	bsf	(251/8),(251)&7
  8079                           	line	27
  8080                           ;adc.c: 27: CHS1 = 1;
  8081  0ADE  161F               	bsf	(252/8),(252)&7
  8082                           	line	28
  8083                           ;adc.c: 28: CHS2 = 0;
  8084  0ADF  129F               	bcf	(253/8),(253)&7
  8085                           	line	29
  8086                           ;adc.c: 29: break;
  8087  0AE0  2AFB               	goto	l10747
  8088                           	line	30
  8089                           ;adc.c: 30: case 4:
  8090                           	
  8091  0AE1                     l695:	
  8092                           	line	31
  8093                           ;adc.c: 31: CHS0 = 0;
  8094  0AE1  119F               	bcf	(251/8),(251)&7
  8095                           	line	32
  8096                           ;adc.c: 32: CHS1 = 0;
  8097  0AE2  121F               	bcf	(252/8),(252)&7
  8098                           	line	33
  8099                           ;adc.c: 33: CHS2 = 1;
  8100  0AE3  169F               	bsf	(253/8),(253)&7
  8101                           	line	34
  8102                           ;adc.c: 34: break;
  8103  0AE4  2AFB               	goto	l10747
  8104                           	line	37
  8105                           ;adc.c: 37: default:
  8106                           	
  8107  0AE5                     l696:	
  8108                           	line	38
  8109                           	
  8110  0AE5                     l10739:	
  8111                           ;adc.c: 38: return 0;
  8112  0AE5  01BB               	clrf	(?_adc_read_channel)
  8113  0AE6  01BC               	clrf	(?_adc_read_channel+1)
  8114  0AE7  2B0D               	goto	l697
  8115                           	
  8116  0AE8                     l10741:	
  8117  0AE8  2B0D               	goto	l697
  8118                           	line	39
  8119                           	
  8120  0AE9                     l10743:	
  8121                           ;adc.c: 39: }
  8122  0AE9  2AFB               	goto	l10747
  8123                           	line	8
  8124                           	
  8125  0AEA                     l689:	
  8126                           	
  8127  0AEA                     l10745:	
  8128  0AEA  083E               	movf	(adc_read_channel@channel),w
  8129                           	; Switch size 1, requested type "space"
  8130                           ; Number of cases is 5, Range of values is 0 to 4
  8131                           ; switch strategies available:
  8132                           ; Name         Instructions Cycles
  8133                           ; simple_byte           16     9 (average)
  8134                           ; direct_byte           23     8 (fixed)
  8135                           ; jumptable            260     6 (fixed)
  8136                           ; rangetable             9     6 (fixed)
  8137                           ; spacedrange           16     9 (fixed)
  8138                           ; locatedrange           5     3 (fixed)
  8139                           ;	Chosen strategy is simple_byte
  8140                           
  8141                           	opt asmopt_off
  8142  0AEB  3A00               	xorlw	0^0	; case 0
  8143  0AEC  1903               	skipnz
  8144  0AED  2AD1               	goto	l690
  8145  0AEE  3A01               	xorlw	1^0	; case 1
  8146  0AEF  1903               	skipnz
  8147  0AF0  2AD5               	goto	l692
  8148  0AF1  3A03               	xorlw	2^1	; case 2
  8149  0AF2  1903               	skipnz
  8150  0AF3  2AD9               	goto	l693
  8151  0AF4  3A01               	xorlw	3^2	; case 3
  8152  0AF5  1903               	skipnz
  8153  0AF6  2ADD               	goto	l694
  8154  0AF7  3A07               	xorlw	4^3	; case 4
  8155  0AF8  1903               	skipnz
  8156  0AF9  2AE1               	goto	l695
  8157  0AFA  2AE5               	goto	l10739
  8158                           	opt asmopt_on
  8159                           
  8160                           	line	39
  8161                           	
  8162  0AFB                     l691:	
  8163                           	line	41
  8164                           	
  8165  0AFB                     l10747:	
  8166                           ;adc.c: 41: _delay((unsigned long)((50)*(20000000/4000000.0)));
  8167                           	opt asmopt_off
  8168  0AFB  3053               movlw	83
  8169  0AFC  00BD               movwf	(??_adc_read_channel+0)+0,f
  8170  0AFD                     u4907:
  8171  0AFD  0BBD               decfsz	(??_adc_read_channel+0)+0,f
  8172  0AFE  2AFD               	goto	u4907
  8173                           opt asmopt_on
  8174                           
  8175                           	line	43
  8176                           	
  8177  0AFF                     l10749:	
  8178                           ;adc.c: 43: return adc_read();
  8179  0AFF  120A  158A  224F   	fcall	_adc_read
              120A  158A         
  8180  0B04  1283               	bcf	status, 5	;RP0=0, select bank0
  8181  0B05  1303               	bcf	status, 6	;RP1=0, select bank0
  8182  0B06  0830               	movf	(1+(?_adc_read)),w
  8183  0B07  01BC               	clrf	(?_adc_read_channel+1)
  8184  0B08  07BC               	addwf	(?_adc_read_channel+1)
  8185  0B09  082F               	movf	(0+(?_adc_read)),w
  8186  0B0A  01BB               	clrf	(?_adc_read_channel)
  8187  0B0B  07BB               	addwf	(?_adc_read_channel)
  8188                           
  8189  0B0C  2B0D               	goto	l697
  8190                           	
  8191  0B0D                     l10751:	
  8192                           	line	45
  8193                           	
  8194  0B0D                     l697:	
  8195  0B0D  0008               	return
  8196                           	opt stack 0
  8197                           GLOBAL	__end_of_adc_read_channel
  8198  0B0E                     	__end_of_adc_read_channel:
  8199 ;; =============== function _adc_read_channel ends ============
  8200                           
  8201                           	signat	_adc_read_channel,4218
  8202                           	global	_initIRobot
  8203                           psect	text1266,local,class=CODE,delta=2
  8204                           global __ptext1266
  8205  1638                     __ptext1266:
  8206                           
  8207 ;; *************** function _initIRobot *****************
  8208 ;; Defined at:
  8209 ;;		line 130 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  8210 ;; Parameters:    Size  Location     Type
  8211 ;;		None
  8212 ;; Auto vars:     Size  Location     Type
  8213 ;;		None
  8214 ;; Return value:  Size  Location     Type
  8215 ;;		None               void
  8216 ;; Registers used:
  8217 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8218 ;; Tracked objects:
  8219 ;;		On entry : 0/0
  8220 ;;		On exit  : 0/0
  8221 ;;		Unchanged: 0/0
  8222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8223 ;;      Params:         0       0       0       0       0
  8224 ;;      Locals:         0       0       0       0       0
  8225 ;;      Temps:          0       3       0       0       0
  8226 ;;      Totals:         0       3       0       0       0
  8227 ;;Total ram usage:        3 bytes
  8228 ;; Hardware stack levels used:    1
  8229 ;; Hardware stack levels required when called:    2
  8230 ;; This function calls:
  8231 ;;		_ser_putch
  8232 ;; This function is called by:
  8233 ;;		_init
  8234 ;; This function uses a non-reentrant model
  8235 ;;
  8236                           psect	text1266
  8237                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
  8238                           	line	130
  8239                           	global	__size_of_initIRobot
  8240  001C                     	__size_of_initIRobot	equ	__end_of_initIRobot-_initIRobot
  8241                           	
  8242  1638                     _initIRobot:	
  8243                           	opt	stack 4
  8244                           ; Regs used in _initIRobot: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8245                           	line	131
  8246                           	
  8247  1638                     l10731:	
  8248                           ;main.c: 131: _delay((unsigned long)((100)*(20000000/4000.0)));
  8249                           	opt asmopt_off
  8250  1638  3003               movlw  3
  8251  1639  1283               	bcf	status, 5	;RP0=0, select bank0
  8252  163A  1303               	bcf	status, 6	;RP1=0, select bank0
  8253  163B  00A4               movwf	((??_initIRobot+0)+0+2),f
  8254  163C  308A               movlw	138
  8255  163D  00A3               movwf	((??_initIRobot+0)+0+1),f
  8256  163E  3056               	movlw	86
  8257  163F  00A2               movwf	((??_initIRobot+0)+0),f
  8258  1640                     u4917:
  8259  1640  0BA2               	decfsz	((??_initIRobot+0)+0),f
  8260  1641  2E40               	goto	u4917
  8261  1642  0BA3               	decfsz	((??_initIRobot+0)+0+1),f
  8262  1643  2E40               	goto	u4917
  8263  1644  0BA4               	decfsz	((??_initIRobot+0)+0+2),f
  8264  1645  2E40               	goto	u4917
  8265  1646  2E47               	nop2
  8266                           opt asmopt_on
  8267                           
  8268                           	line	132
  8269                           	
  8270  1647                     l10733:	
  8271                           ;main.c: 132: ser_putch(128);
  8272  1647  3080               	movlw	(080h)
  8273  1648  160A  118A  26AE   	fcall	_ser_putch
              160A  118A         
  8274                           	line	133
  8275                           	
  8276  164D                     l10735:	
  8277                           ;main.c: 133: ser_putch(132);
  8278  164D  3084               	movlw	(084h)
  8279  164E  160A  118A  26AE   	fcall	_ser_putch
              160A  118A         
  8280                           	line	134
  8281                           	
  8282  1653                     l6714:	
  8283  1653  0008               	return
  8284                           	opt stack 0
  8285                           GLOBAL	__end_of_initIRobot
  8286  1654                     	__end_of_initIRobot:
  8287 ;; =============== function _initIRobot ends ============
  8288                           
  8289                           	signat	_initIRobot,88
  8290                           	global	_waitFor
  8291                           psect	text1267,local,class=CODE,delta=2
  8292                           global __ptext1267
  8293  17AE                     __ptext1267:
  8294                           
  8295 ;; *************** function _waitFor *****************
  8296 ;; Defined at:
  8297 ;;		line 299 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  8298 ;; Parameters:    Size  Location     Type
  8299 ;;  type            1    wreg     unsigned char 
  8300 ;;  highByte        1    2[BANK0 ] unsigned char 
  8301 ;;  lowByte         1    3[BANK0 ] unsigned char 
  8302 ;; Auto vars:     Size  Location     Type
  8303 ;;  type            1    7[BANK0 ] unsigned char 
  8304 ;; Return value:  Size  Location     Type
  8305 ;;		None               void
  8306 ;; Registers used:
  8307 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8308 ;; Tracked objects:
  8309 ;;		On entry : 0/0
  8310 ;;		On exit  : 0/0
  8311 ;;		Unchanged: 0/0
  8312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8313 ;;      Params:         0       2       0       0       0
  8314 ;;      Locals:         0       1       0       0       0
  8315 ;;      Temps:          0       3       0       0       0
  8316 ;;      Totals:         0       6       0       0       0
  8317 ;;Total ram usage:        6 bytes
  8318 ;; Hardware stack levels used:    1
  8319 ;; Hardware stack levels required when called:    2
  8320 ;; This function calls:
  8321 ;;		_ser_putch
  8322 ;; This function is called by:
  8323 ;;		_goReverse
  8324 ;;		_turnAround
  8325 ;;		_turnLeft90
  8326 ;;		_turnRight90
  8327 ;;		_wallFollow
  8328 ;;		_leftAngleCorrect
  8329 ;; This function uses a non-reentrant model
  8330 ;;
  8331                           psect	text1267
  8332                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  8333                           	line	299
  8334                           	global	__size_of_waitFor
  8335  0029                     	__size_of_waitFor	equ	__end_of_waitFor-_waitFor
  8336                           	
  8337  17AE                     _waitFor:	
  8338                           	opt	stack 2
  8339                           ; Regs used in _waitFor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8340                           ;waitFor@type stored from wreg
  8341  17AE  1283               	bcf	status, 5	;RP0=0, select bank0
  8342  17AF  1303               	bcf	status, 6	;RP1=0, select bank0
  8343  17B0  00A7               	movwf	(waitFor@type)
  8344                           	line	300
  8345                           	
  8346  17B1                     l10723:	
  8347                           ;drive.c: 300: _delay((unsigned long)((100)*(20000000/4000.0)));
  8348                           	opt asmopt_off
  8349  17B1  3003               movlw  3
  8350  17B2  00A6               movwf	((??_waitFor+0)+0+2),f
  8351  17B3  308A               movlw	138
  8352  17B4  00A5               movwf	((??_waitFor+0)+0+1),f
  8353  17B5  3056               	movlw	86
  8354  17B6  00A4               movwf	((??_waitFor+0)+0),f
  8355  17B7                     u4927:
  8356  17B7  0BA4               	decfsz	((??_waitFor+0)+0),f
  8357  17B8  2FB7               	goto	u4927
  8358  17B9  0BA5               	decfsz	((??_waitFor+0)+0+1),f
  8359  17BA  2FB7               	goto	u4927
  8360  17BB  0BA6               	decfsz	((??_waitFor+0)+0+2),f
  8361  17BC  2FB7               	goto	u4927
  8362  17BD  2FBE               	nop2
  8363                           opt asmopt_on
  8364                           
  8365                           	line	301
  8366                           	
  8367  17BE                     l10725:	
  8368                           ;drive.c: 301: ser_putch(type);
  8369  17BE  1283               	bcf	status, 5	;RP0=0, select bank0
  8370  17BF  1303               	bcf	status, 6	;RP1=0, select bank0
  8371  17C0  0827               	movf	(waitFor@type),w
  8372  17C1  160A  118A  26AE   	fcall	_ser_putch
              160A  118A         
  8373                           	line	302
  8374                           	
  8375  17C6                     l10727:	
  8376                           ;drive.c: 302: ser_putch(highByte);
  8377  17C6  1283               	bcf	status, 5	;RP0=0, select bank0
  8378  17C7  1303               	bcf	status, 6	;RP1=0, select bank0
  8379  17C8  0822               	movf	(waitFor@highByte),w
  8380  17C9  160A  118A  26AE   	fcall	_ser_putch
              160A  118A         
  8381                           	line	303
  8382                           	
  8383  17CE                     l10729:	
  8384                           ;drive.c: 303: ser_putch(lowByte);
  8385  17CE  1283               	bcf	status, 5	;RP0=0, select bank0
  8386  17CF  1303               	bcf	status, 6	;RP1=0, select bank0
  8387  17D0  0823               	movf	(waitFor@lowByte),w
  8388  17D1  160A  118A  26AE   	fcall	_ser_putch
              160A  118A         
  8389                           	line	304
  8390                           	
  8391  17D6                     l5883:	
  8392  17D6  0008               	return
  8393                           	opt stack 0
  8394                           GLOBAL	__end_of_waitFor
  8395  17D7                     	__end_of_waitFor:
  8396 ;; =============== function _waitFor ends ============
  8397                           
  8398                           	signat	_waitFor,12408
  8399                           	global	_drive
  8400                           psect	text1268,local,class=CODE,delta=2
  8401                           global __ptext1268
  8402  0930                     __ptext1268:
  8403                           
  8404 ;; *************** function _drive *****************
  8405 ;; Defined at:
  8406 ;;		line 22 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  8407 ;; Parameters:    Size  Location     Type
  8408 ;;  highByteSpee    1    wreg     unsigned char 
  8409 ;;  lowByteSpeed    1    2[BANK0 ] unsigned char 
  8410 ;;  highByteRadi    1    3[BANK0 ] unsigned char 
  8411 ;;  lowByteRadiu    1    4[BANK0 ] unsigned char 
  8412 ;; Auto vars:     Size  Location     Type
  8413 ;;  highByteSpee    1    8[BANK0 ] unsigned char 
  8414 ;; Return value:  Size  Location     Type
  8415 ;;		None               void
  8416 ;; Registers used:
  8417 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8418 ;; Tracked objects:
  8419 ;;		On entry : 0/0
  8420 ;;		On exit  : 0/0
  8421 ;;		Unchanged: 0/0
  8422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8423 ;;      Params:         0       3       0       0       0
  8424 ;;      Locals:         0       1       0       0       0
  8425 ;;      Temps:          0       3       0       0       0
  8426 ;;      Totals:         0       7       0       0       0
  8427 ;;Total ram usage:        7 bytes
  8428 ;; Hardware stack levels used:    1
  8429 ;; Hardware stack levels required when called:    2
  8430 ;; This function calls:
  8431 ;;		_ser_putch
  8432 ;; This function is called by:
  8433 ;;		_driveForDistance
  8434 ;;		_goReverse
  8435 ;;		_turnAround
  8436 ;;		_turnLeft90
  8437 ;;		_turnRight90
  8438 ;;		_frontWallCorrect
  8439 ;;		_checkIfHome
  8440 ;;		_main
  8441 ;;		_wallFollow
  8442 ;;		_leftAngleCorrect
  8443 ;; This function uses a non-reentrant model
  8444 ;;
  8445                           psect	text1268
  8446                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
  8447                           	line	22
  8448                           	global	__size_of_drive
  8449  0037                     	__size_of_drive	equ	__end_of_drive-_drive
  8450                           	
  8451  0930                     _drive:	
  8452                           	opt	stack 4
  8453                           ; Regs used in _drive: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8454                           ;drive@highByteSpeed stored from wreg
  8455  0930  1283               	bcf	status, 5	;RP0=0, select bank0
  8456  0931  1303               	bcf	status, 6	;RP1=0, select bank0
  8457  0932  00A8               	movwf	(drive@highByteSpeed)
  8458                           	line	23
  8459                           	
  8460  0933                     l10711:	
  8461                           ;drive.c: 23: _delay((unsigned long)((100)*(20000000/4000.0)));
  8462                           	opt asmopt_off
  8463  0933  3003               movlw  3
  8464  0934  00A7               movwf	((??_drive+0)+0+2),f
  8465  0935  308A               movlw	138
  8466  0936  00A6               movwf	((??_drive+0)+0+1),f
  8467  0937  3056               	movlw	86
  8468  0938  00A5               movwf	((??_drive+0)+0),f
  8469  0939                     u4937:
  8470  0939  0BA5               	decfsz	((??_drive+0)+0),f
  8471  093A  2939               	goto	u4937
  8472  093B  0BA6               	decfsz	((??_drive+0)+0+1),f
  8473  093C  2939               	goto	u4937
  8474  093D  0BA7               	decfsz	((??_drive+0)+0+2),f
  8475  093E  2939               	goto	u4937
  8476  093F  2940               	nop2
  8477                           opt asmopt_on
  8478                           
  8479                           	line	24
  8480                           	
  8481  0940                     l10713:	
  8482                           ;drive.c: 24: ser_putch(137);
  8483  0940  3089               	movlw	(089h)
  8484  0941  160A  118A  26AE   	fcall	_ser_putch
              120A  158A         
  8485                           	line	25
  8486                           	
  8487  0946                     l10715:	
  8488                           ;drive.c: 25: ser_putch(highByteSpeed);
  8489  0946  1283               	bcf	status, 5	;RP0=0, select bank0
  8490  0947  1303               	bcf	status, 6	;RP1=0, select bank0
  8491  0948  0828               	movf	(drive@highByteSpeed),w
  8492  0949  160A  118A  26AE   	fcall	_ser_putch
              120A  158A         
  8493                           	line	26
  8494                           	
  8495  094E                     l10717:	
  8496                           ;drive.c: 26: ser_putch(lowByteSpeed);
  8497  094E  1283               	bcf	status, 5	;RP0=0, select bank0
  8498  094F  1303               	bcf	status, 6	;RP1=0, select bank0
  8499  0950  0822               	movf	(drive@lowByteSpeed),w
  8500  0951  160A  118A  26AE   	fcall	_ser_putch
              120A  158A         
  8501                           	line	27
  8502                           	
  8503  0956                     l10719:	
  8504                           ;drive.c: 27: ser_putch(highByteRadius);
  8505  0956  1283               	bcf	status, 5	;RP0=0, select bank0
  8506  0957  1303               	bcf	status, 6	;RP1=0, select bank0
  8507  0958  0823               	movf	(drive@highByteRadius),w
  8508  0959  160A  118A  26AE   	fcall	_ser_putch
              120A  158A         
  8509                           	line	28
  8510                           	
  8511  095E                     l10721:	
  8512                           ;drive.c: 28: ser_putch(lowByteRadius);
  8513  095E  1283               	bcf	status, 5	;RP0=0, select bank0
  8514  095F  1303               	bcf	status, 6	;RP1=0, select bank0
  8515  0960  0824               	movf	(drive@lowByteRadius),w
  8516  0961  160A  118A  26AE   	fcall	_ser_putch
              120A  158A         
  8517                           	line	29
  8518                           	
  8519  0966                     l5818:	
  8520  0966  0008               	return
  8521                           	opt stack 0
  8522                           GLOBAL	__end_of_drive
  8523  0967                     	__end_of_drive:
  8524 ;; =============== function _drive ends ============
  8525                           
  8526                           	signat	_drive,16504
  8527                           	global	_rotateIR
  8528                           psect	text1269,local,class=CODE,delta=2
  8529                           global __ptext1269
  8530  09D8                     __ptext1269:
  8531                           
  8532 ;; *************** function _rotateIR *****************
  8533 ;; Defined at:
  8534 ;;		line 39 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\ir.c"
  8535 ;; Parameters:    Size  Location     Type
  8536 ;;  steps           1    wreg     unsigned char 
  8537 ;;  direction       1    0[BANK0 ] unsigned char 
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;  steps           1    4[BANK0 ] unsigned char 
  8540 ;;  stepNum         1    5[BANK0 ] unsigned char 
  8541 ;; Return value:  Size  Location     Type
  8542 ;;		None               void
  8543 ;; Registers used:
  8544 ;;		wreg, status,2, status,0
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8550 ;;      Params:         0       1       0       0       0
  8551 ;;      Locals:         0       2       0       0       0
  8552 ;;      Temps:          0       3       0       0       0
  8553 ;;      Totals:         0       6       0       0       0
  8554 ;;Total ram usage:        6 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:    1
  8557 ;; This function calls:
  8558 ;;		Nothing
  8559 ;; This function is called by:
  8560 ;;		_findWalls
  8561 ;;		_main
  8562 ;; This function uses a non-reentrant model
  8563 ;;
  8564                           psect	text1269
  8565                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\ir.c"
  8566                           	line	39
  8567                           	global	__size_of_rotateIR
  8568  003B                     	__size_of_rotateIR	equ	__end_of_rotateIR-_rotateIR
  8569                           	
  8570  09D8                     _rotateIR:	
  8571                           	opt	stack 6
  8572                           ; Regs used in _rotateIR: [wreg+status,2+status,0]
  8573                           ;rotateIR@steps stored from wreg
  8574  09D8  1283               	bcf	status, 5	;RP0=0, select bank0
  8575  09D9  1303               	bcf	status, 6	;RP1=0, select bank0
  8576  09DA  00A4               	movwf	(rotateIR@steps)
  8577                           	line	40
  8578                           	
  8579  09DB                     l10697:	
  8580                           ;ir.c: 40: PORTC |= 0b00000011;
  8581  09DB  3003               	movlw	(03h)
  8582  09DC  00A1               	movwf	(??_rotateIR+0)+0
  8583  09DD  0821               	movf	(??_rotateIR+0)+0,w
  8584  09DE  0487               	iorwf	(7),f	;volatile
  8585                           	line	41
  8586                           	
  8587  09DF                     l10699:	
  8588                           ;ir.c: 41: SSPBUF = direction;
  8589  09DF  0820               	movf	(rotateIR@direction),w
  8590  09E0  0093               	movwf	(19)	;volatile
  8591                           	line	44
  8592                           ;ir.c: 44: for (char stepNum = 1; stepNum <= steps; ++stepNum)
  8593  09E1  01A5               	clrf	(rotateIR@stepNum)
  8594  09E2  1403               	bsf	status,0
  8595  09E3  0DA5               	rlf	(rotateIR@stepNum),f
  8596  09E4  29FD               	goto	l5086
  8597                           	line	45
  8598                           	
  8599  09E5                     l5087:	
  8600                           	line	46
  8601                           ;ir.c: 45: {
  8602                           ;ir.c: 46: PORTC |= 0b00000100;
  8603  09E5  1507               	bsf	(7)+(2/8),(2)&7	;volatile
  8604                           	line	47
  8605                           	
  8606  09E6                     l10701:	
  8607                           ;ir.c: 47: PORTC &= 0b11111011;
  8608  09E6  30FB               	movlw	(0FBh)
  8609  09E7  00A1               	movwf	(??_rotateIR+0)+0
  8610  09E8  0821               	movf	(??_rotateIR+0)+0,w
  8611  09E9  0587               	andwf	(7),f	;volatile
  8612                           	line	48
  8613                           	
  8614  09EA                     l10703:	
  8615                           ;ir.c: 48: _delay((unsigned long)((50)*(20000000/4000.0)));
  8616                           	opt asmopt_off
  8617  09EA  3002               movlw  2
  8618  09EB  00A3               movwf	((??_rotateIR+0)+0+2),f
  8619  09EC  3045               movlw	69
  8620  09ED  00A2               movwf	((??_rotateIR+0)+0+1),f
  8621  09EE  30A9               	movlw	169
  8622  09EF  00A1               movwf	((??_rotateIR+0)+0),f
  8623  09F0                     u4947:
  8624  09F0  0BA1               	decfsz	((??_rotateIR+0)+0),f
  8625  09F1  29F0               	goto	u4947
  8626  09F2  0BA2               	decfsz	((??_rotateIR+0)+0+1),f
  8627  09F3  29F0               	goto	u4947
  8628  09F4  0BA3               	decfsz	((??_rotateIR+0)+0+2),f
  8629  09F5  29F0               	goto	u4947
  8630  09F6  29F7               	nop2
  8631                           opt asmopt_on
  8632                           
  8633                           	line	44
  8634                           	
  8635  09F7                     l10705:	
  8636  09F7  3001               	movlw	(01h)
  8637  09F8  1283               	bcf	status, 5	;RP0=0, select bank0
  8638  09F9  1303               	bcf	status, 6	;RP1=0, select bank0
  8639  09FA  00A1               	movwf	(??_rotateIR+0)+0
  8640  09FB  0821               	movf	(??_rotateIR+0)+0,w
  8641  09FC  07A5               	addwf	(rotateIR@stepNum),f
  8642                           	
  8643  09FD                     l5086:	
  8644  09FD  0825               	movf	(rotateIR@stepNum),w
  8645  09FE  0224               	subwf	(rotateIR@steps),w
  8646  09FF  1803               	skipnc
  8647  0A00  2A02               	goto	u4111
  8648  0A01  2A03               	goto	u4110
  8649  0A02                     u4111:
  8650  0A02  29E5               	goto	l5087
  8651  0A03                     u4110:
  8652  0A03  2A04               	goto	l10707
  8653                           	
  8654  0A04                     l5088:	
  8655                           	line	51
  8656                           	
  8657  0A04                     l10707:	
  8658                           ;ir.c: 49: }
  8659                           ;ir.c: 51: SSPBUF = 0b00000000;
  8660  0A04  0193               	clrf	(19)	;volatile
  8661                           	line	52
  8662                           	
  8663  0A05                     l10709:	
  8664                           ;ir.c: 52: _delay((unsigned long)((100)*(20000000/4000.0)));
  8665                           	opt asmopt_off
  8666  0A05  3003               movlw  3
  8667  0A06  00A3               movwf	((??_rotateIR+0)+0+2),f
  8668  0A07  308A               movlw	138
  8669  0A08  00A2               movwf	((??_rotateIR+0)+0+1),f
  8670  0A09  3056               	movlw	86
  8671  0A0A  00A1               movwf	((??_rotateIR+0)+0),f
  8672  0A0B                     u4957:
  8673  0A0B  0BA1               	decfsz	((??_rotateIR+0)+0),f
  8674  0A0C  2A0B               	goto	u4957
  8675  0A0D  0BA2               	decfsz	((??_rotateIR+0)+0+1),f
  8676  0A0E  2A0B               	goto	u4957
  8677  0A0F  0BA3               	decfsz	((??_rotateIR+0)+0+2),f
  8678  0A10  2A0B               	goto	u4957
  8679  0A11  2A12               	nop2
  8680                           opt asmopt_on
  8681                           
  8682                           	line	54
  8683                           	
  8684  0A12                     l5089:	
  8685  0A12  0008               	return
  8686                           	opt stack 0
  8687                           GLOBAL	__end_of_rotateIR
  8688  0A13                     	__end_of_rotateIR:
  8689 ;; =============== function _rotateIR ends ============
  8690                           
  8691                           	signat	_rotateIR,8312
  8692                           	global	_convert
  8693                           psect	text1270,local,class=CODE,delta=2
  8694                           global __ptext1270
  8695  01E7                     __ptext1270:
  8696                           
  8697 ;; *************** function _convert *****************
  8698 ;; Defined at:
  8699 ;;		line 11 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\ir.c"
  8700 ;; Parameters:    Size  Location     Type
  8701 ;;  adc_value       2   23[BANK0 ] int 
  8702 ;; Auto vars:     Size  Location     Type
  8703 ;;		None
  8704 ;; Return value:  Size  Location     Type
  8705 ;;                  2   23[BANK0 ] int 
  8706 ;; Registers used:
  8707 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8713 ;;      Params:         0       2       0       0       0
  8714 ;;      Locals:         0       0       0       0       0
  8715 ;;      Temps:          0       2       0       0       0
  8716 ;;      Totals:         0       4       0       0       0
  8717 ;;Total ram usage:        4 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:    2
  8720 ;; This function calls:
  8721 ;;		___wmul
  8722 ;;		___awdiv
  8723 ;; This function is called by:
  8724 ;;		_readIR
  8725 ;; This function uses a non-reentrant model
  8726 ;;
  8727                           psect	text1270
  8728                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\ir.c"
  8729                           	line	11
  8730                           	global	__size_of_convert
  8731  01CF                     	__size_of_convert	equ	__end_of_convert-_convert
  8732                           	
  8733  01E7                     _convert:	
  8734                           	opt	stack 3
  8735                           ; Regs used in _convert: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8736                           	line	12
  8737                           	
  8738  01E7                     l10637:	
  8739                           ;ir.c: 12: if(adc_value < 82)
  8740  01E7  1283               	bcf	status, 5	;RP0=0, select bank0
  8741  01E8  1303               	bcf	status, 6	;RP1=0, select bank0
  8742  01E9  0838               	movf	(convert@adc_value+1),w
  8743  01EA  3A80               	xorlw	80h
  8744  01EB  00FF               	movwf	btemp+1
  8745  01EC  3080               	movlw	(high(052h))^80h
  8746  01ED  027F               	subwf	btemp+1,w
  8747  01EE  1D03               	skipz
  8748  01EF  29F2               	goto	u4045
  8749  01F0  3052               	movlw	low(052h)
  8750  01F1  0237               	subwf	(convert@adc_value),w
  8751  01F2                     u4045:
  8752                           
  8753  01F2  1803               	skipnc
  8754  01F3  29F5               	goto	u4041
  8755  01F4  29F6               	goto	u4040
  8756  01F5                     u4041:
  8757  01F5  29FF               	goto	l10645
  8758  01F6                     u4040:
  8759                           	line	13
  8760                           	
  8761  01F6                     l10639:	
  8762                           ;ir.c: 13: return 999;
  8763  01F6  30E7               	movlw	low(03E7h)
  8764  01F7  1283               	bcf	status, 5	;RP0=0, select bank0
  8765  01F8  1303               	bcf	status, 6	;RP1=0, select bank0
  8766  01F9  00B7               	movwf	(?_convert)
  8767  01FA  3003               	movlw	high(03E7h)
  8768  01FB  00B8               	movwf	((?_convert))+1
  8769  01FC  2BB5               	goto	l5067
  8770                           	
  8771  01FD                     l10641:	
  8772  01FD  2BB5               	goto	l5067
  8773                           	
  8774  01FE                     l10643:	
  8775  01FE  2BB5               	goto	l5067
  8776                           	line	14
  8777                           	
  8778  01FF                     l5066:	
  8779                           	
  8780  01FF                     l10645:	
  8781                           ;ir.c: 14: else if(adc_value < 133)
  8782  01FF  1283               	bcf	status, 5	;RP0=0, select bank0
  8783  0200  1303               	bcf	status, 6	;RP1=0, select bank0
  8784  0201  0838               	movf	(convert@adc_value+1),w
  8785  0202  3A80               	xorlw	80h
  8786  0203  00FF               	movwf	btemp+1
  8787  0204  3080               	movlw	(high(085h))^80h
  8788  0205  027F               	subwf	btemp+1,w
  8789  0206  1D03               	skipz
  8790  0207  2A0A               	goto	u4055
  8791  0208  3085               	movlw	low(085h)
  8792  0209  0237               	subwf	(convert@adc_value),w
  8793  020A                     u4055:
  8794                           
  8795  020A  1803               	skipnc
  8796  020B  2A0D               	goto	u4051
  8797  020C  2A0E               	goto	u4050
  8798  020D                     u4051:
  8799  020D  2A46               	goto	l10653
  8800  020E                     u4050:
  8801                           	line	15
  8802                           	
  8803  020E                     l10647:	
  8804                           ;ir.c: 15: return (100 + (150-100)*(133 - adc_value)/(133 - 82) - 3);
  8805  020E  3033               	movlw	low(033h)
  8806  020F  1283               	bcf	status, 5	;RP0=0, select bank0
  8807  0210  1303               	bcf	status, 6	;RP1=0, select bank0
  8808  0211  00A6               	movwf	(?___awdiv)
  8809  0212  3000               	movlw	high(033h)
  8810  0213  00A7               	movwf	((?___awdiv))+1
  8811  0214  0937               	comf	(convert@adc_value),w
  8812  0215  00B9               	movwf	(??_convert+0)+0
  8813  0216  0938               	comf	(convert@adc_value+1),w
  8814  0217  00BA               	movwf	((??_convert+0)+0+1)
  8815  0218  0AB9               	incf	(??_convert+0)+0,f
  8816  0219  1903               	skipnz
  8817  021A  0ABA               	incf	((??_convert+0)+0+1),f
  8818  021B  0839               	movf	0+(??_convert+0)+0,w
  8819  021C  3E85               	addlw	low(085h)
  8820  021D  00A0               	movwf	(?___wmul)
  8821  021E  083A               	movf	1+(??_convert+0)+0,w
  8822  021F  1803               	skipnc
  8823  0220  3E01               	addlw	1
  8824  0221  3E00               	addlw	high(085h)
  8825  0222  00A1               	movwf	1+(?___wmul)
  8826  0223  3032               	movlw	low(032h)
  8827  0224  00A2               	movwf	0+(?___wmul)+02h
  8828  0225  3000               	movlw	high(032h)
  8829  0226  00A3               	movwf	(0+(?___wmul)+02h)+1
  8830  0227  120A  158A  2073   	fcall	___wmul
              120A  118A         
  8831  022C  1283               	bcf	status, 5	;RP0=0, select bank0
  8832  022D  1303               	bcf	status, 6	;RP1=0, select bank0
  8833  022E  0821               	movf	(1+(?___wmul)),w
  8834  022F  01A9               	clrf	1+(?___awdiv)+02h
  8835  0230  07A9               	addwf	1+(?___awdiv)+02h
  8836  0231  0820               	movf	(0+(?___wmul)),w
  8837  0232  01A8               	clrf	0+(?___awdiv)+02h
  8838  0233  07A8               	addwf	0+(?___awdiv)+02h
  8839                           
  8840  0234  120A  158A  268B   	fcall	___awdiv
              120A  118A         
  8841  0239  1283               	bcf	status, 5	;RP0=0, select bank0
  8842  023A  1303               	bcf	status, 6	;RP1=0, select bank0
  8843  023B  0826               	movf	(0+(?___awdiv)),w
  8844  023C  3E61               	addlw	low(061h)
  8845  023D  00B7               	movwf	(?_convert)
  8846  023E  0827               	movf	(1+(?___awdiv)),w
  8847  023F  1803               	skipnc
  8848  0240  3E01               	addlw	1
  8849  0241  3E00               	addlw	high(061h)
  8850  0242  00B8               	movwf	1+(?_convert)
  8851  0243  2BB5               	goto	l5067
  8852                           	
  8853  0244                     l10649:	
  8854  0244  2BB5               	goto	l5067
  8855                           	
  8856  0245                     l10651:	
  8857  0245  2BB5               	goto	l5067
  8858                           	line	16
  8859                           	
  8860  0246                     l5069:	
  8861                           	
  8862  0246                     l10653:	
  8863                           ;ir.c: 16: else if(adc_value < 184)
  8864  0246  1283               	bcf	status, 5	;RP0=0, select bank0
  8865  0247  1303               	bcf	status, 6	;RP1=0, select bank0
  8866  0248  0838               	movf	(convert@adc_value+1),w
  8867  0249  3A80               	xorlw	80h
  8868  024A  00FF               	movwf	btemp+1
  8869  024B  3080               	movlw	(high(0B8h))^80h
  8870  024C  027F               	subwf	btemp+1,w
  8871  024D  1D03               	skipz
  8872  024E  2A51               	goto	u4065
  8873  024F  30B8               	movlw	low(0B8h)
  8874  0250  0237               	subwf	(convert@adc_value),w
  8875  0251                     u4065:
  8876                           
  8877  0251  1803               	skipnc
  8878  0252  2A54               	goto	u4061
  8879  0253  2A55               	goto	u4060
  8880  0254                     u4061:
  8881  0254  2A8D               	goto	l10661
  8882  0255                     u4060:
  8883                           	line	17
  8884                           	
  8885  0255                     l10655:	
  8886                           ;ir.c: 17: return (70 + (100-70)*(184 - adc_value)/(184 - 133) - 3);
  8887  0255  3033               	movlw	low(033h)
  8888  0256  1283               	bcf	status, 5	;RP0=0, select bank0
  8889  0257  1303               	bcf	status, 6	;RP1=0, select bank0
  8890  0258  00A6               	movwf	(?___awdiv)
  8891  0259  3000               	movlw	high(033h)
  8892  025A  00A7               	movwf	((?___awdiv))+1
  8893  025B  0937               	comf	(convert@adc_value),w
  8894  025C  00B9               	movwf	(??_convert+0)+0
  8895  025D  0938               	comf	(convert@adc_value+1),w
  8896  025E  00BA               	movwf	((??_convert+0)+0+1)
  8897  025F  0AB9               	incf	(??_convert+0)+0,f
  8898  0260  1903               	skipnz
  8899  0261  0ABA               	incf	((??_convert+0)+0+1),f
  8900  0262  0839               	movf	0+(??_convert+0)+0,w
  8901  0263  3EB8               	addlw	low(0B8h)
  8902  0264  00A0               	movwf	(?___wmul)
  8903  0265  083A               	movf	1+(??_convert+0)+0,w
  8904  0266  1803               	skipnc
  8905  0267  3E01               	addlw	1
  8906  0268  3E00               	addlw	high(0B8h)
  8907  0269  00A1               	movwf	1+(?___wmul)
  8908  026A  301E               	movlw	low(01Eh)
  8909  026B  00A2               	movwf	0+(?___wmul)+02h
  8910  026C  3000               	movlw	high(01Eh)
  8911  026D  00A3               	movwf	(0+(?___wmul)+02h)+1
  8912  026E  120A  158A  2073   	fcall	___wmul
              120A  118A         
  8913  0273  1283               	bcf	status, 5	;RP0=0, select bank0
  8914  0274  1303               	bcf	status, 6	;RP1=0, select bank0
  8915  0275  0821               	movf	(1+(?___wmul)),w
  8916  0276  01A9               	clrf	1+(?___awdiv)+02h
  8917  0277  07A9               	addwf	1+(?___awdiv)+02h
  8918  0278  0820               	movf	(0+(?___wmul)),w
  8919  0279  01A8               	clrf	0+(?___awdiv)+02h
  8920  027A  07A8               	addwf	0+(?___awdiv)+02h
  8921                           
  8922  027B  120A  158A  268B   	fcall	___awdiv
              120A  118A         
  8923  0280  1283               	bcf	status, 5	;RP0=0, select bank0
  8924  0281  1303               	bcf	status, 6	;RP1=0, select bank0
  8925  0282  0826               	movf	(0+(?___awdiv)),w
  8926  0283  3E43               	addlw	low(043h)
  8927  0284  00B7               	movwf	(?_convert)
  8928  0285  0827               	movf	(1+(?___awdiv)),w
  8929  0286  1803               	skipnc
  8930  0287  3E01               	addlw	1
  8931  0288  3E00               	addlw	high(043h)
  8932  0289  00B8               	movwf	1+(?_convert)
  8933  028A  2BB5               	goto	l5067
  8934                           	
  8935  028B                     l10657:	
  8936  028B  2BB5               	goto	l5067
  8937                           	
  8938  028C                     l10659:	
  8939  028C  2BB5               	goto	l5067
  8940                           	line	18
  8941                           	
  8942  028D                     l5071:	
  8943                           	
  8944  028D                     l10661:	
  8945                           ;ir.c: 18: else if(adc_value < 256)
  8946  028D  1283               	bcf	status, 5	;RP0=0, select bank0
  8947  028E  1303               	bcf	status, 6	;RP1=0, select bank0
  8948  028F  0838               	movf	(convert@adc_value+1),w
  8949  0290  3A80               	xorlw	80h
  8950  0291  00FF               	movwf	btemp+1
  8951  0292  3081               	movlw	(high(0100h))^80h
  8952  0293  027F               	subwf	btemp+1,w
  8953  0294  1D03               	skipz
  8954  0295  2A98               	goto	u4075
  8955  0296  3000               	movlw	low(0100h)
  8956  0297  0237               	subwf	(convert@adc_value),w
  8957  0298                     u4075:
  8958                           
  8959  0298  1803               	skipnc
  8960  0299  2A9B               	goto	u4071
  8961  029A  2A9C               	goto	u4070
  8962  029B                     u4071:
  8963  029B  2AD4               	goto	l10669
  8964  029C                     u4070:
  8965                           	line	19
  8966                           	
  8967  029C                     l10663:	
  8968                           ;ir.c: 19: return (50 + (70-50)*(256 - adc_value)/(256 - 184) - 4);
  8969  029C  3048               	movlw	low(048h)
  8970  029D  1283               	bcf	status, 5	;RP0=0, select bank0
  8971  029E  1303               	bcf	status, 6	;RP1=0, select bank0
  8972  029F  00A6               	movwf	(?___awdiv)
  8973  02A0  3000               	movlw	high(048h)
  8974  02A1  00A7               	movwf	((?___awdiv))+1
  8975  02A2  0937               	comf	(convert@adc_value),w
  8976  02A3  00B9               	movwf	(??_convert+0)+0
  8977  02A4  0938               	comf	(convert@adc_value+1),w
  8978  02A5  00BA               	movwf	((??_convert+0)+0+1)
  8979  02A6  0AB9               	incf	(??_convert+0)+0,f
  8980  02A7  1903               	skipnz
  8981  02A8  0ABA               	incf	((??_convert+0)+0+1),f
  8982  02A9  0839               	movf	0+(??_convert+0)+0,w
  8983  02AA  3E00               	addlw	low(0100h)
  8984  02AB  00A0               	movwf	(?___wmul)
  8985  02AC  083A               	movf	1+(??_convert+0)+0,w
  8986  02AD  1803               	skipnc
  8987  02AE  3E01               	addlw	1
  8988  02AF  3E01               	addlw	high(0100h)
  8989  02B0  00A1               	movwf	1+(?___wmul)
  8990  02B1  3014               	movlw	low(014h)
  8991  02B2  00A2               	movwf	0+(?___wmul)+02h
  8992  02B3  3000               	movlw	high(014h)
  8993  02B4  00A3               	movwf	(0+(?___wmul)+02h)+1
  8994  02B5  120A  158A  2073   	fcall	___wmul
              120A  118A         
  8995  02BA  1283               	bcf	status, 5	;RP0=0, select bank0
  8996  02BB  1303               	bcf	status, 6	;RP1=0, select bank0
  8997  02BC  0821               	movf	(1+(?___wmul)),w
  8998  02BD  01A9               	clrf	1+(?___awdiv)+02h
  8999  02BE  07A9               	addwf	1+(?___awdiv)+02h
  9000  02BF  0820               	movf	(0+(?___wmul)),w
  9001  02C0  01A8               	clrf	0+(?___awdiv)+02h
  9002  02C1  07A8               	addwf	0+(?___awdiv)+02h
  9003                           
  9004  02C2  120A  158A  268B   	fcall	___awdiv
              120A  118A         
  9005  02C7  1283               	bcf	status, 5	;RP0=0, select bank0
  9006  02C8  1303               	bcf	status, 6	;RP1=0, select bank0
  9007  02C9  0826               	movf	(0+(?___awdiv)),w
  9008  02CA  3E2E               	addlw	low(02Eh)
  9009  02CB  00B7               	movwf	(?_convert)
  9010  02CC  0827               	movf	(1+(?___awdiv)),w
  9011  02CD  1803               	skipnc
  9012  02CE  3E01               	addlw	1
  9013  02CF  3E00               	addlw	high(02Eh)
  9014  02D0  00B8               	movwf	1+(?_convert)
  9015  02D1  2BB5               	goto	l5067
  9016                           	
  9017  02D2                     l10665:	
  9018  02D2  2BB5               	goto	l5067
  9019                           	
  9020  02D3                     l10667:	
  9021  02D3  2BB5               	goto	l5067
  9022                           	line	20
  9023                           	
  9024  02D4                     l5073:	
  9025                           	
  9026  02D4                     l10669:	
  9027                           ;ir.c: 20: else if(adc_value < 317)
  9028  02D4  1283               	bcf	status, 5	;RP0=0, select bank0
  9029  02D5  1303               	bcf	status, 6	;RP1=0, select bank0
  9030  02D6  0838               	movf	(convert@adc_value+1),w
  9031  02D7  3A80               	xorlw	80h
  9032  02D8  00FF               	movwf	btemp+1
  9033  02D9  3081               	movlw	(high(013Dh))^80h
  9034  02DA  027F               	subwf	btemp+1,w
  9035  02DB  1D03               	skipz
  9036  02DC  2ADF               	goto	u4085
  9037  02DD  303D               	movlw	low(013Dh)
  9038  02DE  0237               	subwf	(convert@adc_value),w
  9039  02DF                     u4085:
  9040                           
  9041  02DF  1803               	skipnc
  9042  02E0  2AE2               	goto	u4081
  9043  02E1  2AE3               	goto	u4080
  9044  02E2                     u4081:
  9045  02E2  2B1B               	goto	l10677
  9046  02E3                     u4080:
  9047                           	line	21
  9048                           	
  9049  02E3                     l10671:	
  9050                           ;ir.c: 21: return (40 + (50-40)*(317 - adc_value)/(317 - 256) - 3);
  9051  02E3  303D               	movlw	low(03Dh)
  9052  02E4  1283               	bcf	status, 5	;RP0=0, select bank0
  9053  02E5  1303               	bcf	status, 6	;RP1=0, select bank0
  9054  02E6  00A6               	movwf	(?___awdiv)
  9055  02E7  3000               	movlw	high(03Dh)
  9056  02E8  00A7               	movwf	((?___awdiv))+1
  9057  02E9  0937               	comf	(convert@adc_value),w
  9058  02EA  00B9               	movwf	(??_convert+0)+0
  9059  02EB  0938               	comf	(convert@adc_value+1),w
  9060  02EC  00BA               	movwf	((??_convert+0)+0+1)
  9061  02ED  0AB9               	incf	(??_convert+0)+0,f
  9062  02EE  1903               	skipnz
  9063  02EF  0ABA               	incf	((??_convert+0)+0+1),f
  9064  02F0  0839               	movf	0+(??_convert+0)+0,w
  9065  02F1  3E3D               	addlw	low(013Dh)
  9066  02F2  00A0               	movwf	(?___wmul)
  9067  02F3  083A               	movf	1+(??_convert+0)+0,w
  9068  02F4  1803               	skipnc
  9069  02F5  3E01               	addlw	1
  9070  02F6  3E01               	addlw	high(013Dh)
  9071  02F7  00A1               	movwf	1+(?___wmul)
  9072  02F8  300A               	movlw	low(0Ah)
  9073  02F9  00A2               	movwf	0+(?___wmul)+02h
  9074  02FA  3000               	movlw	high(0Ah)
  9075  02FB  00A3               	movwf	(0+(?___wmul)+02h)+1
  9076  02FC  120A  158A  2073   	fcall	___wmul
              120A  118A         
  9077  0301  1283               	bcf	status, 5	;RP0=0, select bank0
  9078  0302  1303               	bcf	status, 6	;RP1=0, select bank0
  9079  0303  0821               	movf	(1+(?___wmul)),w
  9080  0304  01A9               	clrf	1+(?___awdiv)+02h
  9081  0305  07A9               	addwf	1+(?___awdiv)+02h
  9082  0306  0820               	movf	(0+(?___wmul)),w
  9083  0307  01A8               	clrf	0+(?___awdiv)+02h
  9084  0308  07A8               	addwf	0+(?___awdiv)+02h
  9085                           
  9086  0309  120A  158A  268B   	fcall	___awdiv
              120A  118A         
  9087  030E  1283               	bcf	status, 5	;RP0=0, select bank0
  9088  030F  1303               	bcf	status, 6	;RP1=0, select bank0
  9089  0310  0826               	movf	(0+(?___awdiv)),w
  9090  0311  3E25               	addlw	low(025h)
  9091  0312  00B7               	movwf	(?_convert)
  9092  0313  0827               	movf	(1+(?___awdiv)),w
  9093  0314  1803               	skipnc
  9094  0315  3E01               	addlw	1
  9095  0316  3E00               	addlw	high(025h)
  9096  0317  00B8               	movwf	1+(?_convert)
  9097  0318  2BB5               	goto	l5067
  9098                           	
  9099  0319                     l10673:	
  9100  0319  2BB5               	goto	l5067
  9101                           	
  9102  031A                     l10675:	
  9103  031A  2BB5               	goto	l5067
  9104                           	line	22
  9105                           	
  9106  031B                     l5075:	
  9107                           	
  9108  031B                     l10677:	
  9109                           ;ir.c: 22: else if(adc_value < 410)
  9110  031B  1283               	bcf	status, 5	;RP0=0, select bank0
  9111  031C  1303               	bcf	status, 6	;RP1=0, select bank0
  9112  031D  0838               	movf	(convert@adc_value+1),w
  9113  031E  3A80               	xorlw	80h
  9114  031F  00FF               	movwf	btemp+1
  9115  0320  3081               	movlw	(high(019Ah))^80h
  9116  0321  027F               	subwf	btemp+1,w
  9117  0322  1D03               	skipz
  9118  0323  2B26               	goto	u4095
  9119  0324  309A               	movlw	low(019Ah)
  9120  0325  0237               	subwf	(convert@adc_value),w
  9121  0326                     u4095:
  9122                           
  9123  0326  1803               	skipnc
  9124  0327  2B29               	goto	u4091
  9125  0328  2B2A               	goto	u4090
  9126  0329                     u4091:
  9127  0329  2B62               	goto	l10685
  9128  032A                     u4090:
  9129                           	line	23
  9130                           	
  9131  032A                     l10679:	
  9132                           ;ir.c: 23: return (30 + (40-30)*(410 - adc_value)/(410 - 317) - 2);
  9133  032A  305D               	movlw	low(05Dh)
  9134  032B  1283               	bcf	status, 5	;RP0=0, select bank0
  9135  032C  1303               	bcf	status, 6	;RP1=0, select bank0
  9136  032D  00A6               	movwf	(?___awdiv)
  9137  032E  3000               	movlw	high(05Dh)
  9138  032F  00A7               	movwf	((?___awdiv))+1
  9139  0330  0937               	comf	(convert@adc_value),w
  9140  0331  00B9               	movwf	(??_convert+0)+0
  9141  0332  0938               	comf	(convert@adc_value+1),w
  9142  0333  00BA               	movwf	((??_convert+0)+0+1)
  9143  0334  0AB9               	incf	(??_convert+0)+0,f
  9144  0335  1903               	skipnz
  9145  0336  0ABA               	incf	((??_convert+0)+0+1),f
  9146  0337  0839               	movf	0+(??_convert+0)+0,w
  9147  0338  3E9A               	addlw	low(019Ah)
  9148  0339  00A0               	movwf	(?___wmul)
  9149  033A  083A               	movf	1+(??_convert+0)+0,w
  9150  033B  1803               	skipnc
  9151  033C  3E01               	addlw	1
  9152  033D  3E01               	addlw	high(019Ah)
  9153  033E  00A1               	movwf	1+(?___wmul)
  9154  033F  300A               	movlw	low(0Ah)
  9155  0340  00A2               	movwf	0+(?___wmul)+02h
  9156  0341  3000               	movlw	high(0Ah)
  9157  0342  00A3               	movwf	(0+(?___wmul)+02h)+1
  9158  0343  120A  158A  2073   	fcall	___wmul
              120A  118A         
  9159  0348  1283               	bcf	status, 5	;RP0=0, select bank0
  9160  0349  1303               	bcf	status, 6	;RP1=0, select bank0
  9161  034A  0821               	movf	(1+(?___wmul)),w
  9162  034B  01A9               	clrf	1+(?___awdiv)+02h
  9163  034C  07A9               	addwf	1+(?___awdiv)+02h
  9164  034D  0820               	movf	(0+(?___wmul)),w
  9165  034E  01A8               	clrf	0+(?___awdiv)+02h
  9166  034F  07A8               	addwf	0+(?___awdiv)+02h
  9167                           
  9168  0350  120A  158A  268B   	fcall	___awdiv
              120A  118A         
  9169  0355  1283               	bcf	status, 5	;RP0=0, select bank0
  9170  0356  1303               	bcf	status, 6	;RP1=0, select bank0
  9171  0357  0826               	movf	(0+(?___awdiv)),w
  9172  0358  3E1C               	addlw	low(01Ch)
  9173  0359  00B7               	movwf	(?_convert)
  9174  035A  0827               	movf	(1+(?___awdiv)),w
  9175  035B  1803               	skipnc
  9176  035C  3E01               	addlw	1
  9177  035D  3E00               	addlw	high(01Ch)
  9178  035E  00B8               	movwf	1+(?_convert)
  9179  035F  2BB5               	goto	l5067
  9180                           	
  9181  0360                     l10681:	
  9182  0360  2BB5               	goto	l5067
  9183                           	
  9184  0361                     l10683:	
  9185  0361  2BB5               	goto	l5067
  9186                           	line	24
  9187                           	
  9188  0362                     l5077:	
  9189                           	
  9190  0362                     l10685:	
  9191                           ;ir.c: 24: else if(adc_value < 522)
  9192  0362  1283               	bcf	status, 5	;RP0=0, select bank0
  9193  0363  1303               	bcf	status, 6	;RP1=0, select bank0
  9194  0364  0838               	movf	(convert@adc_value+1),w
  9195  0365  3A80               	xorlw	80h
  9196  0366  00FF               	movwf	btemp+1
  9197  0367  3082               	movlw	(high(020Ah))^80h
  9198  0368  027F               	subwf	btemp+1,w
  9199  0369  1D03               	skipz
  9200  036A  2B6D               	goto	u4105
  9201  036B  300A               	movlw	low(020Ah)
  9202  036C  0237               	subwf	(convert@adc_value),w
  9203  036D                     u4105:
  9204                           
  9205  036D  1803               	skipnc
  9206  036E  2B70               	goto	u4101
  9207  036F  2B71               	goto	u4100
  9208  0370                     u4101:
  9209  0370  2BA9               	goto	l10693
  9210  0371                     u4100:
  9211                           	line	25
  9212                           	
  9213  0371                     l10687:	
  9214                           ;ir.c: 25: return (20 + (30-20)*(522 - adc_value)/(522 - 410) - 2);
  9215  0371  3070               	movlw	low(070h)
  9216  0372  1283               	bcf	status, 5	;RP0=0, select bank0
  9217  0373  1303               	bcf	status, 6	;RP1=0, select bank0
  9218  0374  00A6               	movwf	(?___awdiv)
  9219  0375  3000               	movlw	high(070h)
  9220  0376  00A7               	movwf	((?___awdiv))+1
  9221  0377  0937               	comf	(convert@adc_value),w
  9222  0378  00B9               	movwf	(??_convert+0)+0
  9223  0379  0938               	comf	(convert@adc_value+1),w
  9224  037A  00BA               	movwf	((??_convert+0)+0+1)
  9225  037B  0AB9               	incf	(??_convert+0)+0,f
  9226  037C  1903               	skipnz
  9227  037D  0ABA               	incf	((??_convert+0)+0+1),f
  9228  037E  0839               	movf	0+(??_convert+0)+0,w
  9229  037F  3E0A               	addlw	low(020Ah)
  9230  0380  00A0               	movwf	(?___wmul)
  9231  0381  083A               	movf	1+(??_convert+0)+0,w
  9232  0382  1803               	skipnc
  9233  0383  3E01               	addlw	1
  9234  0384  3E02               	addlw	high(020Ah)
  9235  0385  00A1               	movwf	1+(?___wmul)
  9236  0386  300A               	movlw	low(0Ah)
  9237  0387  00A2               	movwf	0+(?___wmul)+02h
  9238  0388  3000               	movlw	high(0Ah)
  9239  0389  00A3               	movwf	(0+(?___wmul)+02h)+1
  9240  038A  120A  158A  2073   	fcall	___wmul
              120A  118A         
  9241  038F  1283               	bcf	status, 5	;RP0=0, select bank0
  9242  0390  1303               	bcf	status, 6	;RP1=0, select bank0
  9243  0391  0821               	movf	(1+(?___wmul)),w
  9244  0392  01A9               	clrf	1+(?___awdiv)+02h
  9245  0393  07A9               	addwf	1+(?___awdiv)+02h
  9246  0394  0820               	movf	(0+(?___wmul)),w
  9247  0395  01A8               	clrf	0+(?___awdiv)+02h
  9248  0396  07A8               	addwf	0+(?___awdiv)+02h
  9249                           
  9250  0397  120A  158A  268B   	fcall	___awdiv
              120A  118A         
  9251  039C  1283               	bcf	status, 5	;RP0=0, select bank0
  9252  039D  1303               	bcf	status, 6	;RP1=0, select bank0
  9253  039E  0826               	movf	(0+(?___awdiv)),w
  9254  039F  3E12               	addlw	low(012h)
  9255  03A0  00B7               	movwf	(?_convert)
  9256  03A1  0827               	movf	(1+(?___awdiv)),w
  9257  03A2  1803               	skipnc
  9258  03A3  3E01               	addlw	1
  9259  03A4  3E00               	addlw	high(012h)
  9260  03A5  00B8               	movwf	1+(?_convert)
  9261  03A6  2BB5               	goto	l5067
  9262                           	
  9263  03A7                     l10689:	
  9264  03A7  2BB5               	goto	l5067
  9265                           	
  9266  03A8                     l10691:	
  9267  03A8  2BB5               	goto	l5067
  9268                           	line	26
  9269                           	
  9270  03A9                     l5079:	
  9271                           	
  9272  03A9                     l10693:	
  9273                           ;ir.c: 26: else return 0;
  9274  03A9  1283               	bcf	status, 5	;RP0=0, select bank0
  9275  03AA  1303               	bcf	status, 6	;RP1=0, select bank0
  9276  03AB  01B7               	clrf	(?_convert)
  9277  03AC  01B8               	clrf	(?_convert+1)
  9278  03AD  2BB5               	goto	l5067
  9279                           	
  9280  03AE                     l10695:	
  9281  03AE  2BB5               	goto	l5067
  9282                           	
  9283  03AF                     l5080:	
  9284  03AF  2BB5               	goto	l5067
  9285                           	
  9286  03B0                     l5078:	
  9287  03B0  2BB5               	goto	l5067
  9288                           	
  9289  03B1                     l5076:	
  9290  03B1  2BB5               	goto	l5067
  9291                           	
  9292  03B2                     l5074:	
  9293  03B2  2BB5               	goto	l5067
  9294                           	
  9295  03B3                     l5072:	
  9296  03B3  2BB5               	goto	l5067
  9297                           	
  9298  03B4                     l5070:	
  9299  03B4  2BB5               	goto	l5067
  9300                           	
  9301  03B5                     l5068:	
  9302                           	line	27
  9303                           	
  9304  03B5                     l5067:	
  9305  03B5  0008               	return
  9306                           	opt stack 0
  9307                           GLOBAL	__end_of_convert
  9308  03B6                     	__end_of_convert:
  9309 ;; =============== function _convert ends ============
  9310                           
  9311                           	signat	_convert,4218
  9312                           	global	_play_iCreate_song
  9313                           psect	text1271,local,class=CODE,delta=2
  9314                           global __ptext1271
  9315  15BF                     __ptext1271:
  9316                           
  9317 ;; *************** function _play_iCreate_song *****************
  9318 ;; Defined at:
  9319 ;;		line 26 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\songs.c"
  9320 ;; Parameters:    Size  Location     Type
  9321 ;;  song            1    wreg     unsigned char 
  9322 ;; Auto vars:     Size  Location     Type
  9323 ;;  song            1    2[BANK0 ] unsigned char 
  9324 ;; Return value:  Size  Location     Type
  9325 ;;		None               void
  9326 ;; Registers used:
  9327 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9328 ;; Tracked objects:
  9329 ;;		On entry : 0/0
  9330 ;;		On exit  : 0/0
  9331 ;;		Unchanged: 0/0
  9332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9333 ;;      Params:         0       0       0       0       0
  9334 ;;      Locals:         0       1       0       0       0
  9335 ;;      Temps:          0       0       0       0       0
  9336 ;;      Totals:         0       1       0       0       0
  9337 ;;Total ram usage:        1 bytes
  9338 ;; Hardware stack levels used:    1
  9339 ;; Hardware stack levels required when called:    2
  9340 ;; This function calls:
  9341 ;;		_ser_putch
  9342 ;; This function is called by:
  9343 ;;		_checkForFinalDestination
  9344 ;;		_lookForVictim
  9345 ;;		_findWalls
  9346 ;;		_checkIfHome
  9347 ;;		_main
  9348 ;; This function uses a non-reentrant model
  9349 ;;
  9350                           psect	text1271
  9351                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\songs.c"
  9352                           	line	26
  9353                           	global	__size_of_play_iCreate_song
  9354  0012                     	__size_of_play_iCreate_song	equ	__end_of_play_iCreate_song-_play_iCreate_song
  9355                           	
  9356  15BF                     _play_iCreate_song:	
  9357                           	opt	stack 4
  9358                           ; Regs used in _play_iCreate_song: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9359                           ;play_iCreate_song@song stored from wreg
  9360  15BF  1283               	bcf	status, 5	;RP0=0, select bank0
  9361  15C0  1303               	bcf	status, 6	;RP1=0, select bank0
  9362  15C1  00A2               	movwf	(play_iCreate_song@song)
  9363                           	line	27
  9364                           	
  9365  15C2                     l10635:	
  9366                           ;songs.c: 27: ser_putch(141);
  9367  15C2  308D               	movlw	(08Dh)
  9368  15C3  160A  118A  26AE   	fcall	_ser_putch
              160A  118A         
  9369                           	line	28
  9370                           ;songs.c: 28: ser_putch(song);
  9371  15C8  1283               	bcf	status, 5	;RP0=0, select bank0
  9372  15C9  1303               	bcf	status, 6	;RP1=0, select bank0
  9373  15CA  0822               	movf	(play_iCreate_song@song),w
  9374  15CB  160A  118A  26AE   	fcall	_ser_putch
              160A  118A         
  9375                           	line	29
  9376                           	
  9377  15D0                     l4374:	
  9378  15D0  0008               	return
  9379                           	opt stack 0
  9380                           GLOBAL	__end_of_play_iCreate_song
  9381  15D1                     	__end_of_play_iCreate_song:
  9382 ;; =============== function _play_iCreate_song ends ============
  9383                           
  9384                           	signat	_play_iCreate_song,4216
  9385                           	global	_ser_putArr
  9386                           psect	text1272,local,class=CODE,delta=2
  9387                           global __ptext1272
  9388  099F                     __ptext1272:
  9389                           
  9390 ;; *************** function _ser_putArr *****************
  9391 ;; Defined at:
  9392 ;;		line 73 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\ser.c"
  9393 ;; Parameters:    Size  Location     Type
  9394 ;;  array           2    2[BANK0 ] PTR unsigned char 
  9395 ;;		 -> longbeep(5), beep(5), champions(21), lookingForU2(29), 
  9396 ;;		 -> superMarioBros(25), finalCountdown(27), 
  9397 ;;  length          2    4[BANK0 ] int 
  9398 ;; Auto vars:     Size  Location     Type
  9399 ;;  i               2    9[BANK0 ] int 
  9400 ;; Return value:  Size  Location     Type
  9401 ;;		None               void
  9402 ;; Registers used:
  9403 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9404 ;; Tracked objects:
  9405 ;;		On entry : 0/0
  9406 ;;		On exit  : 0/0
  9407 ;;		Unchanged: 0/0
  9408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9409 ;;      Params:         0       4       0       0       0
  9410 ;;      Locals:         0       2       0       0       0
  9411 ;;      Temps:          0       3       0       0       0
  9412 ;;      Totals:         0       9       0       0       0
  9413 ;;Total ram usage:        9 bytes
  9414 ;; Hardware stack levels used:    1
  9415 ;; Hardware stack levels required when called:    2
  9416 ;; This function calls:
  9417 ;;		_ser_putch
  9418 ;; This function is called by:
  9419 ;;		_initSongs
  9420 ;; This function uses a non-reentrant model
  9421 ;;
  9422                           psect	text1272
  9423                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\ser.c"
  9424                           	line	73
  9425                           	global	__size_of_ser_putArr
  9426  0039                     	__size_of_ser_putArr	equ	__end_of_ser_putArr-_ser_putArr
  9427                           	
  9428  099F                     _ser_putArr:	
  9429                           	opt	stack 3
  9430                           ; Regs used in _ser_putArr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9431                           	line	74
  9432                           	
  9433  099F                     l10627:	
  9434                           ;ser.c: 74: for(int i =0; i< length; i++)
  9435  099F  1283               	bcf	status, 5	;RP0=0, select bank0
  9436  09A0  1303               	bcf	status, 6	;RP1=0, select bank0
  9437  09A1  01A9               	clrf	(ser_putArr@i)
  9438  09A2  01AA               	clrf	(ser_putArr@i+1)
  9439  09A3  29C8               	goto	l10633
  9440                           	line	75
  9441                           	
  9442  09A4                     l3643:	
  9443                           	line	76
  9444                           	
  9445  09A4                     l10629:	
  9446                           ;ser.c: 75: {
  9447                           ;ser.c: 76: ser_putch(array[i]);
  9448  09A4  1283               	bcf	status, 5	;RP0=0, select bank0
  9449  09A5  1303               	bcf	status, 6	;RP1=0, select bank0
  9450  09A6  0829               	movf	(ser_putArr@i),w
  9451  09A7  0722               	addwf	(ser_putArr@array),w
  9452  09A8  00A7               	movwf	(??_ser_putArr+1)+0
  9453  09A9  0823               	movf	(ser_putArr@array+1),w
  9454  09AA  00A6               	movwf	(??_ser_putArr+0)+0
  9455  09AB  1803               	skipnc
  9456  09AC  0AA6               	incf	(??_ser_putArr+0)+0,f
  9457  09AD  1FA9               	btfss	(ser_putArr@i),7
  9458  09AE  29B0               	goto	u4020
  9459  09AF  03A6               	decf	(??_ser_putArr+0)+0,f
  9460  09B0                     u4020:
  9461  09B0  1283               	bcf	status, 5	;RP0=0, select bank0
  9462  09B1  1303               	bcf	status, 6	;RP1=0, select bank0
  9463  09B2  0826               	movf	(??_ser_putArr+0)+0,w
  9464  09B3  00A8               	movwf	0+((??_ser_putArr+1)+0)+1
  9465  09B4  0827               	movf	0+(??_ser_putArr+1)+0,w
  9466  09B5  0084               	movwf	fsr0
  9467  09B6  1783               	bsf	status,7
  9468  09B7  1C28               	btfss	1+(??_ser_putArr+1)+0,0
  9469  09B8  1383               	bcf	status,7
  9470  09B9  0800               	movf	indf,w
  9471  09BA  160A  118A  26AE   	fcall	_ser_putch
              120A  158A         
  9472                           	line	74
  9473                           	
  9474  09BF                     l10631:	
  9475  09BF  3001               	movlw	low(01h)
  9476  09C0  1283               	bcf	status, 5	;RP0=0, select bank0
  9477  09C1  1303               	bcf	status, 6	;RP1=0, select bank0
  9478  09C2  07A9               	addwf	(ser_putArr@i),f
  9479  09C3  1803               	skipnc
  9480  09C4  0AAA               	incf	(ser_putArr@i+1),f
  9481  09C5  3000               	movlw	high(01h)
  9482  09C6  07AA               	addwf	(ser_putArr@i+1),f
  9483  09C7  29C8               	goto	l10633
  9484                           	
  9485  09C8                     l3642:	
  9486                           	
  9487  09C8                     l10633:	
  9488  09C8  082A               	movf	(ser_putArr@i+1),w
  9489  09C9  3A80               	xorlw	80h
  9490  09CA  00A6               	movwf	(??_ser_putArr+0)+0
  9491  09CB  0825               	movf	(ser_putArr@length+1),w
  9492  09CC  3A80               	xorlw	80h
  9493  09CD  0226               	subwf	(??_ser_putArr+0)+0,w
  9494  09CE  1D03               	skipz
  9495  09CF  29D2               	goto	u4035
  9496  09D0  0824               	movf	(ser_putArr@length),w
  9497  09D1  0229               	subwf	(ser_putArr@i),w
  9498  09D2                     u4035:
  9499                           
  9500  09D2  1C03               	skipc
  9501  09D3  29D5               	goto	u4031
  9502  09D4  29D6               	goto	u4030
  9503  09D5                     u4031:
  9504  09D5  29A4               	goto	l10629
  9505  09D6                     u4030:
  9506  09D6  29D7               	goto	l3645
  9507                           	
  9508  09D7                     l3644:	
  9509                           	line	78
  9510                           	
  9511  09D7                     l3645:	
  9512  09D7  0008               	return
  9513                           	opt stack 0
  9514                           GLOBAL	__end_of_ser_putArr
  9515  09D8                     	__end_of_ser_putArr:
  9516 ;; =============== function _ser_putArr ends ============
  9517                           
  9518                           	signat	_ser_putArr,8312
  9519                           	global	_ser_getch
  9520                           psect	text1273,local,class=CODE,delta=2
  9521                           global __ptext1273
  9522  16CF                     __ptext1273:
  9523                           
  9524 ;; *************** function _ser_getch *****************
  9525 ;; Defined at:
  9526 ;;		line 58 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\ser.c"
  9527 ;; Parameters:    Size  Location     Type
  9528 ;;		None
  9529 ;; Auto vars:     Size  Location     Type
  9530 ;;  c               1    1[BANK0 ] unsigned char 
  9531 ;; Return value:  Size  Location     Type
  9532 ;;                  1    wreg      unsigned char 
  9533 ;; Registers used:
  9534 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9535 ;; Tracked objects:
  9536 ;;		On entry : 0/0
  9537 ;;		On exit  : 0/0
  9538 ;;		Unchanged: 0/0
  9539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9540 ;;      Params:         0       0       0       0       0
  9541 ;;      Locals:         0       1       0       0       0
  9542 ;;      Temps:          0       1       0       0       0
  9543 ;;      Totals:         0       2       0       0       0
  9544 ;;Total ram usage:        2 bytes
  9545 ;; Hardware stack levels used:    1
  9546 ;; Hardware stack levels required when called:    2
  9547 ;; This function calls:
  9548 ;;		_ser_isrx
  9549 ;; This function is called by:
  9550 ;;		_driveForDistance
  9551 ;;		_lookForVictim
  9552 ;; This function uses a non-reentrant model
  9553 ;;
  9554                           psect	text1273
  9555                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\ser.c"
  9556                           	line	58
  9557                           	global	__size_of_ser_getch
  9558  0022                     	__size_of_ser_getch	equ	__end_of_ser_getch-_ser_getch
  9559                           	
  9560  16CF                     _ser_getch:	
  9561                           	opt	stack 3
  9562                           ; Regs used in _ser_getch: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9563                           	line	61
  9564                           	
  9565  16CF                     l10611:	
  9566                           ;ser.c: 59: unsigned char c;
  9567                           ;ser.c: 61: while (ser_isrx()==0)
  9568  16CF  2ED1               	goto	l10613
  9569                           	
  9570  16D0                     l3637:	
  9571                           	line	62
  9572                           ;ser.c: 62: continue;
  9573  16D0  2ED1               	goto	l10613
  9574                           	
  9575  16D1                     l3636:	
  9576                           	line	61
  9577                           	
  9578  16D1                     l10613:	
  9579  16D1  160A  118A  2621   	fcall	_ser_isrx
              160A  118A         
  9580  16D6  1C03               	btfss	status,0
  9581  16D7  2ED9               	goto	u4011
  9582  16D8  2EDA               	goto	u4010
  9583  16D9                     u4011:
  9584  16D9  2ED1               	goto	l10613
  9585  16DA                     u4010:
  9586                           	
  9587  16DA                     l3638:	
  9588                           	line	64
  9589                           ;ser.c: 64: GIE=0;
  9590  16DA  138B               	bcf	(95/8),(95)&7
  9591                           	line	65
  9592                           	
  9593  16DB                     l10615:	
  9594                           ;ser.c: 65: c=rxfifo[rxoptr];
  9595  16DB  1283               	bcf	status, 5	;RP0=0, select bank0
  9596  16DC  1303               	bcf	status, 6	;RP1=0, select bank0
  9597  16DD  0855               	movf	(_rxoptr),w
  9598  16DE  3ECE               	addlw	_rxfifo&0ffh
  9599  16DF  0084               	movwf	fsr0
  9600  16E0  1383               	bcf	status, 7	;select IRP bank1
  9601  16E1  0800               	movf	indf,w
  9602  16E2  00A0               	movwf	(??_ser_getch+0)+0
  9603  16E3  0820               	movf	(??_ser_getch+0)+0,w
  9604  16E4  00A1               	movwf	(ser_getch@c)
  9605                           	line	66
  9606                           	
  9607  16E5                     l10617:	
  9608                           ;ser.c: 66: ++rxoptr;
  9609  16E5  3001               	movlw	(01h)
  9610  16E6  00A0               	movwf	(??_ser_getch+0)+0
  9611  16E7  0820               	movf	(??_ser_getch+0)+0,w
  9612  16E8  07D5               	addwf	(_rxoptr),f	;volatile
  9613                           	line	67
  9614                           	
  9615  16E9                     l10619:	
  9616                           ;ser.c: 67: rxoptr &= (16-1);
  9617  16E9  300F               	movlw	(0Fh)
  9618  16EA  00A0               	movwf	(??_ser_getch+0)+0
  9619  16EB  0820               	movf	(??_ser_getch+0)+0,w
  9620  16EC  05D5               	andwf	(_rxoptr),f	;volatile
  9621                           	line	68
  9622                           	
  9623  16ED                     l10621:	
  9624                           ;ser.c: 68: GIE=1;
  9625  16ED  178B               	bsf	(95/8),(95)&7
  9626                           	line	69
  9627                           	
  9628  16EE                     l10623:	
  9629                           ;ser.c: 69: return c;
  9630  16EE  0821               	movf	(ser_getch@c),w
  9631  16EF  2EF0               	goto	l3639
  9632                           	
  9633  16F0                     l10625:	
  9634                           	line	70
  9635                           	
  9636  16F0                     l3639:	
  9637  16F0  0008               	return
  9638                           	opt stack 0
  9639                           GLOBAL	__end_of_ser_getch
  9640  16F1                     	__end_of_ser_getch:
  9641 ;; =============== function _ser_getch ends ============
  9642                           
  9643                           	signat	_ser_getch,89
  9644                           	global	_lcd_write_data
  9645                           psect	text1274,local,class=CODE,delta=2
  9646                           global __ptext1274
  9647  15D1                     __ptext1274:
  9648                           
  9649 ;; *************** function _lcd_write_data *****************
  9650 ;; Defined at:
  9651 ;;		line 20 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\lcd.c"
  9652 ;; Parameters:    Size  Location     Type
  9653 ;;  databyte        1    wreg     unsigned char 
  9654 ;; Auto vars:     Size  Location     Type
  9655 ;;  databyte        1    2[BANK0 ] unsigned char 
  9656 ;; Return value:  Size  Location     Type
  9657 ;;		None               void
  9658 ;; Registers used:
  9659 ;;		wreg
  9660 ;; Tracked objects:
  9661 ;;		On entry : 0/0
  9662 ;;		On exit  : 0/0
  9663 ;;		Unchanged: 0/0
  9664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9665 ;;      Params:         0       0       0       0       0
  9666 ;;      Locals:         0       1       0       0       0
  9667 ;;      Temps:          0       2       0       0       0
  9668 ;;      Totals:         0       3       0       0       0
  9669 ;;Total ram usage:        3 bytes
  9670 ;; Hardware stack levels used:    1
  9671 ;; Hardware stack levels required when called:    1
  9672 ;; This function calls:
  9673 ;;		Nothing
  9674 ;; This function is called by:
  9675 ;;		_lcd_write_string
  9676 ;;		_lcd_write_1_digit_bcd
  9677 ;;		_goBackward
  9678 ;;		_goForward
  9679 ;;		_goLeft
  9680 ;;		_goReverse
  9681 ;;		_goRight
  9682 ;;		_checkForFinalDestination
  9683 ;;		_lookForVictim
  9684 ;;		_findWalls
  9685 ;;		_updateLocation
  9686 ;;		_lcd_write_3_digit_bcd
  9687 ;; This function uses a non-reentrant model
  9688 ;;
  9689                           psect	text1274
  9690                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\lcd.c"
  9691                           	line	20
  9692                           	global	__size_of_lcd_write_data
  9693  0013                     	__size_of_lcd_write_data	equ	__end_of_lcd_write_data-_lcd_write_data
  9694                           	
  9695  15D1                     _lcd_write_data:	
  9696                           	opt	stack 4
  9697                           ; Regs used in _lcd_write_data: [wreg]
  9698                           ;lcd_write_data@databyte stored from wreg
  9699  15D1  1283               	bcf	status, 5	;RP0=0, select bank0
  9700  15D2  1303               	bcf	status, 6	;RP1=0, select bank0
  9701  15D3  00A2               	movwf	(lcd_write_data@databyte)
  9702                           	line	21
  9703                           	
  9704  15D4                     l10603:	
  9705                           ;lcd.c: 21: RE2 = 0;
  9706  15D4  1109               	bcf	(74/8),(74)&7
  9707                           	line	22
  9708                           ;lcd.c: 22: RE1 = 0;
  9709  15D5  1089               	bcf	(73/8),(73)&7
  9710                           	line	23
  9711                           ;lcd.c: 23: RE0 = 1;
  9712  15D6  1409               	bsf	(72/8),(72)&7
  9713                           	line	24
  9714                           	
  9715  15D7                     l10605:	
  9716                           ;lcd.c: 24: PORTD = databyte;
  9717  15D7  0822               	movf	(lcd_write_data@databyte),w
  9718  15D8  0088               	movwf	(8)	;volatile
  9719                           	line	25
  9720                           	
  9721  15D9                     l10607:	
  9722                           ;lcd.c: 25: RE2 = 1;
  9723  15D9  1509               	bsf	(74/8),(74)&7
  9724                           	line	26
  9725                           	
  9726  15DA                     l10609:	
  9727                           ;lcd.c: 26: RE2 = 0;
  9728  15DA  1109               	bcf	(74/8),(74)&7
  9729                           	line	27
  9730                           ;lcd.c: 27: _delay((unsigned long)((1)*(20000000/4000.0)));
  9731                           	opt asmopt_off
  9732  15DB  3007               movlw	7
  9733  15DC  00A1               movwf	((??_lcd_write_data+0)+0+1),f
  9734  15DD  307D               	movlw	125
  9735  15DE  00A0               movwf	((??_lcd_write_data+0)+0),f
  9736  15DF                     u4967:
  9737  15DF  0BA0               	decfsz	((??_lcd_write_data+0)+0),f
  9738  15E0  2DDF               	goto	u4967
  9739  15E1  0BA1               	decfsz	((??_lcd_write_data+0)+0+1),f
  9740  15E2  2DDF               	goto	u4967
  9741                           opt asmopt_on
  9742                           
  9743                           	line	28
  9744                           	
  9745  15E3                     l2129:	
  9746  15E3  0008               	return
  9747                           	opt stack 0
  9748                           GLOBAL	__end_of_lcd_write_data
  9749  15E4                     	__end_of_lcd_write_data:
  9750 ;; =============== function _lcd_write_data ends ============
  9751                           
  9752                           	signat	_lcd_write_data,4216
  9753                           	global	_lcd_write_control
  9754                           psect	text1275,local,class=CODE,delta=2
  9755                           global __ptext1275
  9756  15F7                     __ptext1275:
  9757                           
  9758 ;; *************** function _lcd_write_control *****************
  9759 ;; Defined at:
  9760 ;;		line 8 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\lcd.c"
  9761 ;; Parameters:    Size  Location     Type
  9762 ;;  databyte        1    wreg     unsigned char 
  9763 ;; Auto vars:     Size  Location     Type
  9764 ;;  databyte        1    2[BANK0 ] unsigned char 
  9765 ;; Return value:  Size  Location     Type
  9766 ;;		None               void
  9767 ;; Registers used:
  9768 ;;		wreg
  9769 ;; Tracked objects:
  9770 ;;		On entry : 0/0
  9771 ;;		On exit  : 0/0
  9772 ;;		Unchanged: 0/0
  9773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9774 ;;      Params:         0       0       0       0       0
  9775 ;;      Locals:         0       1       0       0       0
  9776 ;;      Temps:          0       2       0       0       0
  9777 ;;      Totals:         0       3       0       0       0
  9778 ;;Total ram usage:        3 bytes
  9779 ;; Hardware stack levels used:    1
  9780 ;; Hardware stack levels required when called:    1
  9781 ;; This function calls:
  9782 ;;		Nothing
  9783 ;; This function is called by:
  9784 ;;		_lcd_set_cursor
  9785 ;;		_lcd_init
  9786 ;; This function uses a non-reentrant model
  9787 ;;
  9788                           psect	text1275
  9789                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\lcd.c"
  9790                           	line	8
  9791                           	global	__size_of_lcd_write_control
  9792  0014                     	__size_of_lcd_write_control	equ	__end_of_lcd_write_control-_lcd_write_control
  9793                           	
  9794  15F7                     _lcd_write_control:	
  9795                           	opt	stack 4
  9796                           ; Regs used in _lcd_write_control: [wreg]
  9797                           ;lcd_write_control@databyte stored from wreg
  9798  15F7  1283               	bcf	status, 5	;RP0=0, select bank0
  9799  15F8  1303               	bcf	status, 6	;RP1=0, select bank0
  9800  15F9  00A2               	movwf	(lcd_write_control@databyte)
  9801                           	line	9
  9802                           	
  9803  15FA                     l10595:	
  9804                           ;lcd.c: 9: RE2 = 0;
  9805  15FA  1109               	bcf	(74/8),(74)&7
  9806                           	line	10
  9807                           ;lcd.c: 10: RE1 = 0;
  9808  15FB  1089               	bcf	(73/8),(73)&7
  9809                           	line	11
  9810                           ;lcd.c: 11: RE0 = 0;
  9811  15FC  1009               	bcf	(72/8),(72)&7
  9812                           	line	12
  9813                           	
  9814  15FD                     l10597:	
  9815                           ;lcd.c: 12: PORTD = databyte;
  9816  15FD  0822               	movf	(lcd_write_control@databyte),w
  9817  15FE  0088               	movwf	(8)	;volatile
  9818                           	line	13
  9819                           	
  9820  15FF                     l10599:	
  9821                           ;lcd.c: 13: RE2 = 1;
  9822  15FF  1509               	bsf	(74/8),(74)&7
  9823                           	line	14
  9824                           	
  9825  1600                     l10601:	
  9826                           ;lcd.c: 14: RE2 = 0;
  9827  1600  1109               	bcf	(74/8),(74)&7
  9828                           	line	15
  9829                           ;lcd.c: 15: _delay((unsigned long)((2)*(20000000/4000.0)));
  9830                           	opt asmopt_off
  9831  1601  300D               movlw	13
  9832  1602  00A1               movwf	((??_lcd_write_control+0)+0+1),f
  9833  1603  30FB               	movlw	251
  9834  1604  00A0               movwf	((??_lcd_write_control+0)+0),f
  9835  1605                     u4977:
  9836  1605  0BA0               	decfsz	((??_lcd_write_control+0)+0),f
  9837  1606  2E05               	goto	u4977
  9838  1607  0BA1               	decfsz	((??_lcd_write_control+0)+0+1),f
  9839  1608  2E05               	goto	u4977
  9840  1609  2E0A               	nop2
  9841                           opt asmopt_on
  9842                           
  9843                           	line	16
  9844                           	
  9845  160A                     l2126:	
  9846  160A  0008               	return
  9847                           	opt stack 0
  9848                           GLOBAL	__end_of_lcd_write_control
  9849  160B                     	__end_of_lcd_write_control:
  9850 ;; =============== function _lcd_write_control ends ============
  9851                           
  9852                           	signat	_lcd_write_control,4216
  9853                           	global	_writeEEPROM
  9854                           psect	text1276,local,class=CODE,delta=2
  9855                           global __ptext1276
  9856  0B50                     __ptext1276:
  9857                           
  9858 ;; *************** function _writeEEPROM *****************
  9859 ;; Defined at:
  9860 ;;		line 27 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\eeprom.c"
  9861 ;; Parameters:    Size  Location     Type
  9862 ;;  data            1    wreg     unsigned char 
  9863 ;;  addressH        1    1[BANK0 ] unsigned char 
  9864 ;;  addressL        1    2[BANK0 ] unsigned char 
  9865 ;; Auto vars:     Size  Location     Type
  9866 ;;  data            1    6[BANK0 ] unsigned char 
  9867 ;; Return value:  Size  Location     Type
  9868 ;;		None               void
  9869 ;; Registers used:
  9870 ;;		wreg, status,2, status,0, pclath, cstack
  9871 ;; Tracked objects:
  9872 ;;		On entry : 0/0
  9873 ;;		On exit  : 0/0
  9874 ;;		Unchanged: 0/0
  9875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9876 ;;      Params:         0       2       0       0       0
  9877 ;;      Locals:         0       1       0       0       0
  9878 ;;      Temps:          0       3       0       0       0
  9879 ;;      Totals:         0       6       0       0       0
  9880 ;;Total ram usage:        6 bytes
  9881 ;; Hardware stack levels used:    1
  9882 ;; Hardware stack levels required when called:    2
  9883 ;; This function calls:
  9884 ;;		_initEEPROMMode
  9885 ;;		_writeSPIByte
  9886 ;; This function is called by:
  9887 ;;		_addNewData
  9888 ;;		_testEEPROM
  9889 ;; This function uses a non-reentrant model
  9890 ;;
  9891                           psect	text1276
  9892                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\eeprom.c"
  9893                           	line	27
  9894                           	global	__size_of_writeEEPROM
  9895  0044                     	__size_of_writeEEPROM	equ	__end_of_writeEEPROM-_writeEEPROM
  9896                           	
  9897  0B50                     _writeEEPROM:	
  9898                           	opt	stack 3
  9899                           ; Regs used in _writeEEPROM: [wreg+status,2+status,0+pclath+cstack]
  9900                           ;writeEEPROM@data stored from wreg
  9901                           	line	29
  9902  0B50  1283               	bcf	status, 5	;RP0=0, select bank0
  9903  0B51  1303               	bcf	status, 6	;RP1=0, select bank0
  9904  0B52  00A6               	movwf	(writeEEPROM@data)
  9905                           	
  9906  0B53                     l10577:	
  9907                           ;eeprom.c: 29: _delay((unsigned long)((100)*(20000000/4000.0)));
  9908                           	opt asmopt_off
  9909  0B53  3003               movlw  3
  9910  0B54  00A5               movwf	((??_writeEEPROM+0)+0+2),f
  9911  0B55  308A               movlw	138
  9912  0B56  00A4               movwf	((??_writeEEPROM+0)+0+1),f
  9913  0B57  3056               	movlw	86
  9914  0B58  00A3               movwf	((??_writeEEPROM+0)+0),f
  9915  0B59                     u4987:
  9916  0B59  0BA3               	decfsz	((??_writeEEPROM+0)+0),f
  9917  0B5A  2B59               	goto	u4987
  9918  0B5B  0BA4               	decfsz	((??_writeEEPROM+0)+0+1),f
  9919  0B5C  2B59               	goto	u4987
  9920  0B5D  0BA5               	decfsz	((??_writeEEPROM+0)+0+2),f
  9921  0B5E  2B59               	goto	u4987
  9922  0B5F  2B60               	nop2
  9923                           opt asmopt_on
  9924                           
  9925                           	line	30
  9926                           	
  9927  0B60                     l10579:	
  9928                           ;eeprom.c: 30: initEEPROMMode();
  9929  0B60  160A  118A  256D   	fcall	_initEEPROMMode
              120A  158A         
  9930                           	line	32
  9931                           	
  9932  0B65                     l10581:	
  9933                           ;eeprom.c: 32: writeSPIByte(6);
  9934  0B65  3006               	movlw	(06h)
  9935  0B66  160A  118A  2592   	fcall	_writeSPIByte
              120A  158A         
  9936                           	line	33
  9937                           	
  9938  0B6B                     l10583:	
  9939                           ;eeprom.c: 33: initEEPROMMode();
  9940  0B6B  160A  118A  256D   	fcall	_initEEPROMMode
              120A  158A         
  9941                           	line	36
  9942                           	
  9943  0B70                     l10585:	
  9944                           ;eeprom.c: 36: writeSPIByte(2);
  9945  0B70  3002               	movlw	(02h)
  9946  0B71  160A  118A  2592   	fcall	_writeSPIByte
              120A  158A         
  9947                           	line	39
  9948                           	
  9949  0B76                     l10587:	
  9950                           ;eeprom.c: 39: writeSPIByte(addressH);
  9951  0B76  1283               	bcf	status, 5	;RP0=0, select bank0
  9952  0B77  1303               	bcf	status, 6	;RP1=0, select bank0
  9953  0B78  0821               	movf	(writeEEPROM@addressH),w
  9954  0B79  160A  118A  2592   	fcall	_writeSPIByte
              120A  158A         
  9955                           	line	42
  9956                           	
  9957  0B7E                     l10589:	
  9958                           ;eeprom.c: 42: writeSPIByte(addressL);
  9959  0B7E  1283               	bcf	status, 5	;RP0=0, select bank0
  9960  0B7F  1303               	bcf	status, 6	;RP1=0, select bank0
  9961  0B80  0822               	movf	(writeEEPROM@addressL),w
  9962  0B81  160A  118A  2592   	fcall	_writeSPIByte
              120A  158A         
  9963                           	line	45
  9964                           	
  9965  0B86                     l10591:	
  9966                           ;eeprom.c: 45: writeSPIByte(data);
  9967  0B86  1283               	bcf	status, 5	;RP0=0, select bank0
  9968  0B87  1303               	bcf	status, 6	;RP1=0, select bank0
  9969  0B88  0826               	movf	(writeEEPROM@data),w
  9970  0B89  160A  118A  2592   	fcall	_writeSPIByte
              120A  158A         
  9971                           	line	46
  9972                           	
  9973  0B8E                     l10593:	
  9974                           ;eeprom.c: 46: initEEPROMMode();
  9975  0B8E  160A  118A  256D   	fcall	_initEEPROMMode
              120A  158A         
  9976                           	line	47
  9977                           	
  9978  0B93                     l1410:	
  9979  0B93  0008               	return
  9980                           	opt stack 0
  9981                           GLOBAL	__end_of_writeEEPROM
  9982  0B94                     	__end_of_writeEEPROM:
  9983 ;; =============== function _writeEEPROM ends ============
  9984                           
  9985                           	signat	_writeEEPROM,12408
  9986                           	global	_init_adc
  9987                           psect	text1277,local,class=CODE,delta=2
  9988                           global __ptext1277
  9989  160B                     __ptext1277:
  9990                           
  9991 ;; *************** function _init_adc *****************
  9992 ;; Defined at:
  9993 ;;		line 48 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\adc.c"
  9994 ;; Parameters:    Size  Location     Type
  9995 ;;		None
  9996 ;; Auto vars:     Size  Location     Type
  9997 ;;		None
  9998 ;; Return value:  Size  Location     Type
  9999 ;;		None               void
 10000 ;; Registers used:
 10001 ;;		wreg, status,2
 10002 ;; Tracked objects:
 10003 ;;		On entry : 0/0
 10004 ;;		On exit  : 0/0
 10005 ;;		Unchanged: 0/0
 10006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10007 ;;      Params:         0       0       0       0       0
 10008 ;;      Locals:         0       0       0       0       0
 10009 ;;      Temps:          0       1       0       0       0
 10010 ;;      Totals:         0       1       0       0       0
 10011 ;;Total ram usage:        1 bytes
 10012 ;; Hardware stack levels used:    1
 10013 ;; Hardware stack levels required when called:    1
 10014 ;; This function calls:
 10015 ;;		Nothing
 10016 ;; This function is called by:
 10017 ;;		_init
 10018 ;; This function uses a non-reentrant model
 10019 ;;
 10020                           psect	text1277
 10021                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\adc.c"
 10022                           	line	48
 10023                           	global	__size_of_init_adc
 10024  0016                     	__size_of_init_adc	equ	__end_of_init_adc-_init_adc
 10025                           	
 10026  160B                     _init_adc:	
 10027                           	opt	stack 5
 10028                           ; Regs used in _init_adc: [wreg+status,2]
 10029                           	line	50
 10030                           	
 10031  160B                     l10567:	
 10032                           ;adc.c: 50: PORTA = 0;
 10033  160B  1283               	bcf	status, 5	;RP0=0, select bank0
 10034  160C  1303               	bcf	status, 6	;RP1=0, select bank0
 10035  160D  0185               	clrf	(5)	;volatile
 10036                           	line	51
 10037                           	
 10038  160E                     l10569:	
 10039                           ;adc.c: 51: TRISA = 0b00111111;
 10040  160E  303F               	movlw	(03Fh)
 10041  160F  1683               	bsf	status, 5	;RP0=1, select bank1
 10042  1610  1303               	bcf	status, 6	;RP1=0, select bank1
 10043  1611  0085               	movwf	(133)^080h	;volatile
 10044                           	line	54
 10045                           	
 10046  1612                     l10571:	
 10047                           ;adc.c: 54: ADCON0 = 0b10100001;
 10048  1612  30A1               	movlw	(0A1h)
 10049  1613  1283               	bcf	status, 5	;RP0=0, select bank0
 10050  1614  1303               	bcf	status, 6	;RP1=0, select bank0
 10051  1615  009F               	movwf	(31)	;volatile
 10052                           	line	55
 10053                           	
 10054  1616                     l10573:	
 10055                           ;adc.c: 55: ADCON1 = 0b00000010;
 10056  1616  3002               	movlw	(02h)
 10057  1617  1683               	bsf	status, 5	;RP0=1, select bank1
 10058  1618  1303               	bcf	status, 6	;RP1=0, select bank1
 10059  1619  009F               	movwf	(159)^080h	;volatile
 10060                           	line	57
 10061                           	
 10062  161A                     l10575:	
 10063                           ;adc.c: 57: _delay((unsigned long)((50)*(20000000/4000000.0)));
 10064                           	opt asmopt_off
 10065  161A  3053               movlw	83
 10066  161B  1283               	bcf	status, 5	;RP0=0, select bank0
 10067  161C  1303               	bcf	status, 6	;RP1=0, select bank0
 10068  161D  00A0               movwf	(??_init_adc+0)+0,f
 10069  161E                     u4997:
 10070  161E  0BA0               decfsz	(??_init_adc+0)+0,f
 10071  161F  2E1E               	goto	u4997
 10072                           opt asmopt_on
 10073                           
 10074                           	line	58
 10075                           	
 10076  1620                     l700:	
 10077  1620  0008               	return
 10078                           	opt stack 0
 10079                           GLOBAL	__end_of_init_adc
 10080  1621                     	__end_of_init_adc:
 10081 ;; =============== function _init_adc ends ============
 10082                           
 10083                           	signat	_init_adc,88
 10084                           	global	_adc_read
 10085                           psect	text1278,local,class=CODE,delta=2
 10086                           global __ptext1278
 10087  0A4F                     __ptext1278:
 10088                           
 10089 ;; *************** function _adc_read *****************
 10090 ;; Defined at:
 10091 ;;		line 62 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\adc.c"
 10092 ;; Parameters:    Size  Location     Type
 10093 ;;		None
 10094 ;; Auto vars:     Size  Location     Type
 10095 ;;  adc_value       2   21[BANK0 ] volatile int 
 10096 ;; Return value:  Size  Location     Type
 10097 ;;                  2   15[BANK0 ] int 
 10098 ;; Registers used:
 10099 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 10100 ;; Tracked objects:
 10101 ;;		On entry : 0/0
 10102 ;;		On exit  : 0/0
 10103 ;;		Unchanged: 0/0
 10104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10105 ;;      Params:         0       2       0       0       0
 10106 ;;      Locals:         0       2       0       0       0
 10107 ;;      Temps:          0       4       0       0       0
 10108 ;;      Totals:         0       8       0       0       0
 10109 ;;Total ram usage:        8 bytes
 10110 ;; Hardware stack levels used:    1
 10111 ;; Hardware stack levels required when called:    2
 10112 ;; This function calls:
 10113 ;;		___awdiv
 10114 ;; This function is called by:
 10115 ;;		_adc_read_channel
 10116 ;; This function uses a non-reentrant model
 10117 ;;
 10118                           psect	text1278
 10119                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\adc.c"
 10120                           	line	62
 10121                           	global	__size_of_adc_read
 10122  003F                     	__size_of_adc_read	equ	__end_of_adc_read-_adc_read
 10123                           	
 10124  0A4F                     _adc_read:	
 10125                           	opt	stack 2
 10126                           ; Regs used in _adc_read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 10127                           	line	65
 10128                           	
 10129  0A4F                     l10557:	
 10130                           ;adc.c: 63: volatile int adc_value;
 10131                           ;adc.c: 65: ADRESH = 0;
 10132  0A4F  1283               	bcf	status, 5	;RP0=0, select bank0
 10133  0A50  1303               	bcf	status, 6	;RP1=0, select bank0
 10134  0A51  019E               	clrf	(30)	;volatile
 10135                           	line	66
 10136                           ;adc.c: 66: ADRESL = 0;
 10137  0A52  1683               	bsf	status, 5	;RP0=1, select bank1
 10138  0A53  1303               	bcf	status, 6	;RP1=0, select bank1
 10139  0A54  019E               	clrf	(158)^080h	;volatile
 10140                           	line	68
 10141                           	
 10142  0A55                     l10559:	
 10143                           ;adc.c: 68: GO = 1;
 10144  0A55  1283               	bcf	status, 5	;RP0=0, select bank0
 10145  0A56  1303               	bcf	status, 6	;RP1=0, select bank0
 10146  0A57  151F               	bsf	(250/8),(250)&7
 10147                           	line	69
 10148                           ;adc.c: 69: while(GO) continue;
 10149  0A58  2A59               	goto	l703
 10150                           	
 10151  0A59                     l704:	
 10152                           	
 10153  0A59                     l703:	
 10154  0A59  191F               	btfsc	(250/8),(250)&7
 10155  0A5A  2A5C               	goto	u3991
 10156  0A5B  2A5D               	goto	u3990
 10157  0A5C                     u3991:
 10158  0A5C  2A59               	goto	l703
 10159  0A5D                     u3990:
 10160  0A5D  2A5E               	goto	l10561
 10161                           	
 10162  0A5E                     l705:	
 10163                           	line	75
 10164                           	
 10165  0A5E                     l10561:	
 10166                           ;adc.c: 75: adc_value = (ADRESH * 4) + (ADRESL / 64);
 10167  0A5E  3040               	movlw	low(040h)
 10168  0A5F  00A6               	movwf	(?___awdiv)
 10169  0A60  3000               	movlw	high(040h)
 10170  0A61  00A7               	movwf	((?___awdiv))+1
 10171  0A62  1683               	bsf	status, 5	;RP0=1, select bank1
 10172  0A63  1303               	bcf	status, 6	;RP1=0, select bank1
 10173  0A64  081E               	movf	(158)^080h,w	;volatile
 10174  0A65  1283               	bcf	status, 5	;RP0=0, select bank0
 10175  0A66  1303               	bcf	status, 6	;RP1=0, select bank0
 10176  0A67  00B1               	movwf	(??_adc_read+0)+0
 10177  0A68  01B2               	clrf	(??_adc_read+0)+0+1
 10178  0A69  0831               	movf	0+(??_adc_read+0)+0,w
 10179  0A6A  00A8               	movwf	0+(?___awdiv)+02h
 10180  0A6B  0832               	movf	1+(??_adc_read+0)+0,w
 10181  0A6C  00A9               	movwf	1+(?___awdiv)+02h
 10182  0A6D  120A  158A  268B   	fcall	___awdiv
              120A  158A         
 10183  0A72  1283               	bcf	status, 5	;RP0=0, select bank0
 10184  0A73  1303               	bcf	status, 6	;RP1=0, select bank0
 10185  0A74  081E               	movf	(30),w	;volatile
 10186  0A75  00B3               	movwf	(??_adc_read+2)+0
 10187  0A76  01B4               	clrf	(??_adc_read+2)+0+1
 10188  0A77  3002               	movlw	02h
 10189  0A78  00FF               	movwf	btemp+1
 10190  0A79                     u4005:
 10191  0A79  1003               	clrc
 10192  0A7A  0DB3               	rlf	(??_adc_read+2)+0,f
 10193  0A7B  0DB4               	rlf	(??_adc_read+2)+1,f
 10194  0A7C  0BFF               	decfsz	btemp+1,f
 10195  0A7D  2A79               	goto	u4005
 10196  0A7E  0826               	movf	(0+(?___awdiv)),w
 10197  0A7F  0733               	addwf	0+(??_adc_read+2)+0,w
 10198  0A80  00B5               	movwf	(adc_read@adc_value)	;volatile
 10199  0A81  0827               	movf	(1+(?___awdiv)),w
 10200  0A82  1803               	skipnc
 10201  0A83  0A27               	incf	(1+(?___awdiv)),w
 10202  0A84  0734               	addwf	1+(??_adc_read+2)+0,w
 10203  0A85  00B6               	movwf	1+(adc_read@adc_value)	;volatile
 10204                           	line	77
 10205                           	
 10206  0A86                     l10563:	
 10207                           ;adc.c: 77: return (adc_value);
 10208  0A86  0836               	movf	(adc_read@adc_value+1),w	;volatile
 10209  0A87  01B0               	clrf	(?_adc_read+1)
 10210  0A88  07B0               	addwf	(?_adc_read+1)
 10211  0A89  0835               	movf	(adc_read@adc_value),w	;volatile
 10212  0A8A  01AF               	clrf	(?_adc_read)
 10213  0A8B  07AF               	addwf	(?_adc_read)
 10214                           
 10215  0A8C  2A8D               	goto	l706
 10216                           	
 10217  0A8D                     l10565:	
 10218                           	line	78
 10219                           	
 10220  0A8D                     l706:	
 10221  0A8D  0008               	return
 10222                           	opt stack 0
 10223                           GLOBAL	__end_of_adc_read
 10224  0A8E                     	__end_of_adc_read:
 10225 ;; =============== function _adc_read ends ============
 10226                           
 10227                           	signat	_adc_read,90
 10228                           	global	___awdiv
 10229                           psect	text1279,local,class=CODE,delta=2
 10230                           global __ptext1279
 10231  0E8B                     __ptext1279:
 10232                           
 10233 ;; *************** function ___awdiv *****************
 10234 ;; Defined at:
 10235 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\awdiv.c"
 10236 ;; Parameters:    Size  Location     Type
 10237 ;;  divisor         2    6[BANK0 ] int 
 10238 ;;  dividend        2    8[BANK0 ] int 
 10239 ;; Auto vars:     Size  Location     Type
 10240 ;;  quotient        2   13[BANK0 ] int 
 10241 ;;  sign            1   12[BANK0 ] unsigned char 
 10242 ;;  counter         1   11[BANK0 ] unsigned char 
 10243 ;; Return value:  Size  Location     Type
 10244 ;;                  2    6[BANK0 ] int 
 10245 ;; Registers used:
 10246 ;;		wreg, status,2, status,0
 10247 ;; Tracked objects:
 10248 ;;		On entry : 0/0
 10249 ;;		On exit  : 0/0
 10250 ;;		Unchanged: 0/0
 10251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10252 ;;      Params:         0       4       0       0       0
 10253 ;;      Locals:         0       4       0       0       0
 10254 ;;      Temps:          0       1       0       0       0
 10255 ;;      Totals:         0       9       0       0       0
 10256 ;;Total ram usage:        9 bytes
 10257 ;; Hardware stack levels used:    1
 10258 ;; Hardware stack levels required when called:    1
 10259 ;; This function calls:
 10260 ;;		Nothing
 10261 ;; This function is called by:
 10262 ;;		_adc_read
 10263 ;;		_convert
 10264 ;; This function uses a non-reentrant model
 10265 ;;
 10266                           psect	text1279
 10267                           	file	"C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\awdiv.c"
 10268                           	line	5
 10269                           	global	__size_of___awdiv
 10270  0076                     	__size_of___awdiv	equ	__end_of___awdiv-___awdiv
 10271                           	
 10272  0E8B                     ___awdiv:	
 10273                           	opt	stack 3
 10274                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10275                           	line	9
 10276                           	
 10277  0E8B                     l10517:	
 10278  0E8B  1283               	bcf	status, 5	;RP0=0, select bank0
 10279  0E8C  1303               	bcf	status, 6	;RP1=0, select bank0
 10280  0E8D  01AC               	clrf	(___awdiv@sign)
 10281                           	line	10
 10282  0E8E  1FA7               	btfss	(___awdiv@divisor+1),7
 10283  0E8F  2E91               	goto	u3891
 10284  0E90  2E92               	goto	u3890
 10285  0E91                     u3891:
 10286  0E91  2E9B               	goto	l10521
 10287  0E92                     u3890:
 10288                           	line	11
 10289                           	
 10290  0E92                     l10519:	
 10291  0E92  09A6               	comf	(___awdiv@divisor),f
 10292  0E93  09A7               	comf	(___awdiv@divisor+1),f
 10293  0E94  0AA6               	incf	(___awdiv@divisor),f
 10294  0E95  1903               	skipnz
 10295  0E96  0AA7               	incf	(___awdiv@divisor+1),f
 10296                           	line	12
 10297  0E97  01AC               	clrf	(___awdiv@sign)
 10298  0E98  1403               	bsf	status,0
 10299  0E99  0DAC               	rlf	(___awdiv@sign),f
 10300  0E9A  2E9B               	goto	l10521
 10301                           	line	13
 10302                           	
 10303  0E9B                     l7657:	
 10304                           	line	14
 10305                           	
 10306  0E9B                     l10521:	
 10307  0E9B  1FA9               	btfss	(___awdiv@dividend+1),7
 10308  0E9C  2E9E               	goto	u3901
 10309  0E9D  2E9F               	goto	u3900
 10310  0E9E                     u3901:
 10311  0E9E  2EA9               	goto	l10527
 10312  0E9F                     u3900:
 10313                           	line	15
 10314                           	
 10315  0E9F                     l10523:	
 10316  0E9F  09A8               	comf	(___awdiv@dividend),f
 10317  0EA0  09A9               	comf	(___awdiv@dividend+1),f
 10318  0EA1  0AA8               	incf	(___awdiv@dividend),f
 10319  0EA2  1903               	skipnz
 10320  0EA3  0AA9               	incf	(___awdiv@dividend+1),f
 10321                           	line	16
 10322                           	
 10323  0EA4                     l10525:	
 10324  0EA4  3001               	movlw	(01h)
 10325  0EA5  00AA               	movwf	(??___awdiv+0)+0
 10326  0EA6  082A               	movf	(??___awdiv+0)+0,w
 10327  0EA7  06AC               	xorwf	(___awdiv@sign),f
 10328  0EA8  2EA9               	goto	l10527
 10329                           	line	17
 10330                           	
 10331  0EA9                     l7658:	
 10332                           	line	18
 10333                           	
 10334  0EA9                     l10527:	
 10335  0EA9  01AD               	clrf	(___awdiv@quotient)
 10336  0EAA  01AE               	clrf	(___awdiv@quotient+1)
 10337                           	line	19
 10338                           	
 10339  0EAB                     l10529:	
 10340  0EAB  0827               	movf	(___awdiv@divisor+1),w
 10341  0EAC  0426               	iorwf	(___awdiv@divisor),w
 10342  0EAD  1903               	skipnz
 10343  0EAE  2EB0               	goto	u3911
 10344  0EAF  2EB1               	goto	u3910
 10345  0EB0                     u3911:
 10346  0EB0  2EEF               	goto	l10549
 10347  0EB1                     u3910:
 10348                           	line	20
 10349                           	
 10350  0EB1                     l10531:	
 10351  0EB1  01AB               	clrf	(___awdiv@counter)
 10352  0EB2  1403               	bsf	status,0
 10353  0EB3  0DAB               	rlf	(___awdiv@counter),f
 10354                           	line	21
 10355  0EB4  2EC1               	goto	l10537
 10356                           	
 10357  0EB5                     l7661:	
 10358                           	line	22
 10359                           	
 10360  0EB5                     l10533:	
 10361  0EB5  3001               	movlw	01h
 10362                           	
 10363  0EB6                     u3925:
 10364  0EB6  1003               	clrc
 10365  0EB7  0DA6               	rlf	(___awdiv@divisor),f
 10366  0EB8  0DA7               	rlf	(___awdiv@divisor+1),f
 10367  0EB9  3EFF               	addlw	-1
 10368  0EBA  1D03               	skipz
 10369  0EBB  2EB6               	goto	u3925
 10370                           	line	23
 10371                           	
 10372  0EBC                     l10535:	
 10373  0EBC  3001               	movlw	(01h)
 10374  0EBD  00AA               	movwf	(??___awdiv+0)+0
 10375  0EBE  082A               	movf	(??___awdiv+0)+0,w
 10376  0EBF  07AB               	addwf	(___awdiv@counter),f
 10377  0EC0  2EC1               	goto	l10537
 10378                           	line	24
 10379                           	
 10380  0EC1                     l7660:	
 10381                           	line	21
 10382                           	
 10383  0EC1                     l10537:	
 10384  0EC1  1FA7               	btfss	(___awdiv@divisor+1),(15)&7
 10385  0EC2  2EC4               	goto	u3931
 10386  0EC3  2EC5               	goto	u3930
 10387  0EC4                     u3931:
 10388  0EC4  2EB5               	goto	l10533
 10389  0EC5                     u3930:
 10390  0EC5  2EC7               	goto	l10539
 10391                           	
 10392  0EC6                     l7662:	
 10393  0EC6  2EC7               	goto	l10539
 10394                           	line	25
 10395                           	
 10396  0EC7                     l7663:	
 10397                           	line	26
 10398                           	
 10399  0EC7                     l10539:	
 10400  0EC7  3001               	movlw	01h
 10401                           	
 10402  0EC8                     u3945:
 10403  0EC8  1003               	clrc
 10404  0EC9  0DAD               	rlf	(___awdiv@quotient),f
 10405  0ECA  0DAE               	rlf	(___awdiv@quotient+1),f
 10406  0ECB  3EFF               	addlw	-1
 10407  0ECC  1D03               	skipz
 10408  0ECD  2EC8               	goto	u3945
 10409                           	line	27
 10410  0ECE  0827               	movf	(___awdiv@divisor+1),w
 10411  0ECF  0229               	subwf	(___awdiv@dividend+1),w
 10412  0ED0  1D03               	skipz
 10413  0ED1  2ED4               	goto	u3955
 10414  0ED2  0826               	movf	(___awdiv@divisor),w
 10415  0ED3  0228               	subwf	(___awdiv@dividend),w
 10416  0ED4                     u3955:
 10417  0ED4  1C03               	skipc
 10418  0ED5  2ED7               	goto	u3951
 10419  0ED6  2ED8               	goto	u3950
 10420  0ED7                     u3951:
 10421  0ED7  2EE0               	goto	l10545
 10422  0ED8                     u3950:
 10423                           	line	28
 10424                           	
 10425  0ED8                     l10541:	
 10426  0ED8  0826               	movf	(___awdiv@divisor),w
 10427  0ED9  02A8               	subwf	(___awdiv@dividend),f
 10428  0EDA  0827               	movf	(___awdiv@divisor+1),w
 10429  0EDB  1C03               	skipc
 10430  0EDC  03A9               	decf	(___awdiv@dividend+1),f
 10431  0EDD  02A9               	subwf	(___awdiv@dividend+1),f
 10432                           	line	29
 10433                           	
 10434  0EDE                     l10543:	
 10435  0EDE  142D               	bsf	(___awdiv@quotient)+(0/8),(0)&7
 10436  0EDF  2EE0               	goto	l10545
 10437                           	line	30
 10438                           	
 10439  0EE0                     l7664:	
 10440                           	line	31
 10441                           	
 10442  0EE0                     l10545:	
 10443  0EE0  3001               	movlw	01h
 10444                           	
 10445  0EE1                     u3965:
 10446  0EE1  1003               	clrc
 10447  0EE2  0CA7               	rrf	(___awdiv@divisor+1),f
 10448  0EE3  0CA6               	rrf	(___awdiv@divisor),f
 10449  0EE4  3EFF               	addlw	-1
 10450  0EE5  1D03               	skipz
 10451  0EE6  2EE1               	goto	u3965
 10452                           	line	32
 10453                           	
 10454  0EE7                     l10547:	
 10455  0EE7  3001               	movlw	low(01h)
 10456  0EE8  02AB               	subwf	(___awdiv@counter),f
 10457  0EE9  1D03               	btfss	status,2
 10458  0EEA  2EEC               	goto	u3971
 10459  0EEB  2EED               	goto	u3970
 10460  0EEC                     u3971:
 10461  0EEC  2EC7               	goto	l10539
 10462  0EED                     u3970:
 10463  0EED  2EEF               	goto	l10549
 10464                           	
 10465  0EEE                     l7665:	
 10466  0EEE  2EEF               	goto	l10549
 10467                           	line	33
 10468                           	
 10469  0EEF                     l7659:	
 10470                           	line	34
 10471                           	
 10472  0EEF                     l10549:	
 10473  0EEF  082C               	movf	(___awdiv@sign),w
 10474  0EF0  1D03               	skipz
 10475  0EF1  2EF3               	goto	u3980
 10476  0EF2  2EF9               	goto	l10553
 10477  0EF3                     u3980:
 10478                           	line	35
 10479                           	
 10480  0EF3                     l10551:	
 10481  0EF3  09AD               	comf	(___awdiv@quotient),f
 10482  0EF4  09AE               	comf	(___awdiv@quotient+1),f
 10483  0EF5  0AAD               	incf	(___awdiv@quotient),f
 10484  0EF6  1903               	skipnz
 10485  0EF7  0AAE               	incf	(___awdiv@quotient+1),f
 10486  0EF8  2EF9               	goto	l10553
 10487                           	
 10488  0EF9                     l7666:	
 10489                           	line	36
 10490                           	
 10491  0EF9                     l10553:	
 10492  0EF9  082E               	movf	(___awdiv@quotient+1),w
 10493  0EFA  01A7               	clrf	(?___awdiv+1)
 10494  0EFB  07A7               	addwf	(?___awdiv+1)
 10495  0EFC  082D               	movf	(___awdiv@quotient),w
 10496  0EFD  01A6               	clrf	(?___awdiv)
 10497  0EFE  07A6               	addwf	(?___awdiv)
 10498                           
 10499  0EFF  2F00               	goto	l7667
 10500                           	
 10501  0F00                     l10555:	
 10502                           	line	37
 10503                           	
 10504  0F00                     l7667:	
 10505  0F00  0008               	return
 10506                           	opt stack 0
 10507                           GLOBAL	__end_of___awdiv
 10508  0F01                     	__end_of___awdiv:
 10509 ;; =============== function ___awdiv ends ============
 10510                           
 10511                           	signat	___awdiv,8314
 10512                           	global	___wmul
 10513                           psect	text1280,local,class=CODE,delta=2
 10514                           global __ptext1280
 10515  0873                     __ptext1280:
 10516                           
 10517 ;; *************** function ___wmul *****************
 10518 ;; Defined at:
 10519 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\wmul.c"
 10520 ;; Parameters:    Size  Location     Type
 10521 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10522 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10523 ;; Auto vars:     Size  Location     Type
 10524 ;;  product         2    4[BANK0 ] unsigned int 
 10525 ;; Return value:  Size  Location     Type
 10526 ;;                  2    0[BANK0 ] unsigned int 
 10527 ;; Registers used:
 10528 ;;		wreg, status,2, status,0
 10529 ;; Tracked objects:
 10530 ;;		On entry : 0/0
 10531 ;;		On exit  : 0/0
 10532 ;;		Unchanged: 0/0
 10533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10534 ;;      Params:         0       4       0       0       0
 10535 ;;      Locals:         0       2       0       0       0
 10536 ;;      Temps:          0       0       0       0       0
 10537 ;;      Totals:         0       6       0       0       0
 10538 ;;Total ram usage:        6 bytes
 10539 ;; Hardware stack levels used:    1
 10540 ;; Hardware stack levels required when called:    1
 10541 ;; This function calls:
 10542 ;;		Nothing
 10543 ;; This function is called by:
 10544 ;;		_convert
 10545 ;; This function uses a non-reentrant model
 10546 ;;
 10547                           psect	text1280
 10548                           	file	"C:\Program Files (x86)\HI-TECH Software\PICC\9.82\sources\wmul.c"
 10549                           	line	3
 10550                           	global	__size_of___wmul
 10551  002C                     	__size_of___wmul	equ	__end_of___wmul-___wmul
 10552                           	
 10553  0873                     ___wmul:	
 10554                           	opt	stack 3
 10555                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10556                           	line	4
 10557                           	
 10558  0873                     l10505:	
 10559  0873  1283               	bcf	status, 5	;RP0=0, select bank0
 10560  0874  1303               	bcf	status, 6	;RP1=0, select bank0
 10561  0875  01A4               	clrf	(___wmul@product)
 10562  0876  01A5               	clrf	(___wmul@product+1)
 10563  0877  2878               	goto	l10507
 10564                           	line	6
 10565                           	
 10566  0878                     l7517:	
 10567                           	line	7
 10568                           	
 10569  0878                     l10507:	
 10570  0878  1C20               	btfss	(___wmul@multiplier),(0)&7
 10571  0879  287B               	goto	u3851
 10572  087A  287C               	goto	u3850
 10573  087B                     u3851:
 10574  087B  2882               	goto	l7518
 10575  087C                     u3850:
 10576                           	line	8
 10577                           	
 10578  087C                     l10509:	
 10579  087C  0822               	movf	(___wmul@multiplicand),w
 10580  087D  07A4               	addwf	(___wmul@product),f
 10581  087E  1803               	skipnc
 10582  087F  0AA5               	incf	(___wmul@product+1),f
 10583  0880  0823               	movf	(___wmul@multiplicand+1),w
 10584  0881  07A5               	addwf	(___wmul@product+1),f
 10585                           	
 10586  0882                     l7518:	
 10587                           	line	9
 10588  0882  3001               	movlw	01h
 10589                           	
 10590  0883                     u3865:
 10591  0883  1003               	clrc
 10592  0884  0DA2               	rlf	(___wmul@multiplicand),f
 10593  0885  0DA3               	rlf	(___wmul@multiplicand+1),f
 10594  0886  3EFF               	addlw	-1
 10595  0887  1D03               	skipz
 10596  0888  2883               	goto	u3865
 10597                           	line	10
 10598                           	
 10599  0889                     l10511:	
 10600  0889  3001               	movlw	01h
 10601                           	
 10602  088A                     u3875:
 10603  088A  1003               	clrc
 10604  088B  0CA1               	rrf	(___wmul@multiplier+1),f
 10605  088C  0CA0               	rrf	(___wmul@multiplier),f
 10606  088D  3EFF               	addlw	-1
 10607  088E  1D03               	skipz
 10608  088F  288A               	goto	u3875
 10609                           	line	11
 10610  0890  0821               	movf	((___wmul@multiplier+1)),w
 10611  0891  0420               	iorwf	((___wmul@multiplier)),w
 10612  0892  1D03               	skipz
 10613  0893  2895               	goto	u3881
 10614  0894  2896               	goto	u3880
 10615  0895                     u3881:
 10616  0895  2878               	goto	l10507
 10617  0896                     u3880:
 10618  0896  2897               	goto	l10513
 10619                           	
 10620  0897                     l7519:	
 10621                           	line	12
 10622                           	
 10623  0897                     l10513:	
 10624  0897  0825               	movf	(___wmul@product+1),w
 10625  0898  01A1               	clrf	(?___wmul+1)
 10626  0899  07A1               	addwf	(?___wmul+1)
 10627  089A  0824               	movf	(___wmul@product),w
 10628  089B  01A0               	clrf	(?___wmul)
 10629  089C  07A0               	addwf	(?___wmul)
 10630                           
 10631  089D  289E               	goto	l7520
 10632                           	
 10633  089E                     l10515:	
 10634                           	line	13
 10635                           	
 10636  089E                     l7520:	
 10637  089E  0008               	return
 10638                           	opt stack 0
 10639                           GLOBAL	__end_of___wmul
 10640  089F                     	__end_of___wmul:
 10641 ;; =============== function ___wmul ends ============
 10642                           
 10643                           	signat	___wmul,8314
 10644                           	global	_updateNode
 10645                           psect	text1281,local,class=CODE,delta=2
 10646                           global __ptext1281
 10647  0D69                     __ptext1281:
 10648                           
 10649 ;; *************** function _updateNode *****************
 10650 ;; Defined at:
 10651 ;;		line 289 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
 10652 ;; Parameters:    Size  Location     Type
 10653 ;;		None
 10654 ;; Auto vars:     Size  Location     Type
 10655 ;;		None
 10656 ;; Return value:  Size  Location     Type
 10657 ;;		None               void
 10658 ;; Registers used:
 10659 ;;		wreg, status,2, status,0
 10660 ;; Tracked objects:
 10661 ;;		On entry : 0/0
 10662 ;;		On exit  : 0/0
 10663 ;;		Unchanged: 0/0
 10664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10665 ;;      Params:         0       0       0       0       0
 10666 ;;      Locals:         0       0       0       0       0
 10667 ;;      Temps:          0       1       0       0       0
 10668 ;;      Totals:         0       1       0       0       0
 10669 ;;Total ram usage:        1 bytes
 10670 ;; Hardware stack levels used:    1
 10671 ;; Hardware stack levels required when called:    1
 10672 ;; This function calls:
 10673 ;;		Nothing
 10674 ;; This function is called by:
 10675 ;;		_main
 10676 ;; This function uses a non-reentrant model
 10677 ;;
 10678                           psect	text1281
 10679                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
 10680                           	line	289
 10681                           	global	__size_of_updateNode
 10682  005C                     	__size_of_updateNode	equ	__end_of_updateNode-_updateNode
 10683                           	
 10684  0D69                     _updateNode:	
 10685                           	opt	stack 6
 10686                           ; Regs used in _updateNode: [wreg+status,2+status,0]
 10687                           	line	290
 10688                           	
 10689  0D69                     l10475:	
 10690                           ;main.c: 290: if((xCoord == 2) && (yCoord == 2))
 10691  0D69  1283               	bcf	status, 5	;RP0=0, select bank0
 10692  0D6A  1303               	bcf	status, 6	;RP1=0, select bank0
 10693  0D6B  0860               	movf	(_xCoord),w	;volatile
 10694  0D6C  3A02               	xorlw	02h
 10695  0D6D  1D03               	skipz
 10696  0D6E  2D70               	goto	u3751
 10697  0D6F  2D71               	goto	u3750
 10698  0D70                     u3751:
 10699  0D70  2D7B               	goto	l10481
 10700  0D71                     u3750:
 10701                           	
 10702  0D71                     l10477:	
 10703  0D71  0861               	movf	(_yCoord),w	;volatile
 10704  0D72  3A02               	xorlw	02h
 10705  0D73  1D03               	skipz
 10706  0D74  2D76               	goto	u3761
 10707  0D75  2D77               	goto	u3760
 10708  0D76                     u3761:
 10709  0D76  2D7B               	goto	l10481
 10710  0D77                     u3760:
 10711                           	line	291
 10712                           	
 10713  0D77                     l10479:	
 10714                           ;main.c: 291: node = 1;
 10715  0D77  01D4               	clrf	(_node)	;volatile
 10716  0D78  1403               	bsf	status,0
 10717  0D79  0DD4               	rlf	(_node),f	;volatile
 10718  0D7A  2DC4               	goto	l6765
 10719                           	line	292
 10720                           	
 10721  0D7B                     l6755:	
 10722                           	
 10723  0D7B                     l10481:	
 10724                           ;main.c: 292: else if((xCoord == 4) && (yCoord == 2))
 10725  0D7B  0860               	movf	(_xCoord),w	;volatile
 10726  0D7C  3A04               	xorlw	04h
 10727  0D7D  1D03               	skipz
 10728  0D7E  2D80               	goto	u3771
 10729  0D7F  2D81               	goto	u3770
 10730  0D80                     u3771:
 10731  0D80  2D8C               	goto	l10487
 10732  0D81                     u3770:
 10733                           	
 10734  0D81                     l10483:	
 10735  0D81  0861               	movf	(_yCoord),w	;volatile
 10736  0D82  3A02               	xorlw	02h
 10737  0D83  1D03               	skipz
 10738  0D84  2D86               	goto	u3781
 10739  0D85  2D87               	goto	u3780
 10740  0D86                     u3781:
 10741  0D86  2D8C               	goto	l10487
 10742  0D87                     u3780:
 10743                           	line	293
 10744                           	
 10745  0D87                     l10485:	
 10746                           ;main.c: 293: node = 2;
 10747  0D87  3002               	movlw	(02h)
 10748  0D88  00A0               	movwf	(??_updateNode+0)+0
 10749  0D89  0820               	movf	(??_updateNode+0)+0,w
 10750  0D8A  00D4               	movwf	(_node)	;volatile
 10751  0D8B  2DC4               	goto	l6765
 10752                           	line	294
 10753                           	
 10754  0D8C                     l6757:	
 10755                           	
 10756  0D8C                     l10487:	
 10757                           ;main.c: 294: else if((xCoord == 2) && (yCoord == 0))
 10758  0D8C  0860               	movf	(_xCoord),w	;volatile
 10759  0D8D  3A02               	xorlw	02h
 10760  0D8E  1D03               	skipz
 10761  0D8F  2D91               	goto	u3791
 10762  0D90  2D92               	goto	u3790
 10763  0D91                     u3791:
 10764  0D91  2D9C               	goto	l10493
 10765  0D92                     u3790:
 10766                           	
 10767  0D92                     l10489:	
 10768  0D92  08E1               	movf	(_yCoord),f
 10769  0D93  1D03               	skipz	;volatile
 10770  0D94  2D96               	goto	u3801
 10771  0D95  2D97               	goto	u3800
 10772  0D96                     u3801:
 10773  0D96  2D9C               	goto	l10493
 10774  0D97                     u3800:
 10775                           	line	295
 10776                           	
 10777  0D97                     l10491:	
 10778                           ;main.c: 295: node = 3;
 10779  0D97  3003               	movlw	(03h)
 10780  0D98  00A0               	movwf	(??_updateNode+0)+0
 10781  0D99  0820               	movf	(??_updateNode+0)+0,w
 10782  0D9A  00D4               	movwf	(_node)	;volatile
 10783  0D9B  2DC4               	goto	l6765
 10784                           	line	296
 10785                           	
 10786  0D9C                     l6759:	
 10787                           	
 10788  0D9C                     l10493:	
 10789                           ;main.c: 296: else if((xCoord == 4) && (yCoord == 3))
 10790  0D9C  0860               	movf	(_xCoord),w	;volatile
 10791  0D9D  3A04               	xorlw	04h
 10792  0D9E  1D03               	skipz
 10793  0D9F  2DA1               	goto	u3811
 10794  0DA0  2DA2               	goto	u3810
 10795  0DA1                     u3811:
 10796  0DA1  2DAD               	goto	l10499
 10797  0DA2                     u3810:
 10798                           	
 10799  0DA2                     l10495:	
 10800  0DA2  0861               	movf	(_yCoord),w	;volatile
 10801  0DA3  3A03               	xorlw	03h
 10802  0DA4  1D03               	skipz
 10803  0DA5  2DA7               	goto	u3821
 10804  0DA6  2DA8               	goto	u3820
 10805  0DA7                     u3821:
 10806  0DA7  2DAD               	goto	l10499
 10807  0DA8                     u3820:
 10808                           	line	297
 10809                           	
 10810  0DA8                     l10497:	
 10811                           ;main.c: 297: node = 4;
 10812  0DA8  3004               	movlw	(04h)
 10813  0DA9  00A0               	movwf	(??_updateNode+0)+0
 10814  0DAA  0820               	movf	(??_updateNode+0)+0,w
 10815  0DAB  00D4               	movwf	(_node)	;volatile
 10816  0DAC  2DC4               	goto	l6765
 10817                           	line	298
 10818                           	
 10819  0DAD                     l6761:	
 10820                           	
 10821  0DAD                     l10499:	
 10822                           ;main.c: 298: else if((xCoord == 2) && (yCoord == 1))
 10823  0DAD  0860               	movf	(_xCoord),w	;volatile
 10824  0DAE  3A02               	xorlw	02h
 10825  0DAF  1D03               	skipz
 10826  0DB0  2DB2               	goto	u3831
 10827  0DB1  2DB3               	goto	u3830
 10828  0DB2                     u3831:
 10829  0DB2  2DBE               	goto	l6763
 10830  0DB3                     u3830:
 10831                           	
 10832  0DB3                     l10501:	
 10833  0DB3  0861               	movf	(_yCoord),w	;volatile
 10834  0DB4  3A01               	xorlw	01h
 10835  0DB5  1D03               	skipz
 10836  0DB6  2DB8               	goto	u3841
 10837  0DB7  2DB9               	goto	u3840
 10838  0DB8                     u3841:
 10839  0DB8  2DBE               	goto	l6763
 10840  0DB9                     u3840:
 10841                           	line	299
 10842                           	
 10843  0DB9                     l10503:	
 10844                           ;main.c: 299: node = 5;
 10845  0DB9  3005               	movlw	(05h)
 10846  0DBA  00A0               	movwf	(??_updateNode+0)+0
 10847  0DBB  0820               	movf	(??_updateNode+0)+0,w
 10848  0DBC  00D4               	movwf	(_node)	;volatile
 10849  0DBD  2DC4               	goto	l6765
 10850                           	line	300
 10851                           	
 10852  0DBE                     l6763:	
 10853                           	line	301
 10854                           ;main.c: 300: else
 10855                           ;main.c: 301: node = 0;
 10856  0DBE  01D4               	clrf	(_node)	;volatile
 10857  0DBF  2DC4               	goto	l6765
 10858                           	
 10859  0DC0                     l6764:	
 10860  0DC0  2DC4               	goto	l6765
 10861                           	
 10862  0DC1                     l6762:	
 10863  0DC1  2DC4               	goto	l6765
 10864                           	
 10865  0DC2                     l6760:	
 10866  0DC2  2DC4               	goto	l6765
 10867                           	
 10868  0DC3                     l6758:	
 10869  0DC3  2DC4               	goto	l6765
 10870                           	
 10871  0DC4                     l6756:	
 10872                           	line	302
 10873                           	
 10874  0DC4                     l6765:	
 10875  0DC4  0008               	return
 10876                           	opt stack 0
 10877                           GLOBAL	__end_of_updateNode
 10878  0DC5                     	__end_of_updateNode:
 10879 ;; =============== function _updateNode ends ============
 10880                           
 10881                           	signat	_updateNode,88
 10882                           	global	_getSuccessfulDrive
 10883                           psect	text1282,local,class=CODE,delta=2
 10884                           global __ptext1282
 10885  157D                     __ptext1282:
 10886                           
 10887 ;; *************** function _getSuccessfulDrive *****************
 10888 ;; Defined at:
 10889 ;;		line 193 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
 10890 ;; Parameters:    Size  Location     Type
 10891 ;;		None
 10892 ;; Auto vars:     Size  Location     Type
 10893 ;;		None
 10894 ;; Return value:  Size  Location     Type
 10895 ;;		None               void
 10896 ;; Registers used:
 10897 ;;		status,2, status,0
 10898 ;; Tracked objects:
 10899 ;;		On entry : 0/0
 10900 ;;		On exit  : 0/0
 10901 ;;		Unchanged: 0/0
 10902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10903 ;;      Params:         0       0       0       0       0
 10904 ;;      Locals:         0       0       0       0       0
 10905 ;;      Temps:          0       0       0       0       0
 10906 ;;      Totals:         0       0       0       0       0
 10907 ;;Total ram usage:        0 bytes
 10908 ;; Hardware stack levels used:    1
 10909 ;; Hardware stack levels required when called:    1
 10910 ;; This function calls:
 10911 ;;		Nothing
 10912 ;; This function is called by:
 10913 ;;		_main
 10914 ;; This function uses a non-reentrant model
 10915 ;;
 10916                           psect	text1282
 10917                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
 10918                           	line	193
 10919                           	global	__size_of_getSuccessfulDrive
 10920  000A                     	__size_of_getSuccessfulDrive	equ	__end_of_getSuccessfulDrive-_getSuccessfulDrive
 10921                           	
 10922  157D                     _getSuccessfulDrive:	
 10923                           	opt	stack 6
 10924                           ; Regs used in _getSuccessfulDrive: [status]
 10925                           	line	194
 10926                           	
 10927  157D                     l10409:	
 10928                           ;drive.c: 194: return successfulDrive;
 10929  157D  19F1               	btfsc	(_successfulDrive/8),(_successfulDrive)&7
 10930  157E  2D80               	goto	u3631
 10931  157F  2D81               	goto	u3630
 10932  1580                     u3631:
 10933  1580  2D83               	goto	l10413
 10934  1581                     u3630:
 10935                           	
 10936  1581                     l10411:	
 10937  1581  1003               	clrc
 10938                           	
 10939  1582  2D86               	goto	l5845
 10940                           	
 10941  1583                     l10151:	
 10942                           	
 10943  1583                     l10413:	
 10944  1583  1403               	setc
 10945                           	
 10946  1584  2D86               	goto	l5845
 10947                           	
 10948  1585                     l10153:	
 10949  1585  2D86               	goto	l5845
 10950                           	
 10951  1586                     l10415:	
 10952                           	line	195
 10953                           	
 10954  1586                     l5845:	
 10955  1586  0008               	return
 10956                           	opt stack 0
 10957                           GLOBAL	__end_of_getSuccessfulDrive
 10958  1587                     	__end_of_getSuccessfulDrive:
 10959 ;; =============== function _getSuccessfulDrive ends ============
 10960                           
 10961                           	signat	_getSuccessfulDrive,88
 10962                           	global	_getSomethingInTheWay
 10963                           psect	text1283,local,class=CODE,delta=2
 10964                           global __ptext1283
 10965  1568                     __ptext1283:
 10966                           
 10967 ;; *************** function _getSomethingInTheWay *****************
 10968 ;; Defined at:
 10969 ;;		line 183 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
 10970 ;; Parameters:    Size  Location     Type
 10971 ;;		None
 10972 ;; Auto vars:     Size  Location     Type
 10973 ;;		None
 10974 ;; Return value:  Size  Location     Type
 10975 ;;                  1    wreg      enum E1111
 10976 ;; Registers used:
 10977 ;;		wreg
 10978 ;; Tracked objects:
 10979 ;;		On entry : 0/0
 10980 ;;		On exit  : 0/0
 10981 ;;		Unchanged: 0/0
 10982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10983 ;;      Params:         0       0       0       0       0
 10984 ;;      Locals:         0       0       0       0       0
 10985 ;;      Temps:          0       0       0       0       0
 10986 ;;      Totals:         0       0       0       0       0
 10987 ;;Total ram usage:        0 bytes
 10988 ;; Hardware stack levels used:    1
 10989 ;; Hardware stack levels required when called:    1
 10990 ;; This function calls:
 10991 ;;		Nothing
 10992 ;; This function is called by:
 10993 ;;		_goToNextCell
 10994 ;; This function uses a non-reentrant model
 10995 ;;
 10996                           psect	text1283
 10997                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
 10998                           	line	183
 10999                           	global	__size_of_getSomethingInTheWay
 11000  0005                     	__size_of_getSomethingInTheWay	equ	__end_of_getSomethingInTheWay-_getSomethingInTheWay
 11001                           	
 11002  1568                     _getSomethingInTheWay:	
 11003                           	opt	stack 5
 11004                           ; Regs used in _getSomethingInTheWay: [wreg]
 11005                           	line	184
 11006                           	
 11007  1568                     l10405:	
 11008                           ;drive.c: 184: return somethingInTheWay;
 11009  1568  1283               	bcf	status, 5	;RP0=0, select bank0
 11010  1569  1303               	bcf	status, 6	;RP1=0, select bank0
 11011  156A  085F               	movf	(_somethingInTheWay),w	;volatile
 11012  156B  2D6C               	goto	l5839
 11013                           	
 11014  156C                     l10407:	
 11015                           	line	185
 11016                           	
 11017  156C                     l5839:	
 11018  156C  0008               	return
 11019                           	opt stack 0
 11020                           GLOBAL	__end_of_getSomethingInTheWay
 11021  156D                     	__end_of_getSomethingInTheWay:
 11022 ;; =============== function _getSomethingInTheWay ends ============
 11023                           
 11024                           	signat	_getSomethingInTheWay,89
 11025                           	global	_getOrientation
 11026                           psect	text1284,local,class=CODE,delta=2
 11027                           global __ptext1284
 11028  1563                     __ptext1284:
 11029                           
 11030 ;; *************** function _getOrientation *****************
 11031 ;; Defined at:
 11032 ;;		line 178 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
 11033 ;; Parameters:    Size  Location     Type
 11034 ;;		None
 11035 ;; Auto vars:     Size  Location     Type
 11036 ;;		None
 11037 ;; Return value:  Size  Location     Type
 11038 ;;                  1    wreg      enum E1117
 11039 ;; Registers used:
 11040 ;;		wreg
 11041 ;; Tracked objects:
 11042 ;;		On entry : 0/0
 11043 ;;		On exit  : 0/0
 11044 ;;		Unchanged: 0/0
 11045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11046 ;;      Params:         0       0       0       0       0
 11047 ;;      Locals:         0       0       0       0       0
 11048 ;;      Temps:          0       0       0       0       0
 11049 ;;      Totals:         0       0       0       0       0
 11050 ;;Total ram usage:        0 bytes
 11051 ;; Hardware stack levels used:    1
 11052 ;; Hardware stack levels required when called:    1
 11053 ;; This function calls:
 11054 ;;		Nothing
 11055 ;; This function is called by:
 11056 ;;		_updateLocation
 11057 ;;		_main
 11058 ;; This function uses a non-reentrant model
 11059 ;;
 11060                           psect	text1284
 11061                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
 11062                           	line	178
 11063                           	global	__size_of_getOrientation
 11064  0005                     	__size_of_getOrientation	equ	__end_of_getOrientation-_getOrientation
 11065                           	
 11066  1563                     _getOrientation:	
 11067                           	opt	stack 5
 11068                           ; Regs used in _getOrientation: [wreg]
 11069                           	line	179
 11070                           	
 11071  1563                     l10401:	
 11072                           ;drive.c: 179: return currentOrientation;
 11073  1563  1283               	bcf	status, 5	;RP0=0, select bank0
 11074  1564  1303               	bcf	status, 6	;RP1=0, select bank0
 11075  1565  0852               	movf	(_currentOrientation),w	;volatile
 11076  1566  2D67               	goto	l5836
 11077                           	
 11078  1567                     l10403:	
 11079                           	line	180
 11080                           	
 11081  1567                     l5836:	
 11082  1567  0008               	return
 11083                           	opt stack 0
 11084                           GLOBAL	__end_of_getOrientation
 11085  1568                     	__end_of_getOrientation:
 11086 ;; =============== function _getOrientation ends ============
 11087                           
 11088                           	signat	_getOrientation,89
 11089                           	global	_updateOrientation
 11090                           psect	text1285,local,class=CODE,delta=2
 11091                           global __ptext1285
 11092  15AE                     __ptext1285:
 11093                           
 11094 ;; *************** function _updateOrientation *****************
 11095 ;; Defined at:
 11096 ;;		line 292 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
 11097 ;; Parameters:    Size  Location     Type
 11098 ;;  moved           1    wreg     enum E1111
 11099 ;; Auto vars:     Size  Location     Type
 11100 ;;  moved           1    1[BANK0 ] enum E1111
 11101 ;; Return value:  Size  Location     Type
 11102 ;;		None               void
 11103 ;; Registers used:
 11104 ;;		wreg, status,2, status,0
 11105 ;; Tracked objects:
 11106 ;;		On entry : 0/0
 11107 ;;		On exit  : 0/0
 11108 ;;		Unchanged: 0/0
 11109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11110 ;;      Params:         0       0       0       0       0
 11111 ;;      Locals:         0       1       0       0       0
 11112 ;;      Temps:          0       1       0       0       0
 11113 ;;      Totals:         0       2       0       0       0
 11114 ;;Total ram usage:        2 bytes
 11115 ;; Hardware stack levels used:    1
 11116 ;; Hardware stack levels required when called:    1
 11117 ;; This function calls:
 11118 ;;		Nothing
 11119 ;; This function is called by:
 11120 ;;		_driveForDistance
 11121 ;;		_goBackward
 11122 ;;		_goLeft
 11123 ;;		_goRight
 11124 ;; This function uses a non-reentrant model
 11125 ;;
 11126                           psect	text1285
 11127                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
 11128                           	line	292
 11129                           	global	__size_of_updateOrientation
 11130  0011                     	__size_of_updateOrientation	equ	__end_of_updateOrientation-_updateOrientation
 11131                           	
 11132  15AE                     _updateOrientation:	
 11133                           	opt	stack 4
 11134                           ; Regs used in _updateOrientation: [wreg+status,2+status,0]
 11135                           ;updateOrientation@moved stored from wreg
 11136  15AE  1283               	bcf	status, 5	;RP0=0, select bank0
 11137  15AF  1303               	bcf	status, 6	;RP1=0, select bank0
 11138  15B0  00A1               	movwf	(updateOrientation@moved)
 11139                           	line	293
 11140                           	
 11141  15B1                     l10395:	
 11142                           ;drive.c: 293: currentOrientation += moved;
 11143  15B1  0821               	movf	(updateOrientation@moved),w	;volatile
 11144  15B2  00A0               	movwf	(??_updateOrientation+0)+0
 11145  15B3  0820               	movf	(??_updateOrientation+0)+0,w
 11146  15B4  07D2               	addwf	(_currentOrientation),f	;volatile
 11147                           	line	294
 11148                           	
 11149  15B5                     l10397:	
 11150                           ;drive.c: 294: if(currentOrientation >= 4)
 11151  15B5  3004               	movlw	(04h)
 11152  15B6  0252               	subwf	(_currentOrientation),w	;volatile
 11153  15B7  1C03               	skipc
 11154  15B8  2DBA               	goto	u3621
 11155  15B9  2DBB               	goto	u3620
 11156  15BA                     u3621:
 11157  15BA  2DBE               	goto	l5880
 11158  15BB                     u3620:
 11159                           	line	295
 11160                           	
 11161  15BB                     l10399:	
 11162                           ;drive.c: 295: currentOrientation -= 4;
 11163  15BB  3004               	movlw	low(04h)
 11164  15BC  02D2               	subwf	(_currentOrientation),f	;volatile
 11165  15BD  2DBE               	goto	l5880
 11166                           	
 11167  15BE                     l5879:	
 11168                           	line	296
 11169                           	
 11170  15BE                     l5880:	
 11171  15BE  0008               	return
 11172                           	opt stack 0
 11173                           GLOBAL	__end_of_updateOrientation
 11174  15BF                     	__end_of_updateOrientation:
 11175 ;; =============== function _updateOrientation ends ============
 11176                           
 11177                           	signat	_updateOrientation,4216
 11178                           	global	_getCurrentY
 11179                           psect	text1286,local,class=CODE,delta=2
 11180                           global __ptext1286
 11181  155E                     __ptext1286:
 11182                           
 11183 ;; *************** function _getCurrentY *****************
 11184 ;; Defined at:
 11185 ;;		line 462 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
 11186 ;; Parameters:    Size  Location     Type
 11187 ;;		None
 11188 ;; Auto vars:     Size  Location     Type
 11189 ;;		None
 11190 ;; Return value:  Size  Location     Type
 11191 ;;                  1    wreg      unsigned char 
 11192 ;; Registers used:
 11193 ;;		wreg
 11194 ;; Tracked objects:
 11195 ;;		On entry : 0/0
 11196 ;;		On exit  : 0/0
 11197 ;;		Unchanged: 0/0
 11198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11199 ;;      Params:         0       0       0       0       0
 11200 ;;      Locals:         0       0       0       0       0
 11201 ;;      Temps:          0       0       0       0       0
 11202 ;;      Totals:         0       0       0       0       0
 11203 ;;Total ram usage:        0 bytes
 11204 ;; Hardware stack levels used:    1
 11205 ;; Hardware stack levels required when called:    1
 11206 ;; This function calls:
 11207 ;;		Nothing
 11208 ;; This function is called by:
 11209 ;;		_driveForDistance
 11210 ;;		_goForward
 11211 ;;		_turnLeft90
 11212 ;; This function uses a non-reentrant model
 11213 ;;
 11214                           psect	text1286
 11215                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
 11216                           	line	462
 11217                           	global	__size_of_getCurrentY
 11218  0005                     	__size_of_getCurrentY	equ	__end_of_getCurrentY-_getCurrentY
 11219                           	
 11220  155E                     _getCurrentY:	
 11221                           	opt	stack 3
 11222                           ; Regs used in _getCurrentY: [wreg]
 11223                           	line	463
 11224                           	
 11225  155E                     l10391:	
 11226                           ;main.c: 463: return yCoord;
 11227  155E  1283               	bcf	status, 5	;RP0=0, select bank0
 11228  155F  1303               	bcf	status, 6	;RP1=0, select bank0
 11229  1560  0861               	movf	(_yCoord),w	;volatile
 11230  1561  2D62               	goto	l6828
 11231                           	
 11232  1562                     l10393:	
 11233                           	line	464
 11234                           	
 11235  1562                     l6828:	
 11236  1562  0008               	return
 11237                           	opt stack 0
 11238                           GLOBAL	__end_of_getCurrentY
 11239  1563                     	__end_of_getCurrentY:
 11240 ;; =============== function _getCurrentY ends ============
 11241                           
 11242                           	signat	_getCurrentY,89
 11243                           	global	_getCurrentX
 11244                           psect	text1287,local,class=CODE,delta=2
 11245                           global __ptext1287
 11246  1559                     __ptext1287:
 11247                           
 11248 ;; *************** function _getCurrentX *****************
 11249 ;; Defined at:
 11250 ;;		line 457 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
 11251 ;; Parameters:    Size  Location     Type
 11252 ;;		None
 11253 ;; Auto vars:     Size  Location     Type
 11254 ;;		None
 11255 ;; Return value:  Size  Location     Type
 11256 ;;                  1    wreg      unsigned char 
 11257 ;; Registers used:
 11258 ;;		wreg
 11259 ;; Tracked objects:
 11260 ;;		On entry : 0/0
 11261 ;;		On exit  : 0/0
 11262 ;;		Unchanged: 0/0
 11263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11264 ;;      Params:         0       0       0       0       0
 11265 ;;      Locals:         0       0       0       0       0
 11266 ;;      Temps:          0       0       0       0       0
 11267 ;;      Totals:         0       0       0       0       0
 11268 ;;Total ram usage:        0 bytes
 11269 ;; Hardware stack levels used:    1
 11270 ;; Hardware stack levels required when called:    1
 11271 ;; This function calls:
 11272 ;;		Nothing
 11273 ;; This function is called by:
 11274 ;;		_driveForDistance
 11275 ;;		_goForward
 11276 ;;		_turnLeft90
 11277 ;; This function uses a non-reentrant model
 11278 ;;
 11279                           psect	text1287
 11280                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
 11281                           	line	457
 11282                           	global	__size_of_getCurrentX
 11283  0005                     	__size_of_getCurrentX	equ	__end_of_getCurrentX-_getCurrentX
 11284                           	
 11285  1559                     _getCurrentX:	
 11286                           	opt	stack 3
 11287                           ; Regs used in _getCurrentX: [wreg]
 11288                           	line	458
 11289                           	
 11290  1559                     l10387:	
 11291                           ;main.c: 458: return xCoord;
 11292  1559  1283               	bcf	status, 5	;RP0=0, select bank0
 11293  155A  1303               	bcf	status, 6	;RP1=0, select bank0
 11294  155B  0860               	movf	(_xCoord),w	;volatile
 11295  155C  2D5D               	goto	l6825
 11296                           	
 11297  155D                     l10389:	
 11298                           	line	459
 11299                           	
 11300  155D                     l6825:	
 11301  155D  0008               	return
 11302                           	opt stack 0
 11303                           GLOBAL	__end_of_getCurrentX
 11304  155E                     	__end_of_getCurrentX:
 11305 ;; =============== function _getCurrentX ends ============
 11306                           
 11307                           	signat	_getCurrentX,89
 11308                           	global	_clearSuccessfulDrive
 11309                           psect	text1288,local,class=CODE,delta=2
 11310                           global __ptext1288
 11311  0846                     __ptext1288:
 11312                           
 11313 ;; *************** function _clearSuccessfulDrive *****************
 11314 ;; Defined at:
 11315 ;;		line 188 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
 11316 ;; Parameters:    Size  Location     Type
 11317 ;;		None
 11318 ;; Auto vars:     Size  Location     Type
 11319 ;;		None
 11320 ;; Return value:  Size  Location     Type
 11321 ;;		None               void
 11322 ;; Registers used:
 11323 ;;		None
 11324 ;; Tracked objects:
 11325 ;;		On entry : 0/0
 11326 ;;		On exit  : 0/0
 11327 ;;		Unchanged: 0/0
 11328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11329 ;;      Params:         0       0       0       0       0
 11330 ;;      Locals:         0       0       0       0       0
 11331 ;;      Temps:          0       0       0       0       0
 11332 ;;      Totals:         0       0       0       0       0
 11333 ;;Total ram usage:        0 bytes
 11334 ;; Hardware stack levels used:    1
 11335 ;; Hardware stack levels required when called:    1
 11336 ;; This function calls:
 11337 ;;		Nothing
 11338 ;; This function is called by:
 11339 ;;		_driveForDistance
 11340 ;;		_frontWallCorrect
 11341 ;; This function uses a non-reentrant model
 11342 ;;
 11343                           psect	text1288
 11344                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\drive.c"
 11345                           	line	188
 11346                           	global	__size_of_clearSuccessfulDrive
 11347  0002                     	__size_of_clearSuccessfulDrive	equ	__end_of_clearSuccessfulDrive-_clearSuccessfulDrive
 11348                           	
 11349  0846                     _clearSuccessfulDrive:	
 11350                           	opt	stack 4
 11351                           ; Regs used in _clearSuccessfulDrive: []
 11352                           	line	189
 11353                           	
 11354  0846                     l10385:	
 11355                           ;drive.c: 189: successfulDrive = 0;
 11356  0846  11F1               	bcf	(_successfulDrive/8),(_successfulDrive)&7
 11357                           	line	190
 11358                           	
 11359  0847                     l5842:	
 11360  0847  0008               	return
 11361                           	opt stack 0
 11362                           GLOBAL	__end_of_clearSuccessfulDrive
 11363  0848                     	__end_of_clearSuccessfulDrive:
 11364 ;; =============== function _clearSuccessfulDrive ends ============
 11365                           
 11366                           	signat	_clearSuccessfulDrive,88
 11367                           	global	_ser_init
 11368                           psect	text1289,local,class=CODE,delta=2
 11369                           global __ptext1289
 11370  1786                     __ptext1289:
 11371                           
 11372 ;; *************** function _ser_init *****************
 11373 ;; Defined at:
 11374 ;;		line 124 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\ser.c"
 11375 ;; Parameters:    Size  Location     Type
 11376 ;;		None
 11377 ;; Auto vars:     Size  Location     Type
 11378 ;;		None
 11379 ;; Return value:  Size  Location     Type
 11380 ;;		None               void
 11381 ;; Registers used:
 11382 ;;		wreg, status,2, status,0
 11383 ;; Tracked objects:
 11384 ;;		On entry : 0/0
 11385 ;;		On exit  : 0/0
 11386 ;;		Unchanged: 0/0
 11387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11388 ;;      Params:         0       0       0       0       0
 11389 ;;      Locals:         0       0       0       0       0
 11390 ;;      Temps:          0       1       0       0       0
 11391 ;;      Totals:         0       1       0       0       0
 11392 ;;Total ram usage:        1 bytes
 11393 ;; Hardware stack levels used:    1
 11394 ;; Hardware stack levels required when called:    1
 11395 ;; This function calls:
 11396 ;;		Nothing
 11397 ;; This function is called by:
 11398 ;;		_init
 11399 ;; This function uses a non-reentrant model
 11400 ;;
 11401                           psect	text1289
 11402                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\ser.c"
 11403                           	line	124
 11404                           	global	__size_of_ser_init
 11405  0028                     	__size_of_ser_init	equ	__end_of_ser_init-_ser_init
 11406                           	
 11407  1786                     _ser_init:	
 11408                           	opt	stack 5
 11409                           ; Regs used in _ser_init: [wreg+status,2+status,0]
 11410                           	line	125
 11411                           	
 11412  1786                     l10359:	
 11413                           ;ser.c: 125: TRISC |= 0b10000000;
 11414  1786  1683               	bsf	status, 5	;RP0=1, select bank1
 11415  1787  1303               	bcf	status, 6	;RP1=0, select bank1
 11416  1788  1787               	bsf	(135)^080h+(7/8),(7)&7	;volatile
 11417                           	line	126
 11418                           	
 11419  1789                     l10361:	
 11420                           ;ser.c: 126: TRISC &= 0b10111111;
 11421  1789  30BF               	movlw	(0BFh)
 11422  178A  1283               	bcf	status, 5	;RP0=0, select bank0
 11423  178B  1303               	bcf	status, 6	;RP1=0, select bank0
 11424  178C  00A0               	movwf	(??_ser_init+0)+0
 11425  178D  0820               	movf	(??_ser_init+0)+0,w
 11426  178E  1683               	bsf	status, 5	;RP0=1, select bank1
 11427  178F  1303               	bcf	status, 6	;RP1=0, select bank1
 11428  1790  0587               	andwf	(135)^080h,f	;volatile
 11429                           	line	127
 11430                           	
 11431  1791                     l10363:	
 11432                           ;ser.c: 127: BRGH=1;
 11433  1791  1518               	bsf	(1218/8)^080h,(1218)&7
 11434                           	line	129
 11435                           	
 11436  1792                     l10365:	
 11437                           ;ser.c: 129: SPBRG=20;
 11438  1792  3014               	movlw	(014h)
 11439  1793  0099               	movwf	(153)^080h	;volatile
 11440                           	line	132
 11441                           	
 11442  1794                     l10367:	
 11443                           ;ser.c: 132: TX9=0;
 11444  1794  1318               	bcf	(1222/8)^080h,(1222)&7
 11445                           	line	133
 11446                           	
 11447  1795                     l10369:	
 11448                           ;ser.c: 133: RX9=0;
 11449  1795  1283               	bcf	status, 5	;RP0=0, select bank0
 11450  1796  1303               	bcf	status, 6	;RP1=0, select bank0
 11451  1797  1318               	bcf	(198/8),(198)&7
 11452                           	line	135
 11453                           	
 11454  1798                     l10371:	
 11455                           ;ser.c: 135: SYNC=0;
 11456  1798  1683               	bsf	status, 5	;RP0=1, select bank1
 11457  1799  1303               	bcf	status, 6	;RP1=0, select bank1
 11458  179A  1218               	bcf	(1220/8)^080h,(1220)&7
 11459                           	line	136
 11460                           	
 11461  179B                     l10373:	
 11462                           ;ser.c: 136: SPEN=1;
 11463  179B  1283               	bcf	status, 5	;RP0=0, select bank0
 11464  179C  1303               	bcf	status, 6	;RP1=0, select bank0
 11465  179D  1798               	bsf	(199/8),(199)&7
 11466                           	line	137
 11467                           	
 11468  179E                     l10375:	
 11469                           ;ser.c: 137: CREN=1;
 11470  179E  1618               	bsf	(196/8),(196)&7
 11471                           	line	138
 11472                           	
 11473  179F                     l10377:	
 11474                           ;ser.c: 138: TXIE=0;
 11475  179F  1683               	bsf	status, 5	;RP0=1, select bank1
 11476  17A0  1303               	bcf	status, 6	;RP1=0, select bank1
 11477  17A1  120C               	bcf	(1124/8)^080h,(1124)&7
 11478                           	line	139
 11479                           	
 11480  17A2                     l10379:	
 11481                           ;ser.c: 139: RCIE=1;
 11482  17A2  168C               	bsf	(1125/8)^080h,(1125)&7
 11483                           	line	140
 11484                           	
 11485  17A3                     l10381:	
 11486                           ;ser.c: 140: TXEN=1;
 11487  17A3  1698               	bsf	(1221/8)^080h,(1221)&7
 11488                           	line	143
 11489                           	
 11490  17A4                     l10383:	
 11491                           ;ser.c: 143: rxiptr=rxoptr=txiptr=txoptr=0;
 11492  17A4  3000               	movlw	(0)
 11493  17A5  1283               	bcf	status, 5	;RP0=0, select bank0
 11494  17A6  1303               	bcf	status, 6	;RP1=0, select bank0
 11495  17A7  00D9               	movwf	(_txoptr)	;volatile
 11496  17A8  00FD               	movwf	(_txiptr)	;volatile
 11497  17A9  00D5               	movwf	(_rxoptr)	;volatile
 11498  17AA  00A0               	movwf	(??_ser_init+0)+0
 11499  17AB  0820               	movf	(??_ser_init+0)+0,w
 11500  17AC  00FC               	movwf	(_rxiptr)	;volatile
 11501                           	line	144
 11502                           	
 11503  17AD                     l3673:	
 11504  17AD  0008               	return
 11505                           	opt stack 0
 11506                           GLOBAL	__end_of_ser_init
 11507  17AE                     	__end_of_ser_init:
 11508 ;; =============== function _ser_init ends ============
 11509                           
 11510                           	signat	_ser_init,88
 11511                           	global	_ser_isrx
 11512                           psect	text1290,local,class=CODE,delta=2
 11513                           global __ptext1290
 11514  1621                     __ptext1290:
 11515                           
 11516 ;; *************** function _ser_isrx *****************
 11517 ;; Defined at:
 11518 ;;		line 48 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\ser.c"
 11519 ;; Parameters:    Size  Location     Type
 11520 ;;		None
 11521 ;; Auto vars:     Size  Location     Type
 11522 ;;		None
 11523 ;; Return value:  Size  Location     Type
 11524 ;;		None               void
 11525 ;; Registers used:
 11526 ;;		wreg, status,2, status,0
 11527 ;; Tracked objects:
 11528 ;;		On entry : 0/0
 11529 ;;		On exit  : 0/0
 11530 ;;		Unchanged: 0/0
 11531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11532 ;;      Params:         0       0       0       0       0
 11533 ;;      Locals:         0       0       0       0       0
 11534 ;;      Temps:          0       0       0       0       0
 11535 ;;      Totals:         0       0       0       0       0
 11536 ;;Total ram usage:        0 bytes
 11537 ;; Hardware stack levels used:    1
 11538 ;; Hardware stack levels required when called:    1
 11539 ;; This function calls:
 11540 ;;		Nothing
 11541 ;; This function is called by:
 11542 ;;		_ser_getch
 11543 ;; This function uses a non-reentrant model
 11544 ;;
 11545                           psect	text1290
 11546                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\ser.c"
 11547                           	line	48
 11548                           	global	__size_of_ser_isrx
 11549  0017                     	__size_of_ser_isrx	equ	__end_of_ser_isrx-_ser_isrx
 11550                           	
 11551  1621                     _ser_isrx:	
 11552                           	opt	stack 3
 11553                           ; Regs used in _ser_isrx: [wreg+status,2+status,0]
 11554                           	line	49
 11555                           	
 11556  1621                     l10311:	
 11557                           ;ser.c: 49: if(OERR) {
 11558  1621  1283               	bcf	status, 5	;RP0=0, select bank0
 11559  1622  1303               	bcf	status, 6	;RP1=0, select bank0
 11560  1623  1C98               	btfss	(193/8),(193)&7
 11561  1624  2E26               	goto	u3551
 11562  1625  2E27               	goto	u3550
 11563  1626                     u3551:
 11564  1626  2E2C               	goto	l10319
 11565  1627                     u3550:
 11566                           	line	50
 11567                           	
 11568  1627                     l10313:	
 11569                           ;ser.c: 50: CREN = 0;
 11570  1627  1218               	bcf	(196/8),(196)&7
 11571                           	line	51
 11572                           ;ser.c: 51: CREN = 1;
 11573  1628  1618               	bsf	(196/8),(196)&7
 11574                           	line	52
 11575                           	
 11576  1629                     l10315:	
 11577                           ;ser.c: 52: return 0;
 11578  1629  1003               	clrc
 11579                           	
 11580  162A  2E37               	goto	l3633
 11581                           	
 11582  162B                     l10317:	
 11583  162B  2E37               	goto	l3633
 11584                           	line	53
 11585                           	
 11586  162C                     l3632:	
 11587                           	line	54
 11588                           	
 11589  162C                     l10319:	
 11590                           ;ser.c: 53: }
 11591                           ;ser.c: 54: return (rxiptr!=rxoptr);
 11592  162C  087C               	movf	(_rxiptr),w	;volatile
 11593  162D  0655               	xorwf	(_rxoptr),w	;volatile
 11594  162E  1D03               	skipz
 11595  162F  2E31               	goto	u3561
 11596  1630  2E32               	goto	u3560
 11597  1631                     u3561:
 11598  1631  2E34               	goto	l10323
 11599  1632                     u3560:
 11600                           	
 11601  1632                     l10321:	
 11602  1632  1003               	clrc
 11603                           	
 11604  1633  2E37               	goto	l3633
 11605                           	
 11606  1634                     l10147:	
 11607                           	
 11608  1634                     l10323:	
 11609  1634  1403               	setc
 11610                           	
 11611  1635  2E37               	goto	l3633
 11612                           	
 11613  1636                     l10149:	
 11614  1636  2E37               	goto	l3633
 11615                           	
 11616  1637                     l10325:	
 11617                           	line	55
 11618                           	
 11619  1637                     l3633:	
 11620  1637  0008               	return
 11621                           	opt stack 0
 11622                           GLOBAL	__end_of_ser_isrx
 11623  1638                     	__end_of_ser_isrx:
 11624 ;; =============== function _ser_isrx ends ============
 11625                           
 11626                           	signat	_ser_isrx,88
 11627                           	global	_getVictimZone
 11628                           psect	text1291,local,class=CODE,delta=2
 11629                           global __ptext1291
 11630  0F01                     __ptext1291:
 11631                           
 11632 ;; *************** function _getVictimZone *****************
 11633 ;; Defined at:
 11634 ;;		line 157 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\map.c"
 11635 ;; Parameters:    Size  Location     Type
 11636 ;;  victimX         1    wreg     unsigned char 
 11637 ;;  victimY         1    0[BANK0 ] unsigned char 
 11638 ;; Auto vars:     Size  Location     Type
 11639 ;;  victimX         1    2[BANK0 ] unsigned char 
 11640 ;; Return value:  Size  Location     Type
 11641 ;;                  1    wreg      unsigned char 
 11642 ;; Registers used:
 11643 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11644 ;; Tracked objects:
 11645 ;;		On entry : 0/0
 11646 ;;		On exit  : 0/0
 11647 ;;		Unchanged: 0/0
 11648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11649 ;;      Params:         0       1       0       0       0
 11650 ;;      Locals:         0       1       0       0       0
 11651 ;;      Temps:          0       1       0       0       0
 11652 ;;      Totals:         0       3       0       0       0
 11653 ;;Total ram usage:        3 bytes
 11654 ;; Hardware stack levels used:    1
 11655 ;; Hardware stack levels required when called:    1
 11656 ;; This function calls:
 11657 ;;		Nothing
 11658 ;; This function is called by:
 11659 ;;		_lookForVictim
 11660 ;; This function uses a non-reentrant model
 11661 ;;
 11662                           psect	text1291
 11663                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\map.c"
 11664                           	line	157
 11665                           	global	__size_of_getVictimZone
 11666  007F                     	__size_of_getVictimZone	equ	__end_of_getVictimZone-_getVictimZone
 11667                           	
 11668  0F01                     _getVictimZone:	
 11669                           	opt	stack 5
 11670                           ; Regs used in _getVictimZone: [wreg-fsr0h+status,2+status,0]
 11671                           ;getVictimZone@victimX stored from wreg
 11672  0F01  1283               	bcf	status, 5	;RP0=0, select bank0
 11673  0F02  1303               	bcf	status, 6	;RP1=0, select bank0
 11674  0F03  00A2               	movwf	(getVictimZone@victimX)
 11675                           	line	163
 11676                           	
 11677  0F04                     l10263:	
 11678                           ;map.c: 163: switch (victimX)
 11679  0F04  2F6C               	goto	l10305
 11680                           	line	165
 11681                           ;map.c: 164: {
 11682                           ;map.c: 165: case 0:
 11683                           	
 11684  0F05                     l2900:	
 11685                           	line	166
 11686                           ;map.c: 166: switch (victimY)
 11687  0F05  2F12               	goto	l10271
 11688                           	line	168
 11689                           ;map.c: 167: {
 11690                           ;map.c: 168: case 0:
 11691                           	
 11692  0F06                     l2902:	
 11693                           	line	169
 11694                           	
 11695  0F06                     l10265:	
 11696                           ;map.c: 169: vicZone = 4;
 11697  0F06  3004               	movlw	(04h)
 11698  0F07  00A1               	movwf	(??_getVictimZone+0)+0
 11699  0F08  0821               	movf	(??_getVictimZone+0)+0,w
 11700  0F09  00DA               	movwf	(_vicZone)
 11701                           	line	170
 11702                           ;map.c: 170: break;
 11703  0F0A  2F7D               	goto	l10307
 11704                           	line	171
 11705                           ;map.c: 171: case 1:
 11706                           	
 11707  0F0B                     l2904:	
 11708                           	line	172
 11709                           	
 11710  0F0B                     l10267:	
 11711                           ;map.c: 172: vicZone = 4;
 11712  0F0B  3004               	movlw	(04h)
 11713  0F0C  00A1               	movwf	(??_getVictimZone+0)+0
 11714  0F0D  0821               	movf	(??_getVictimZone+0)+0,w
 11715  0F0E  00DA               	movwf	(_vicZone)
 11716                           	line	173
 11717                           ;map.c: 173: break;
 11718  0F0F  2F7D               	goto	l10307
 11719                           	line	178
 11720                           ;map.c: 178: default:
 11721                           	
 11722  0F10                     l2905:	
 11723                           	line	179
 11724                           ;map.c: 179: break;
 11725  0F10  2F7D               	goto	l10307
 11726                           	line	180
 11727                           	
 11728  0F11                     l10269:	
 11729                           ;map.c: 180: }
 11730  0F11  2F7D               	goto	l10307
 11731                           	line	166
 11732                           	
 11733  0F12                     l2901:	
 11734                           	
 11735  0F12                     l10271:	
 11736  0F12  0820               	movf	(getVictimZone@victimY),w
 11737                           	; Switch size 1, requested type "space"
 11738                           ; Number of cases is 2, Range of values is 0 to 1
 11739                           ; switch strategies available:
 11740                           ; Name         Instructions Cycles
 11741                           ; simple_byte            7     4 (average)
 11742                           ; direct_byte           14     8 (fixed)
 11743                           ; jumptable            260     6 (fixed)
 11744                           ; rangetable             6     6 (fixed)
 11745                           ; spacedrange           10     9 (fixed)
 11746                           ; locatedrange           2     3 (fixed)
 11747                           ;	Chosen strategy is simple_byte
 11748                           
 11749                           	opt asmopt_off
 11750  0F13  3A00               	xorlw	0^0	; case 0
 11751  0F14  1903               	skipnz
 11752  0F15  2F06               	goto	l10265
 11753  0F16  3A01               	xorlw	1^0	; case 1
 11754  0F17  1903               	skipnz
 11755  0F18  2F0B               	goto	l10267
 11756  0F19  2F7D               	goto	l10307
 11757                           	opt asmopt_on
 11758                           
 11759                           	line	180
 11760                           	
 11761  0F1A                     l2903:	
 11762                           	line	181
 11763                           ;map.c: 181: break;
 11764  0F1A  2F7D               	goto	l10307
 11765                           	line	183
 11766                           ;map.c: 183: case 1:
 11767                           	
 11768  0F1B                     l2907:	
 11769                           	line	184
 11770                           ;map.c: 184: switch (victimY)
 11771  0F1B  2F28               	goto	l10279
 11772                           	line	186
 11773                           ;map.c: 185: {
 11774                           ;map.c: 186: case 0:
 11775                           	
 11776  0F1C                     l2909:	
 11777                           	line	187
 11778                           	
 11779  0F1C                     l10273:	
 11780                           ;map.c: 187: vicZone = 4;
 11781  0F1C  3004               	movlw	(04h)
 11782  0F1D  00A1               	movwf	(??_getVictimZone+0)+0
 11783  0F1E  0821               	movf	(??_getVictimZone+0)+0,w
 11784  0F1F  00DA               	movwf	(_vicZone)
 11785                           	line	188
 11786                           ;map.c: 188: break;
 11787  0F20  2F7D               	goto	l10307
 11788                           	line	189
 11789                           ;map.c: 189: case 1:
 11790                           	
 11791  0F21                     l2911:	
 11792                           	line	190
 11793                           	
 11794  0F21                     l10275:	
 11795                           ;map.c: 190: vicZone = 4;
 11796  0F21  3004               	movlw	(04h)
 11797  0F22  00A1               	movwf	(??_getVictimZone+0)+0
 11798  0F23  0821               	movf	(??_getVictimZone+0)+0,w
 11799  0F24  00DA               	movwf	(_vicZone)
 11800                           	line	191
 11801                           ;map.c: 191: break;
 11802  0F25  2F7D               	goto	l10307
 11803                           	line	196
 11804                           ;map.c: 196: default:
 11805                           	
 11806  0F26                     l2912:	
 11807                           	line	197
 11808                           ;map.c: 197: break;
 11809  0F26  2F7D               	goto	l10307
 11810                           	line	198
 11811                           	
 11812  0F27                     l10277:	
 11813                           ;map.c: 198: }
 11814  0F27  2F7D               	goto	l10307
 11815                           	line	184
 11816                           	
 11817  0F28                     l2908:	
 11818                           	
 11819  0F28                     l10279:	
 11820  0F28  0820               	movf	(getVictimZone@victimY),w
 11821                           	; Switch size 1, requested type "space"
 11822                           ; Number of cases is 2, Range of values is 0 to 1
 11823                           ; switch strategies available:
 11824                           ; Name         Instructions Cycles
 11825                           ; simple_byte            7     4 (average)
 11826                           ; direct_byte           14     8 (fixed)
 11827                           ; jumptable            260     6 (fixed)
 11828                           ; rangetable             6     6 (fixed)
 11829                           ; spacedrange           10     9 (fixed)
 11830                           ; locatedrange           2     3 (fixed)
 11831                           ;	Chosen strategy is simple_byte
 11832                           
 11833                           	opt asmopt_off
 11834  0F29  3A00               	xorlw	0^0	; case 0
 11835  0F2A  1903               	skipnz
 11836  0F2B  2F1C               	goto	l10273
 11837  0F2C  3A01               	xorlw	1^0	; case 1
 11838  0F2D  1903               	skipnz
 11839  0F2E  2F21               	goto	l10275
 11840  0F2F  2F7D               	goto	l10307
 11841                           	opt asmopt_on
 11842                           
 11843                           	line	198
 11844                           	
 11845  0F30                     l2910:	
 11846                           	line	199
 11847                           ;map.c: 199: break;
 11848  0F30  2F7D               	goto	l10307
 11849                           	line	201
 11850                           ;map.c: 201: case 2:
 11851                           	
 11852  0F31                     l2913:	
 11853                           	line	202
 11854                           ;map.c: 202: switch (victimY)
 11855  0F31  2F3D               	goto	l10287
 11856                           	line	206
 11857                           ;map.c: 203: {
 11858                           ;map.c: 206: case 1:
 11859                           	
 11860  0F32                     l2915:	
 11861                           	line	207
 11862                           	
 11863  0F32                     l10281:	
 11864                           ;map.c: 207: vicZone = 3;
 11865  0F32  3003               	movlw	(03h)
 11866  0F33  00A1               	movwf	(??_getVictimZone+0)+0
 11867  0F34  0821               	movf	(??_getVictimZone+0)+0,w
 11868  0F35  00DA               	movwf	(_vicZone)
 11869                           	line	208
 11870                           ;map.c: 208: break;
 11871  0F36  2F7D               	goto	l10307
 11872                           	line	211
 11873                           ;map.c: 211: case 3:
 11874                           	
 11875  0F37                     l2917:	
 11876                           	line	212
 11877                           	
 11878  0F37                     l10283:	
 11879                           ;map.c: 212: vicZone = 1;
 11880  0F37  01DA               	clrf	(_vicZone)
 11881  0F38  1403               	bsf	status,0
 11882  0F39  0DDA               	rlf	(_vicZone),f
 11883                           	line	213
 11884                           ;map.c: 213: break;
 11885  0F3A  2F7D               	goto	l10307
 11886                           	line	214
 11887                           ;map.c: 214: default:
 11888                           	
 11889  0F3B                     l2918:	
 11890                           	line	215
 11891                           ;map.c: 215: break;
 11892  0F3B  2F7D               	goto	l10307
 11893                           	line	216
 11894                           	
 11895  0F3C                     l10285:	
 11896                           ;map.c: 216: }
 11897  0F3C  2F7D               	goto	l10307
 11898                           	line	202
 11899                           	
 11900  0F3D                     l2914:	
 11901                           	
 11902  0F3D                     l10287:	
 11903  0F3D  0820               	movf	(getVictimZone@victimY),w
 11904                           	; Switch size 1, requested type "space"
 11905                           ; Number of cases is 2, Range of values is 1 to 3
 11906                           ; switch strategies available:
 11907                           ; Name         Instructions Cycles
 11908                           ; simple_byte            7     4 (average)
 11909                           ; direct_byte           20    11 (fixed)
 11910                           ; jumptable            263     9 (fixed)
 11911                           ;	Chosen strategy is simple_byte
 11912                           
 11913                           	opt asmopt_off
 11914  0F3E  3A01               	xorlw	1^0	; case 1
 11915  0F3F  1903               	skipnz
 11916  0F40  2F32               	goto	l10281
 11917  0F41  3A02               	xorlw	3^1	; case 3
 11918  0F42  1903               	skipnz
 11919  0F43  2F37               	goto	l10283
 11920  0F44  2F7D               	goto	l10307
 11921                           	opt asmopt_on
 11922                           
 11923                           	line	216
 11924                           	
 11925  0F45                     l2916:	
 11926                           	line	217
 11927                           ;map.c: 217: break;
 11928  0F45  2F7D               	goto	l10307
 11929                           	line	219
 11930                           ;map.c: 219: case 3:
 11931                           	
 11932  0F46                     l2919:	
 11933                           	line	220
 11934                           ;map.c: 220: switch (victimY)
 11935  0F46  2F53               	goto	l10295
 11936                           	line	224
 11937                           ;map.c: 221: {
 11938                           ;map.c: 224: case 1:
 11939                           	
 11940  0F47                     l2921:	
 11941                           	line	225
 11942                           	
 11943  0F47                     l10289:	
 11944                           ;map.c: 225: vicZone = 3;
 11945  0F47  3003               	movlw	(03h)
 11946  0F48  00A1               	movwf	(??_getVictimZone+0)+0
 11947  0F49  0821               	movf	(??_getVictimZone+0)+0,w
 11948  0F4A  00DA               	movwf	(_vicZone)
 11949                           	line	226
 11950                           ;map.c: 226: break;
 11951  0F4B  2F7D               	goto	l10307
 11952                           	line	229
 11953                           ;map.c: 229: case 3:
 11954                           	
 11955  0F4C                     l2923:	
 11956                           	line	230
 11957                           	
 11958  0F4C                     l10291:	
 11959                           ;map.c: 230: vicZone = 2;
 11960  0F4C  3002               	movlw	(02h)
 11961  0F4D  00A1               	movwf	(??_getVictimZone+0)+0
 11962  0F4E  0821               	movf	(??_getVictimZone+0)+0,w
 11963  0F4F  00DA               	movwf	(_vicZone)
 11964                           	line	231
 11965                           ;map.c: 231: break;
 11966  0F50  2F7D               	goto	l10307
 11967                           	line	232
 11968                           ;map.c: 232: default:
 11969                           	
 11970  0F51                     l2924:	
 11971                           	line	233
 11972                           ;map.c: 233: break;
 11973  0F51  2F7D               	goto	l10307
 11974                           	line	234
 11975                           	
 11976  0F52                     l10293:	
 11977                           ;map.c: 234: }
 11978  0F52  2F7D               	goto	l10307
 11979                           	line	220
 11980                           	
 11981  0F53                     l2920:	
 11982                           	
 11983  0F53                     l10295:	
 11984  0F53  0820               	movf	(getVictimZone@victimY),w
 11985                           	; Switch size 1, requested type "space"
 11986                           ; Number of cases is 2, Range of values is 1 to 3
 11987                           ; switch strategies available:
 11988                           ; Name         Instructions Cycles
 11989                           ; simple_byte            7     4 (average)
 11990                           ; direct_byte           20    11 (fixed)
 11991                           ; jumptable            263     9 (fixed)
 11992                           ;	Chosen strategy is simple_byte
 11993                           
 11994                           	opt asmopt_off
 11995  0F54  3A01               	xorlw	1^0	; case 1
 11996  0F55  1903               	skipnz
 11997  0F56  2F47               	goto	l10289
 11998  0F57  3A02               	xorlw	3^1	; case 3
 11999  0F58  1903               	skipnz
 12000  0F59  2F4C               	goto	l10291
 12001  0F5A  2F7D               	goto	l10307
 12002                           	opt asmopt_on
 12003                           
 12004                           	line	234
 12005                           	
 12006  0F5B                     l2922:	
 12007                           	line	235
 12008                           ;map.c: 235: break;
 12009  0F5B  2F7D               	goto	l10307
 12010                           	line	237
 12011                           ;map.c: 237: case 4:
 12012                           	
 12013  0F5C                     l2925:	
 12014                           	line	238
 12015                           ;map.c: 238: switch (victimY)
 12016  0F5C  2F64               	goto	l10301
 12017                           	line	246
 12018                           ;map.c: 239: {
 12019                           ;map.c: 246: case 3:
 12020                           	
 12021  0F5D                     l2927:	
 12022                           	line	247
 12023                           	
 12024  0F5D                     l10297:	
 12025                           ;map.c: 247: vicZone = 2;
 12026  0F5D  3002               	movlw	(02h)
 12027  0F5E  00A1               	movwf	(??_getVictimZone+0)+0
 12028  0F5F  0821               	movf	(??_getVictimZone+0)+0,w
 12029  0F60  00DA               	movwf	(_vicZone)
 12030                           	line	248
 12031                           ;map.c: 248: break;
 12032  0F61  2F7D               	goto	l10307
 12033                           	line	249
 12034                           ;map.c: 249: default:
 12035                           	
 12036  0F62                     l2929:	
 12037                           	line	250
 12038                           ;map.c: 250: break;
 12039  0F62  2F7D               	goto	l10307
 12040                           	line	251
 12041                           	
 12042  0F63                     l10299:	
 12043                           ;map.c: 251: }
 12044  0F63  2F7D               	goto	l10307
 12045                           	line	238
 12046                           	
 12047  0F64                     l2926:	
 12048                           	
 12049  0F64                     l10301:	
 12050  0F64  0820               	movf	(getVictimZone@victimY),w
 12051                           	; Switch size 1, requested type "space"
 12052                           ; Number of cases is 1, Range of values is 3 to 3
 12053                           ; switch strategies available:
 12054                           ; Name         Instructions Cycles
 12055                           ; simple_byte            4     3 (average)
 12056                           ; direct_byte           14    11 (fixed)
 12057                           ; jumptable            263     9 (fixed)
 12058                           ;	Chosen strategy is simple_byte
 12059                           
 12060                           	opt asmopt_off
 12061  0F65  3A03               	xorlw	3^0	; case 3
 12062  0F66  1903               	skipnz
 12063  0F67  2F5D               	goto	l10297
 12064  0F68  2F7D               	goto	l10307
 12065                           	opt asmopt_on
 12066                           
 12067                           	line	251
 12068                           	
 12069  0F69                     l2928:	
 12070                           	line	252
 12071                           ;map.c: 252: break;
 12072  0F69  2F7D               	goto	l10307
 12073                           	line	254
 12074                           ;map.c: 254: default:
 12075                           	
 12076  0F6A                     l2930:	
 12077                           	line	255
 12078                           ;map.c: 255: break;
 12079  0F6A  2F7D               	goto	l10307
 12080                           	line	256
 12081                           	
 12082  0F6B                     l10303:	
 12083                           ;map.c: 256: }
 12084  0F6B  2F7D               	goto	l10307
 12085                           	line	163
 12086                           	
 12087  0F6C                     l2899:	
 12088                           	
 12089  0F6C                     l10305:	
 12090  0F6C  0822               	movf	(getVictimZone@victimX),w
 12091                           	; Switch size 1, requested type "space"
 12092                           ; Number of cases is 5, Range of values is 0 to 4
 12093                           ; switch strategies available:
 12094                           ; Name         Instructions Cycles
 12095                           ; simple_byte           16     9 (average)
 12096                           ; direct_byte           23     8 (fixed)
 12097                           ; jumptable            260     6 (fixed)
 12098                           ; rangetable             9     6 (fixed)
 12099                           ; spacedrange           16     9 (fixed)
 12100                           ; locatedrange           5     3 (fixed)
 12101                           ;	Chosen strategy is simple_byte
 12102                           
 12103                           	opt asmopt_off
 12104  0F6D  3A00               	xorlw	0^0	; case 0
 12105  0F6E  1903               	skipnz
 12106  0F6F  2F12               	goto	l10271
 12107  0F70  3A01               	xorlw	1^0	; case 1
 12108  0F71  1903               	skipnz
 12109  0F72  2F28               	goto	l10279
 12110  0F73  3A03               	xorlw	2^1	; case 2
 12111  0F74  1903               	skipnz
 12112  0F75  2F3D               	goto	l10287
 12113  0F76  3A01               	xorlw	3^2	; case 3
 12114  0F77  1903               	skipnz
 12115  0F78  2F53               	goto	l10295
 12116  0F79  3A07               	xorlw	4^3	; case 4
 12117  0F7A  1903               	skipnz
 12118  0F7B  2F64               	goto	l10301
 12119  0F7C  2F7D               	goto	l10307
 12120                           	opt asmopt_on
 12121                           
 12122                           	line	256
 12123                           	
 12124  0F7D                     l2906:	
 12125                           	line	258
 12126                           	
 12127  0F7D                     l10307:	
 12128                           ;map.c: 258: return vicZone;
 12129  0F7D  085A               	movf	(_vicZone),w
 12130  0F7E  2F7F               	goto	l2931
 12131                           	
 12132  0F7F                     l10309:	
 12133                           	line	259
 12134                           	
 12135  0F7F                     l2931:	
 12136  0F7F  0008               	return
 12137                           	opt stack 0
 12138                           GLOBAL	__end_of_getVictimZone
 12139  0F80                     	__end_of_getVictimZone:
 12140 ;; =============== function _getVictimZone ends ============
 12141                           
 12142                           	signat	_getVictimZone,8313
 12143                           	global	_getFinalY
 12144                           psect	text1292,local,class=CODE,delta=2
 12145                           global __ptext1292
 12146  1554                     __ptext1292:
 12147                           
 12148 ;; *************** function _getFinalY *****************
 12149 ;; Defined at:
 12150 ;;		line 152 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\map.c"
 12151 ;; Parameters:    Size  Location     Type
 12152 ;;		None
 12153 ;; Auto vars:     Size  Location     Type
 12154 ;;		None
 12155 ;; Return value:  Size  Location     Type
 12156 ;;                  1    wreg      unsigned char 
 12157 ;; Registers used:
 12158 ;;		wreg
 12159 ;; Tracked objects:
 12160 ;;		On entry : 0/0
 12161 ;;		On exit  : 0/0
 12162 ;;		Unchanged: 0/0
 12163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12164 ;;      Params:         0       0       0       0       0
 12165 ;;      Locals:         0       0       0       0       0
 12166 ;;      Temps:          0       0       0       0       0
 12167 ;;      Totals:         0       0       0       0       0
 12168 ;;Total ram usage:        0 bytes
 12169 ;; Hardware stack levels used:    1
 12170 ;; Hardware stack levels required when called:    1
 12171 ;; This function calls:
 12172 ;;		Nothing
 12173 ;; This function is called by:
 12174 ;;		_checkForFinalDestination
 12175 ;; This function uses a non-reentrant model
 12176 ;;
 12177                           psect	text1292
 12178                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\map.c"
 12179                           	line	152
 12180                           	global	__size_of_getFinalY
 12181  0005                     	__size_of_getFinalY	equ	__end_of_getFinalY-_getFinalY
 12182                           	
 12183  1554                     _getFinalY:	
 12184                           	opt	stack 5
 12185                           ; Regs used in _getFinalY: [wreg]
 12186                           	line	153
 12187                           	
 12188  1554                     l10259:	
 12189                           ;map.c: 153: return finalY;
 12190  1554  1283               	bcf	status, 5	;RP0=0, select bank0
 12191  1555  1303               	bcf	status, 6	;RP1=0, select bank0
 12192  1556  085E               	movf	(_finalY),w
 12193  1557  2D58               	goto	l2896
 12194                           	
 12195  1558                     l10261:	
 12196                           	line	154
 12197                           	
 12198  1558                     l2896:	
 12199  1558  0008               	return
 12200                           	opt stack 0
 12201                           GLOBAL	__end_of_getFinalY
 12202  1559                     	__end_of_getFinalY:
 12203 ;; =============== function _getFinalY ends ============
 12204                           
 12205                           	signat	_getFinalY,89
 12206                           	global	_getFinalX
 12207                           psect	text1293,local,class=CODE,delta=2
 12208                           global __ptext1293
 12209  154F                     __ptext1293:
 12210                           
 12211 ;; *************** function _getFinalX *****************
 12212 ;; Defined at:
 12213 ;;		line 147 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\map.c"
 12214 ;; Parameters:    Size  Location     Type
 12215 ;;		None
 12216 ;; Auto vars:     Size  Location     Type
 12217 ;;		None
 12218 ;; Return value:  Size  Location     Type
 12219 ;;                  1    wreg      unsigned char 
 12220 ;; Registers used:
 12221 ;;		wreg
 12222 ;; Tracked objects:
 12223 ;;		On entry : 0/0
 12224 ;;		On exit  : 0/0
 12225 ;;		Unchanged: 0/0
 12226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12227 ;;      Params:         0       0       0       0       0
 12228 ;;      Locals:         0       0       0       0       0
 12229 ;;      Temps:          0       0       0       0       0
 12230 ;;      Totals:         0       0       0       0       0
 12231 ;;Total ram usage:        0 bytes
 12232 ;; Hardware stack levels used:    1
 12233 ;; Hardware stack levels required when called:    1
 12234 ;; This function calls:
 12235 ;;		Nothing
 12236 ;; This function is called by:
 12237 ;;		_checkForFinalDestination
 12238 ;; This function uses a non-reentrant model
 12239 ;;
 12240                           psect	text1293
 12241                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\map.c"
 12242                           	line	147
 12243                           	global	__size_of_getFinalX
 12244  0005                     	__size_of_getFinalX	equ	__end_of_getFinalX-_getFinalX
 12245                           	
 12246  154F                     _getFinalX:	
 12247                           	opt	stack 5
 12248                           ; Regs used in _getFinalX: [wreg]
 12249                           	line	148
 12250                           	
 12251  154F                     l10255:	
 12252                           ;map.c: 148: return finalX;
 12253  154F  1283               	bcf	status, 5	;RP0=0, select bank0
 12254  1550  1303               	bcf	status, 6	;RP1=0, select bank0
 12255  1551  085D               	movf	(_finalX),w
 12256  1552  2D53               	goto	l2893
 12257                           	
 12258  1553                     l10257:	
 12259                           	line	149
 12260                           	
 12261  1553                     l2893:	
 12262  1553  0008               	return
 12263                           	opt stack 0
 12264                           GLOBAL	__end_of_getFinalX
 12265  1554                     	__end_of_getFinalX:
 12266 ;; =============== function _getFinalX ends ============
 12267                           
 12268                           	signat	_getFinalX,89
 12269                           	global	_ser_putch
 12270                           psect	text1294,local,class=CODE,delta=2
 12271                           global __ptext1294
 12272  16AE                     __ptext1294:
 12273                           
 12274 ;; *************** function _ser_putch *****************
 12275 ;; Defined at:
 12276 ;;		line 81 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\ser.c"
 12277 ;; Parameters:    Size  Location     Type
 12278 ;;  c               1    wreg     unsigned char 
 12279 ;; Auto vars:     Size  Location     Type
 12280 ;;  c               1    1[BANK0 ] unsigned char 
 12281 ;; Return value:  Size  Location     Type
 12282 ;;		None               void
 12283 ;; Registers used:
 12284 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12285 ;; Tracked objects:
 12286 ;;		On entry : 0/0
 12287 ;;		On exit  : 0/0
 12288 ;;		Unchanged: 0/0
 12289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12290 ;;      Params:         0       0       0       0       0
 12291 ;;      Locals:         0       1       0       0       0
 12292 ;;      Temps:          0       1       0       0       0
 12293 ;;      Totals:         0       2       0       0       0
 12294 ;;Total ram usage:        2 bytes
 12295 ;; Hardware stack levels used:    1
 12296 ;; Hardware stack levels required when called:    1
 12297 ;; This function calls:
 12298 ;;		Nothing
 12299 ;; This function is called by:
 12300 ;;		_ser_putArr
 12301 ;;		_play_iCreate_song
 12302 ;;		_drive
 12303 ;;		_driveForDistance
 12304 ;;		_waitFor
 12305 ;;		_initIRobot
 12306 ;;		_lookForVictim
 12307 ;;		_EEPROMToSerial
 12308 ;;		_ser_puts
 12309 ;;		_ser_puts2
 12310 ;;		_ser_puthex
 12311 ;; This function uses a non-reentrant model
 12312 ;;
 12313                           psect	text1294
 12314                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\ser.c"
 12315                           	line	81
 12316                           	global	__size_of_ser_putch
 12317  0021                     	__size_of_ser_putch	equ	__end_of_ser_putch-_ser_putch
 12318                           	
 12319  16AE                     _ser_putch:	
 12320                           	opt	stack 4
 12321                           ; Regs used in _ser_putch: [wreg-fsr0h+status,2+status,0]
 12322                           ;ser_putch@c stored from wreg
 12323  16AE  1283               	bcf	status, 5	;RP0=0, select bank0
 12324  16AF  1303               	bcf	status, 6	;RP1=0, select bank0
 12325  16B0  00A1               	movwf	(ser_putch@c)
 12326                           	line	82
 12327                           	
 12328  16B1                     l10227:	
 12329                           ;ser.c: 82: while (((txiptr+1) & (16-1))==txoptr)
 12330  16B1  2EB3               	goto	l10229
 12331                           	
 12332  16B2                     l3649:	
 12333                           	line	83
 12334                           ;ser.c: 83: continue;
 12335  16B2  2EB3               	goto	l10229
 12336                           	
 12337  16B3                     l3648:	
 12338                           	line	82
 12339                           	
 12340  16B3                     l10229:	
 12341  16B3  087D               	movf	(_txiptr),w	;volatile
 12342  16B4  3E01               	addlw	01h
 12343  16B5  390F               	andlw	0Fh
 12344  16B6  0659               	xorwf	(_txoptr),w	;volatile
 12345  16B7  1903               	skipnz
 12346  16B8  2EBA               	goto	u3521
 12347  16B9  2EBB               	goto	u3520
 12348  16BA                     u3521:
 12349  16BA  2EB3               	goto	l10229
 12350  16BB                     u3520:
 12351                           	
 12352  16BB                     l3650:	
 12353                           	line	84
 12354                           ;ser.c: 84: GIE=0;
 12355  16BB  138B               	bcf	(95/8),(95)&7
 12356                           	line	85
 12357                           	
 12358  16BC                     l10231:	
 12359                           ;ser.c: 85: txfifo[txiptr] = c;
 12360  16BC  0821               	movf	(ser_putch@c),w
 12361  16BD  00A0               	movwf	(??_ser_putch+0)+0
 12362  16BE  087D               	movf	(_txiptr),w
 12363  16BF  3EDE               	addlw	_txfifo&0ffh
 12364  16C0  0084               	movwf	fsr0
 12365  16C1  0820               	movf	(??_ser_putch+0)+0,w
 12366  16C2  1383               	bcf	status, 7	;select IRP bank1
 12367  16C3  0080               	movwf	indf
 12368                           	line	86
 12369                           	
 12370  16C4                     l10233:	
 12371                           ;ser.c: 86: txiptr=(txiptr+1) & (16-1);
 12372  16C4  087D               	movf	(_txiptr),w	;volatile
 12373  16C5  3E01               	addlw	01h
 12374  16C6  390F               	andlw	0Fh
 12375  16C7  00A0               	movwf	(??_ser_putch+0)+0
 12376  16C8  0820               	movf	(??_ser_putch+0)+0,w
 12377  16C9  00FD               	movwf	(_txiptr)	;volatile
 12378                           	line	87
 12379                           	
 12380  16CA                     l10235:	
 12381                           ;ser.c: 87: TXIE=1;
 12382  16CA  1683               	bsf	status, 5	;RP0=1, select bank1
 12383  16CB  1303               	bcf	status, 6	;RP1=0, select bank1
 12384  16CC  160C               	bsf	(1124/8)^080h,(1124)&7
 12385                           	line	88
 12386                           	
 12387  16CD                     l10237:	
 12388                           ;ser.c: 88: GIE=1;
 12389  16CD  178B               	bsf	(95/8),(95)&7
 12390                           	line	89
 12391                           	
 12392  16CE                     l3651:	
 12393  16CE  0008               	return
 12394                           	opt stack 0
 12395                           GLOBAL	__end_of_ser_putch
 12396  16CF                     	__end_of_ser_putch:
 12397 ;; =============== function _ser_putch ends ============
 12398                           
 12399                           	signat	_ser_putch,4216
 12400                           	global	_initEEPROMMode
 12401                           psect	text1295,local,class=CODE,delta=2
 12402                           global __ptext1295
 12403  156D                     __ptext1295:
 12404                           
 12405 ;; *************** function _initEEPROMMode *****************
 12406 ;; Defined at:
 12407 ;;		line 21 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\eeprom.c"
 12408 ;; Parameters:    Size  Location     Type
 12409 ;;		None
 12410 ;; Auto vars:     Size  Location     Type
 12411 ;;		None
 12412 ;; Return value:  Size  Location     Type
 12413 ;;		None               void
 12414 ;; Registers used:
 12415 ;;		wreg, status,2, status,0
 12416 ;; Tracked objects:
 12417 ;;		On entry : 0/0
 12418 ;;		On exit  : 0/0
 12419 ;;		Unchanged: 0/0
 12420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12421 ;;      Params:         0       0       0       0       0
 12422 ;;      Locals:         0       0       0       0       0
 12423 ;;      Temps:          0       1       0       0       0
 12424 ;;      Totals:         0       1       0       0       0
 12425 ;;Total ram usage:        1 bytes
 12426 ;; Hardware stack levels used:    1
 12427 ;; Hardware stack levels required when called:    1
 12428 ;; This function calls:
 12429 ;;		Nothing
 12430 ;; This function is called by:
 12431 ;;		_writeEEPROM
 12432 ;;		_readEEPROM
 12433 ;; This function uses a non-reentrant model
 12434 ;;
 12435                           psect	text1295
 12436                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\eeprom.c"
 12437                           	line	21
 12438                           	global	__size_of_initEEPROMMode
 12439  0008                     	__size_of_initEEPROMMode	equ	__end_of_initEEPROMMode-_initEEPROMMode
 12440                           	
 12441  156D                     _initEEPROMMode:	
 12442                           	opt	stack 3
 12443                           ; Regs used in _initEEPROMMode: [wreg+status,2+status,0]
 12444                           	line	22
 12445                           	
 12446  156D                     l10159:	
 12447                           ;eeprom.c: 22: PORTC &= 0b11111100;
 12448  156D  30FC               	movlw	(0FCh)
 12449  156E  1283               	bcf	status, 5	;RP0=0, select bank0
 12450  156F  1303               	bcf	status, 6	;RP1=0, select bank0
 12451  1570  00A0               	movwf	(??_initEEPROMMode+0)+0
 12452  1571  0820               	movf	(??_initEEPROMMode+0)+0,w
 12453  1572  0587               	andwf	(7),f	;volatile
 12454                           	line	23
 12455                           	
 12456  1573                     l10161:	
 12457                           ;eeprom.c: 23: PORTC |= 0b00000010;
 12458  1573  1487               	bsf	(7)+(1/8),(1)&7	;volatile
 12459                           	line	24
 12460                           	
 12461  1574                     l1407:	
 12462  1574  0008               	return
 12463                           	opt stack 0
 12464                           GLOBAL	__end_of_initEEPROMMode
 12465  1575                     	__end_of_initEEPROMMode:
 12466 ;; =============== function _initEEPROMMode ends ============
 12467                           
 12468                           	signat	_initEEPROMMode,88
 12469                           	global	_writeSPIByte
 12470                           psect	text1296,local,class=CODE,delta=2
 12471                           global __ptext1296
 12472  1592                     __ptext1296:
 12473                           
 12474 ;; *************** function _writeSPIByte *****************
 12475 ;; Defined at:
 12476 ;;		line 14 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\eeprom.c"
 12477 ;; Parameters:    Size  Location     Type
 12478 ;;  data            1    wreg     unsigned char 
 12479 ;; Auto vars:     Size  Location     Type
 12480 ;;  data            1    0[BANK0 ] unsigned char 
 12481 ;; Return value:  Size  Location     Type
 12482 ;;		None               void
 12483 ;; Registers used:
 12484 ;;		wreg
 12485 ;; Tracked objects:
 12486 ;;		On entry : 0/0
 12487 ;;		On exit  : 0/0
 12488 ;;		Unchanged: 0/0
 12489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12490 ;;      Params:         0       0       0       0       0
 12491 ;;      Locals:         0       1       0       0       0
 12492 ;;      Temps:          0       0       0       0       0
 12493 ;;      Totals:         0       1       0       0       0
 12494 ;;Total ram usage:        1 bytes
 12495 ;; Hardware stack levels used:    1
 12496 ;; Hardware stack levels required when called:    1
 12497 ;; This function calls:
 12498 ;;		Nothing
 12499 ;; This function is called by:
 12500 ;;		_writeEEPROM
 12501 ;;		_readEEPROM
 12502 ;; This function uses a non-reentrant model
 12503 ;;
 12504                           psect	text1296
 12505                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\eeprom.c"
 12506                           	line	14
 12507                           	global	__size_of_writeSPIByte
 12508  000D                     	__size_of_writeSPIByte	equ	__end_of_writeSPIByte-_writeSPIByte
 12509                           	
 12510  1592                     _writeSPIByte:	
 12511                           	opt	stack 3
 12512                           ; Regs used in _writeSPIByte: [wreg]
 12513                           ;writeSPIByte@data stored from wreg
 12514  1592  1283               	bcf	status, 5	;RP0=0, select bank0
 12515  1593  1303               	bcf	status, 6	;RP1=0, select bank0
 12516  1594  00A0               	movwf	(writeSPIByte@data)
 12517                           	line	15
 12518                           	
 12519  1595                     l10155:	
 12520                           ;eeprom.c: 15: SSPIF = 0;
 12521  1595  118C               	bcf	(99/8),(99)&7
 12522                           	line	16
 12523                           	
 12524  1596                     l10157:	
 12525                           ;eeprom.c: 16: SSPBUF = data;
 12526  1596  0820               	movf	(writeSPIByte@data),w
 12527  1597  0093               	movwf	(19)	;volatile
 12528                           	line	17
 12529                           ;eeprom.c: 17: while(!SSPIF);
 12530  1598  2D99               	goto	l1401
 12531                           	
 12532  1599                     l1402:	
 12533                           	
 12534  1599                     l1401:	
 12535  1599  1D8C               	btfss	(99/8),(99)&7
 12536  159A  2D9C               	goto	u3451
 12537  159B  2D9D               	goto	u3450
 12538  159C                     u3451:
 12539  159C  2D99               	goto	l1401
 12540  159D                     u3450:
 12541  159D  2D9E               	goto	l1404
 12542                           	
 12543  159E                     l1403:	
 12544                           	line	18
 12545                           	
 12546  159E                     l1404:	
 12547  159E  0008               	return
 12548                           	opt stack 0
 12549                           GLOBAL	__end_of_writeSPIByte
 12550  159F                     	__end_of_writeSPIByte:
 12551 ;; =============== function _writeSPIByte ends ============
 12552                           
 12553                           	signat	_writeSPIByte,4216
 12554                           	global	_isr1
 12555                           psect	text1297,local,class=CODE,delta=2
 12556                           global __ptext1297
 12557  0F80                     __ptext1297:
 12558                           
 12559 ;; *************** function _isr1 *****************
 12560 ;; Defined at:
 12561 ;;		line 62 in file "C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
 12562 ;; Parameters:    Size  Location     Type
 12563 ;;		None
 12564 ;; Auto vars:     Size  Location     Type
 12565 ;;		None
 12566 ;; Return value:  Size  Location     Type
 12567 ;;		None               void
 12568 ;; Registers used:
 12569 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12570 ;; Tracked objects:
 12571 ;;		On entry : 0/0
 12572 ;;		On exit  : 0/0
 12573 ;;		Unchanged: 0/0
 12574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12575 ;;      Params:         0       0       0       0       0
 12576 ;;      Locals:         0       0       0       0       0
 12577 ;;      Temps:         10       0       0       0       0
 12578 ;;      Totals:        10       0       0       0       0
 12579 ;;Total ram usage:       10 bytes
 12580 ;; Hardware stack levels used:    1
 12581 ;; This function calls:
 12582 ;;		Nothing
 12583 ;; This function is called by:
 12584 ;;		Interrupt level 1
 12585 ;; This function uses a non-reentrant model
 12586 ;;
 12587                           psect	text1297
 12588                           	file	"C:\Users\11014065\Desktop\30 May WORKING FILE\main.c"
 12589                           	line	62
 12590                           	global	__size_of_isr1
 12591  0080                     	__size_of_isr1	equ	__end_of_isr1-_isr1
 12592                           	
 12593  0F80                     _isr1:	
 12594                           	opt	stack 1
 12595                           ; Regs used in _isr1: [wreg-fsr0h+status,2+status,0]
 12596                           psect	intentry,class=CODE,delta=2
 12597                           global __pintentry
 12598  0004                     __pintentry:
 12599                           global interrupt_function
 12600  0004                     interrupt_function:
 12601                           	global saved_w
 12602  007E                     	saved_w	set	btemp+0
 12603  0004  00FE               	movwf	saved_w
 12604  0005  0E03               	swapf	status,w
 12605  0006  00F8               	movwf	(??_isr1+6)
 12606  0007  0804               	movf	fsr0,w
 12607  0008  00F9               	movwf	(??_isr1+7)
 12608  0009  080A               	movf	pclath,w
 12609  000A  00FA               	movwf	(??_isr1+8)
 12610  000B  1283               	bcf	status, 5	;RP0=0, select bank0
 12611  000C  1303               	bcf	status, 6	;RP1=0, select bank0
 12612  000D  087F               	movf	btemp+1,w
 12613  000E  00FB               	movwf	(??_isr1+9)
 12614  000F  120A  158A  2F80   	ljmp	_isr1
 12615                           psect	text1297
 12616                           	line	64
 12617                           	
 12618  0F80                     i1l10433:	
 12619                           ;main.c: 64: if(TMR0IF)
 12620  0F80  1D0B               	btfss	(90/8),(90)&7
 12621  0F81  2F83               	goto	u367_21
 12622  0F82  2F84               	goto	u367_20
 12623  0F83                     u367_21:
 12624  0F83  2FF4               	goto	i1l6708
 12625  0F84                     u367_20:
 12626                           	line	66
 12627                           	
 12628  0F84                     i1l10435:	
 12629                           ;main.c: 65: {
 12630                           ;main.c: 66: TMR0IF = 0;
 12631  0F84  110B               	bcf	(90/8),(90)&7
 12632                           	line	67
 12633                           	
 12634  0F85                     i1l10437:	
 12635                           ;main.c: 67: TMR0 = 100;
 12636  0F85  3064               	movlw	(064h)
 12637  0F86  0081               	movwf	(1)	;volatile
 12638                           	line	80
 12639                           	
 12640  0F87                     i1l10439:	
 12641                           ;main.c: 80: if(!RB0)
 12642  0F87  1806               	btfsc	(48/8),(48)&7
 12643  0F88  2F8A               	goto	u368_21
 12644  0F89  2F8B               	goto	u368_20
 12645  0F8A                     u368_21:
 12646  0F8A  2FAB               	goto	i1l6701
 12647  0F8B                     u368_20:
 12648                           	line	82
 12649                           	
 12650  0F8B                     i1l10441:	
 12651                           ;main.c: 81: {
 12652                           ;main.c: 82: start.debounceCount++;
 12653  0F8B  3001               	movlw	(01h)
 12654  0F8C  00F2               	movwf	(??_isr1+0)+0
 12655  0F8D  0872               	movf	(??_isr1+0)+0,w
 12656  0F8E  07CB               	addwf	0+(_start)+02h,f
 12657                           	line	83
 12658                           	
 12659  0F8F                     i1l10443:	
 12660                           ;main.c: 83: if(start.debounceCount >= 10 & start.released)
 12661  0F8F  084A               	movf	0+(_start)+01h,w
 12662  0F90  00F2               	movwf	(??_isr1+0)+0
 12663  0F91  01F3               	clrf	(??_isr1+0)+0+1
 12664  0F92  300A               	movlw	(0Ah)
 12665  0F93  024B               	subwf	0+(_start)+02h,w
 12666  0F94  3000               	movlw	0
 12667  0F95  1803               	skipnc
 12668  0F96  3001               	movlw	1
 12669  0F97  00F4               	movwf	(??_isr1+2)+0
 12670  0F98  01F5               	clrf	(??_isr1+2)+0+1
 12671  0F99  0872               	movf	0+(??_isr1+0)+0,w
 12672  0F9A  0574               	andwf	0+(??_isr1+2)+0,w
 12673  0F9B  00F6               	movwf	(??_isr1+4)+0
 12674  0F9C  0873               	movf	1+(??_isr1+0)+0,w
 12675  0F9D  0575               	andwf	1+(??_isr1+2)+0,w
 12676  0F9E  00F7               	movwf	1+(??_isr1+4)+0
 12677  0F9F  0877               	movf	1+(??_isr1+4)+0,w
 12678  0FA0  0476               	iorwf	0+(??_isr1+4)+0,w
 12679  0FA1  1903               	skipnz
 12680  0FA2  2FA4               	goto	u369_21
 12681  0FA3  2FA5               	goto	u369_20
 12682  0FA4                     u369_21:
 12683  0FA4  2FB0               	goto	i1l10451
 12684  0FA5                     u369_20:
 12685                           	line	85
 12686                           	
 12687  0FA5                     i1l10445:	
 12688                           ;main.c: 84: {
 12689                           ;main.c: 85: start.pressed = 1;
 12690  0FA5  01C9               	clrf	(_start)
 12691  0FA6  1403               	bsf	status,0
 12692  0FA7  0DC9               	rlf	(_start),f
 12693                           	line	86
 12694                           	
 12695  0FA8                     i1l10447:	
 12696                           ;main.c: 86: start.released = 0;
 12697  0FA8  01CA               	clrf	0+(_start)+01h
 12698  0FA9  2FB0               	goto	i1l10451
 12699                           	line	87
 12700                           	
 12701  0FAA                     i1l6702:	
 12702                           	line	88
 12703                           ;main.c: 87: }
 12704                           ;main.c: 88: }
 12705  0FAA  2FB0               	goto	i1l10451
 12706                           	line	89
 12707                           	
 12708  0FAB                     i1l6701:	
 12709                           	line	91
 12710                           ;main.c: 89: else
 12711                           ;main.c: 90: {
 12712                           ;main.c: 91: start.debounceCount = 0;
 12713  0FAB  01CB               	clrf	0+(_start)+02h
 12714                           	line	92
 12715                           	
 12716  0FAC                     i1l10449:	
 12717                           ;main.c: 92: start.released = 1;
 12718  0FAC  01CA               	clrf	0+(_start)+01h
 12719  0FAD  1403               	bsf	status,0
 12720  0FAE  0DCA               	rlf	0+(_start)+01h,f
 12721  0FAF  2FB0               	goto	i1l10451
 12722                           	line	93
 12723                           	
 12724  0FB0                     i1l6703:	
 12725                           	line	95
 12726                           	
 12727  0FB0                     i1l10451:	
 12728                           ;main.c: 93: }
 12729                           ;main.c: 95: if (RCIF) { rxfifo[rxiptr]=RCREG; ser_tmp=(rxiptr+1) & (16-1); if (ser_tmp!
                                 =rxoptr) rxiptr=ser_tmp; } if (TXIF && TXIE) { TXREG = txfifo[txoptr]; ++txoptr; txoptr 
                                 &= (16-1); if (txoptr==txiptr) { TXIE = 0; } };
 12730  0FB0  1E8C               	btfss	(101/8),(101)&7
 12731  0FB1  2FB3               	goto	u370_21
 12732  0FB2  2FB4               	goto	u370_20
 12733  0FB3                     u370_21:
 12734  0FB3  2FCE               	goto	i1l10461
 12735  0FB4                     u370_20:
 12736                           	
 12737  0FB4                     i1l10453:	
 12738  0FB4  081A               	movf	(26),w	;volatile
 12739  0FB5  00F2               	movwf	(??_isr1+0)+0
 12740  0FB6  087C               	movf	(_rxiptr),w
 12741  0FB7  3ECE               	addlw	_rxfifo&0ffh
 12742  0FB8  0084               	movwf	fsr0
 12743  0FB9  0872               	movf	(??_isr1+0)+0,w
 12744  0FBA  1383               	bcf	status, 7	;select IRP bank1
 12745  0FBB  0080               	movwf	indf
 12746                           	
 12747  0FBC                     i1l10455:	
 12748  0FBC  087C               	movf	(_rxiptr),w	;volatile
 12749  0FBD  3E01               	addlw	01h
 12750  0FBE  390F               	andlw	0Fh
 12751  0FBF  00F2               	movwf	(??_isr1+0)+0
 12752  0FC0  0872               	movf	(??_isr1+0)+0,w
 12753  0FC1  00D6               	movwf	(_ser_tmp)
 12754                           	
 12755  0FC2                     i1l10457:	
 12756  0FC2  0856               	movf	(_ser_tmp),w
 12757  0FC3  0655               	xorwf	(_rxoptr),w	;volatile
 12758  0FC4  1903               	skipnz
 12759  0FC5  2FC7               	goto	u371_21
 12760  0FC6  2FC8               	goto	u371_20
 12761  0FC7                     u371_21:
 12762  0FC7  2FCE               	goto	i1l10461
 12763  0FC8                     u371_20:
 12764                           	
 12765  0FC8                     i1l10459:	
 12766  0FC8  0856               	movf	(_ser_tmp),w
 12767  0FC9  00F2               	movwf	(??_isr1+0)+0
 12768  0FCA  0872               	movf	(??_isr1+0)+0,w
 12769  0FCB  00FC               	movwf	(_rxiptr)	;volatile
 12770  0FCC  2FCE               	goto	i1l10461
 12771                           	
 12772  0FCD                     i1l6705:	
 12773  0FCD  2FCE               	goto	i1l10461
 12774                           	
 12775  0FCE                     i1l6704:	
 12776                           	
 12777  0FCE                     i1l10461:	
 12778  0FCE  1E0C               	btfss	(100/8),(100)&7
 12779  0FCF  2FD1               	goto	u372_21
 12780  0FD0  2FD2               	goto	u372_20
 12781  0FD1                     u372_21:
 12782  0FD1  2FF4               	goto	i1l6708
 12783  0FD2                     u372_20:
 12784                           	
 12785  0FD2                     i1l10463:	
 12786  0FD2  1683               	bsf	status, 5	;RP0=1, select bank1
 12787  0FD3  1303               	bcf	status, 6	;RP1=0, select bank1
 12788  0FD4  1E0C               	btfss	(1124/8)^080h,(1124)&7
 12789  0FD5  2FD7               	goto	u373_21
 12790  0FD6  2FD8               	goto	u373_20
 12791  0FD7                     u373_21:
 12792  0FD7  2FF4               	goto	i1l6708
 12793  0FD8                     u373_20:
 12794                           	
 12795  0FD8                     i1l10465:	
 12796  0FD8  1283               	bcf	status, 5	;RP0=0, select bank0
 12797  0FD9  1303               	bcf	status, 6	;RP1=0, select bank0
 12798  0FDA  0859               	movf	(_txoptr),w
 12799  0FDB  3EDE               	addlw	_txfifo&0ffh
 12800  0FDC  0084               	movwf	fsr0
 12801  0FDD  1383               	bcf	status, 7	;select IRP bank1
 12802  0FDE  0800               	movf	indf,w
 12803  0FDF  0099               	movwf	(25)	;volatile
 12804                           	
 12805  0FE0                     i1l10467:	
 12806  0FE0  3001               	movlw	(01h)
 12807  0FE1  00F2               	movwf	(??_isr1+0)+0
 12808  0FE2  0872               	movf	(??_isr1+0)+0,w
 12809  0FE3  07D9               	addwf	(_txoptr),f	;volatile
 12810                           	
 12811  0FE4                     i1l10469:	
 12812  0FE4  300F               	movlw	(0Fh)
 12813  0FE5  00F2               	movwf	(??_isr1+0)+0
 12814  0FE6  0872               	movf	(??_isr1+0)+0,w
 12815  0FE7  05D9               	andwf	(_txoptr),f	;volatile
 12816                           	
 12817  0FE8                     i1l10471:	
 12818  0FE8  0859               	movf	(_txoptr),w	;volatile
 12819  0FE9  067D               	xorwf	(_txiptr),w	;volatile
 12820  0FEA  1D03               	skipz
 12821  0FEB  2FED               	goto	u374_21
 12822  0FEC  2FEE               	goto	u374_20
 12823  0FED                     u374_21:
 12824  0FED  2FF4               	goto	i1l6708
 12825  0FEE                     u374_20:
 12826                           	
 12827  0FEE                     i1l10473:	
 12828  0FEE  1683               	bsf	status, 5	;RP0=1, select bank1
 12829  0FEF  1303               	bcf	status, 6	;RP1=0, select bank1
 12830  0FF0  120C               	bcf	(1124/8)^080h,(1124)&7
 12831  0FF1  2FF4               	goto	i1l6708
 12832                           	
 12833  0FF2                     i1l6707:	
 12834  0FF2  2FF4               	goto	i1l6708
 12835                           	
 12836  0FF3                     i1l6706:	
 12837  0FF3  2FF4               	goto	i1l6708
 12838                           	line	96
 12839                           	
 12840  0FF4                     i1l6700:	
 12841                           	line	97
 12842                           	
 12843  0FF4                     i1l6708:	
 12844  0FF4  087B               	movf	(??_isr1+9),w
 12845  0FF5  1283               	bcf	status, 5	;RP0=0, select bank0
 12846  0FF6  00FF               	movwf	btemp+1
 12847  0FF7  087A               	movf	(??_isr1+8),w
 12848  0FF8  008A               	movwf	pclath
 12849  0FF9  0879               	movf	(??_isr1+7),w
 12850  0FFA  0084               	movwf	fsr0
 12851  0FFB  0E78               	swapf	(??_isr1+6)^0FFFFFF80h,w
 12852  0FFC  0083               	movwf	status
 12853  0FFD  0EFE               	swapf	saved_w,f
 12854  0FFE  0E7E               	swapf	saved_w,w
 12855  0FFF  0009               	retfie
 12856                           	opt stack 0
 12857                           GLOBAL	__end_of_isr1
 12858  1000                     	__end_of_isr1:
 12859 ;; =============== function _isr1 ends ============
 12860                           
 12861                           	signat	_isr1,88
 12862                           psect	text1298,local,class=CODE,delta=2
 12863                           global __ptext1298
 12864  0000                     __ptext1298:
 12865                           	global	btemp
 12866  007E                     	btemp set 07Eh
 12867                           
 12868                           	DABS	1,126,2	;btemp
 12869                           	global	wtemp0
 12870  007E                     	wtemp0 set btemp


HI-TECH Software PICC Macro Assembler V9.82 build 9453 
Symbol Table                                                                                   Thu May 30 21:06:40 2013

               __end_of_lookForVictim 0E23             __end_of_lcd_write_control 160B  
           __end_of_updateOrientation 15BF                                     pc 0002  
                                  _GO 00FA                                    _RD 0C60  
                                  _WR 0C61                          ___awdiv@sign 002C  
                                  fsr 0004                   ___wmul@multiplicand 0022  
                    ??_getOrientation 0020                                   l700 1620  
                                 l703 0A59                                   l704 0A59  
                                 l705 0A5E                                   l706 0A8D  
                                 l690 0AD1                                   l691 0AFB  
                                 l692 0AD5                                   l693 0AD9  
                                 l694 0ADD                                   l695 0AE1  
                                 l696 0AE5                                   l689 0AEA  
                                 l697 0B0D                                   _GIE 005F  
                                 _RB0 0030                                   _RE0 0048  
                                 _RE1 0049                                   _RE2 004A  
                        _stepPosition 0057                                   _RX9 00C6  
                                 _TX9 04C6                       ??_getVictimZone 0021  
                                 fsr0 0004                                   indf 0000  
                  drive@highByteSpeed 0028             lcd_write_1_digit_bcd@data 0023  
                     ?_lcd_set_cursor 0072                __end_of_updateLocation 0E8B  
                                l1401 1599                                  l1402 1599  
                                l1410 0B93                                  l1403 159E  
                                l1404 159E                                  l2132 1591  
                                l2141 07FE                                  l2126 160A  
                                l1430 0CB3                                  l1407 1574  
                                l2135 172B                                  l2136 1718  
                                l1424 168D                                  l2129 15E3  
                                l2137 1738                                  l2153 0872  
                                l2138 1738                                  l2900 0F05  
                                l2901 0F12                                  l2910 0F30  
                                l2902 0F06                                  l5070 03B4  
                                l2911 0F21                                  l2903 0F1A  
                                l5071 028D                                  l2920 0F53  
                                l2912 0F26                                  l2904 0F0B  
                                l3632 162C                                  l5072 03B3  
                                l5080 03AF                                  l2921 0F47  
                                l2913 0F31                                  l2905 0F10  
                                l3633 1637                                  l5073 02D4  
                                l3650 16BB                                  l2906 0F7D  
                                l2930 0F6A                                  l2922 0F5B  
                                l2914 0F3D                                  l3642 09C8  
                                l5074 03B2                                  l5066 01FF  
                                l2850 0518                                  l3651 16CE  
                                l2931 0F7F                                  l2923 0F4C  
                                l2915 0F32                                  l2907 0F1B  
                                l3643 09A4                                  l5075 031B  
                                l5067 03B5                                  l2851 0505  
                                l5083 1713                                  l2924 0F51  
                                l2916 0F45                                  l2908 0F28  
                                l3636 16D1                                  l3644 09D7  
                                l5068 03B5                                  l5076 03B1  
                                l2860 0551                                  l2852 0523  
                                l2925 0F5C                                  l2917 0F37  
                                l2909 0F1C                                  l3637 16D0  
                                l3645 09D7                                  l5077 0362  
                                l5069 0246                                  l2861 052A  
                                l2853 050A                                  l2926 0F64  
                                l2918 0F3B                                  l3638 16DA  
                                l4374 15D0                                  l5078 03B0  
                                l5086 09FD                                  l2870 0561  
                                l2862 0531                                  l2854 0510  
                                l2927 0F5D                                  l2919 0F46  
                                l3639 16F0                                  l5079 03A9  
                                l5087 09E5                                  l2871 0569  
                                l2863 0539                                  l2855 0516  
                                l3648 16B3                                  l2928 0F69  
                                l5088 0A04                                  l2856 05E8  
                                l2848 05D7                                  l2880 05A2  
                                l2872 0578                                  l2864 0541  
                                l3649 16B2                                  l2929 0F62  
                                l3673 17AD                                  l5089 0A12  
                                l4377 0D68                                  l2881 05C6  
                                l2873 0579                                  l2865 0552  
                                l2857 0524                                  l2849 0504  
                                l2890 0604                                  l2882 05A3  
                                l2874 0587                                  l2866 057B  
                                l2858 0543                                  l2883 05D4  
                                l2875 0599                                  l2867 0553  
                                l2859 0525                                  l2884 05A9  
                                l2876 0588                                  l2868 0560  
                                l2893 1553                                  l2885 05B1  
                                l2877 05A1                                  l2869 0586  
                                l2886 05C0                                  l2878 058E  
                                l2887 05C1                                  l2879 0597  
                                l2896 1558                                  l2888 05C4  
                                l2889 05D5                                  l2899 0F6C  
                                l5821 04FA                                  l5830 04A1  
                                l5822 03CE                                  l6711 092F  
                                l5831 04F9                                  l5823 0429  
                                l7520 089E                                  l5832 04FF  
                                l5824 040F                                  l6800 012D  
                                l6721 0E22                                  l5833 04FF  
                                l5825 0428                                  l6801 0155  
                                l5842 0847                                  l5818 0966  
                                l6714 1653                                  l6722 0E01  
                                l5826 04A3                                  l6730 07B9  
                                l6810 0174                                  l6802 013D  
                                l6723 0E21                                  l5827 0487  
                                l5851 17FF                                  l6731 07E1  
                                l6811 0184                                  l6803 0154  
                                l5836 1567                                  l6724 0E22  
                                l5828 04A1                                  l6820 166C  
                                l6732 07E7                                  l6740 0BD0  
                                l6812 018A                                  l6804 014D  
                                l5845 1586                                  l7517 0878  
                                l6717 08CB                                  l5829 049F  
                                l6821 166F                                  l6733 07F3  
                                l6741 0BD6                                  l6813 018B  
                                l6805 0153                                  l7518 0882  
                                l5862 0C66                                  l6718 08CB  
                                l6750 0E4F                                  l6822 166F  
                                l5854 0A42                                  l6742 0BD8  
                                l6814 01DD                                  l6806 015C  
                                l5839 156C                                  l7519 0897  
                                l5871 0CE6                                  l6751 0E5A  
                                l6831 0666                                  l5855 0A4E  
                                l6727 078B                                  l6815 01DC  
                                l6807 015D                                  l5880 15BE  
                                l6760 0DC2                                  l5872 0CF3  
                                l6752 0E8A                                  l6832 06B5  
                                l5856 0A4E                                  l6728 0791  
                                l6736 0BA8                                  l6816 01E4  
                                l6808 016D                                  l6825 155D  
                                l6761 0DAD                                  l5873 0D0D  
                                l6745 0E5C                                  l6833 06B4  
                                l5865 1785                                  l6729 07B3  
                                l6737 0BD8                                  l6817 01E4  
                                l6809 0173                                  l6762 0DC1  
                                l6746 0E2A                                  l5890 0762  
                                l6834 06B5                                  l6738 0BBC  
                                l6763 0DBE                                  l6755 0D7B  
                                l5883 17D6                                  l6747 0E6E  
                                l5891 0761                                  l5859 175E  
                                l6739 0BD7                                  l6828 1562  
                                l6756 0DC4                                  l6764 0DC0  
                                l7660 0EC1                                  l5876 0ACC  
                                l5868 0C1F                                  l6748 0E37  
                                l5892 0740                                  l6772 01DF  
                                l6780 009D                                  l6757 0D8C  
                                l6765 0DC4                                  l7661 0EB5  
                                l6749 0E42                                  l5893 0732  
                                l6781 00D6                                  l6773 003E  
                                l6758 0DC3                                  l7662 0EC6  
                                l5894 0750                                  l5886 0711  
                                l6774 01DE                                  l6790 0116  
                                l6782 00AD                                  l5879 15BE  
                                l6759 0D9C                                  l7663 0EC7  
                                l5895 0762                                  l5887 06F0  
                                l6791 00ED                                  l6783 00D5  
                                l6775 0080                                  l7664 0EE0  
                                l6768 16AD                                  l5888 06E2  
                                l6792 0115                                  l6784 00BD  
                                l6776 0090                                  l7665 0EEE  
                                l7657 0E9B                                  l6769 16AD  
                                l5889 0700                                  l6777 018D  
                                l6793 00FD                                  l6785 00D4  
                                l7666 0EF9                                  l7658 0EA9  
                                l6794 0114                                  l6786 00CD  
                                l6778 0097                                  l7667 0F00  
                                l7659 0EEF                                  l6779 01A3  
                                l6795 010D                                  l6787 00D3  
                                l6796 0113                                  l6788 00DC  
                                l6797 011C                                  l6789 00DD  
                                l6798 011D                                  l6799 0156  
                                _CHS0 00FB                                  _CHS1 00FC  
                                _CHS2 00FD                                  STR_1 0828  
                                STR_2 0837                                  STR_3 0806  
                                STR_4 0817                                  _BRGH 04C2  
                                _CREN 00C4                                  u4010 16DA  
                                u4011 16D9                                  u4020 09B0  
                                u4100 0371                        ?_updateMapData 0029  
                                u4005 0A79                                  u4101 0370  
                                u4030 09D6                                  u4110 0A03  
                                u4031 09D5                                  u4111 0A02  
                                u4040 01F6                                  u4120 1737  
                                u4105 036D                                  u4041 01F5  
                                u4121 1736                                  u4050 020E  
                                u4130 0CCE                                  u4210 0558  
                                u4035 09D2                                  u4051 020D  
                                u4131 0CCD                                  u4211 0557  
                                u4060 0255                                  u4140 0CD8  
                                u4220 056F                                  u4300 03F8  
                                u4061 0254                                  u4045 01F2  
                                u4141 0CD7                                  u4205 0C9F  
                                u4221 056E                                  u4301 03F7  
                                u4070 029C                                  u4150 1696  
                                u4230 05B7                                  u4310 0413  
                                u4071 029B                                  u4055 020A  
                                u4151 1695                                  u4231 05B6  
           updateMapData@completeData 0031                                  u3520 16BB  
                                u4080 02E3                                  u4160 169C  
                                u4240 08AB                                  u4320 0445  
                                u4400 074F                                  u3521 16BA  
                                u4081 02E2                                  u4065 0251  
                                u4161 169B                                  u4241 08AA  
                                u4321 0444                                  u4401 074E  
                                u3450 159D                                  u4090 032A  
                                u4250 08B7                                  u4330 0478  
                                u4410 1668                                  u3451 159C  
                                u4091 0329                                  u4075 0298  
                                u4251 08B6                                  u4331 0477  
                                u4411 1667                                  u3620 15BB  
                                u4260 0DE1                                  u4340 048F  
                                u4420 061F                                  u4500 07A7  
                                u3621 15BA                                  u4085 02DF  
                                u4261 0DE0                                  u4341 048E  
                                u4405 074B                                  u4421 061E  
                                u4501 07A5                                  u3550 1627  
                                u3630 1581                                  u4270 0DE7  
                                u4350 04E5                                  u4430 062E  
                                u3551 1626                                  u3631 1580  
                                u4095 0326                                  u4175 0C78  
                                u4271 0DE6                                  u4351 04E4  
                                u4415 1664                                  u4431 062D  
                                u3560 1632                                  u3800 0D97  
                                u4280 0DEB                                  u4360 04FE  
                                u4440 0675                                  u4520 07AC  
                                u4600 0BC0                                  u3561 1631  
                                u3801 0D96                                  u4185 0C85  
                                u4281 0DEA                                  u4361 04FD  
                                u4441 0674                                  u4425 061B  
                                u4521 07AB                                  u4601 0BBF  
                                u3810 0DA2                                  u4290 03DD  
                                u4370 06D0                                  u4450 0A2C  
                                u4530 07CF                                  u4514 07A8  
                                u4610 0BCA                                  u3811 0DA1  
                                u4195 0C92                                  u4355 04E1  
                                u4291 03DC                                  u4371 06CF  
                                u4435 062A                                  u4451 0A2B  
                                u4531 07CD                                  u4611 0BC9  
                                _PEIE 005E                                  u3820 0DA8  
                                u3900 0E9F                                  u4380 06FF  
                                u4460 0A36                                  u4700 00E1  
                                u4620 0045                                  u3821 0DA7  
                                u3901 0E9E                                  u4381 06FE  
                                u4445 0671                                  u4461 0A35  
                                u4701 00E0                                  u3830 0DB3  
                                u3750 0D71                                  u3910 0EB1  
                                u4390 0720                                  u4550 07D4  
                                u4470 077F                                  u4710 00E7  
                                u4630 0049                                  u3831 0DB2  
                                u3751 0D70                                  u3911 0EB0  
                                u4295 03D9                                  u4391 071F  
                                u4375 06CC                                  u4551 07D3  
                                u4471 077D                                  u4711 00E6  
                                u4631 0048                                  u3840 0DB9  
                                u3760 0D77                                  u4544 07D0  
                                u4560 0B98                                  u4800 01B2  
                                u4720 00F7                                  u4640 0062  
                                u3841 0DB8                                  u3761 0D76  
                                u4385 06FB                                  u4561 0B97  
                                u4801 01B1                                  u4721 00F6  
                                u4641 0061                                  u3770 0D81  
                                u3850 087C                                  u3930 0EC5  
                                u4490 0784                                  u4570 0BA2  
                                u4810 01D6                                  u4730 0107  
                                u4650 008A                                  u3771 0D80  
                                u3851 087B                                  u3931 0EC4  
                                u4395 071C                                  u4491 0783  
                                u4571 0BA1                                  u4811 01D5  
                                u4731 0106                                  u4651 0089  
                                _RCIE 0465                                  u3780 0D87  
                                u4484 0780                                  u4580 0BAC  
                                u4820 01E3                                  u4740 0121  
                                u4660 00A1                                  _RCIF 0065  
                                u3781 0D86                                  u3925 0EB6  
                                u4581 0BAB                                  u4821 01E2  
                                u4741 0120                                  u4661 00A0  
                                u3790 0D92                                  u3950 0ED8  
                                u4590 0BB6                                  u4750 0127  
                                u4670 00A7                                  u3791 0D91  
                                u3951 0ED7                                  u4591 0BB5  
                                u4751 0126                                  u4671 00A6  
                                u3880 0896                                  u4760 0137  
                                u4680 00B7                                  u3881 0895  
                                u3865 0883                                  u3945 0EC8  
                                u4761 0136                                  u4681 00B6  
                                u3970 0EED                                  u3890 0E92  
                                u4770 0147                                  u4690 00C7  
                                u3875 088A                                  u3971 0EEC  
                                u3955 0ED4                                  u3891 0E91  
                                u4907 0AFD                                  u4771 0146  
                                u4691 00C6                                  u3980 0EF3  
                                u4780 0167                                  u3965 0EE1  
                                u4917 1640                                  u4837 065E  
                                u4781 0166                                  u3990 0A5D  
                                u4790 017E                                  u3991 0A5C  
                                u4927 17B7                                  u4847 06AC  
                                u4791 017D                                  u4937 0939  
                                u4857 0C60                                  _OERR 00C1  
                                u4947 09F0                                  u4867 0C09  
                                u4957 0A0B                                  u4877 0C18  
                                u4967 15DF                                  u4887 0D06  
                                u4977 1605                                  u4897 0AC5  
                                u4987 0B59                                  u4997 161E  
                                _TMR0 0001                                  _SPEN 00C7  
                                _TXIE 0464                                  _WREN 0C62  
                                _TXEN 04C5                                  _TXIF 0064  
                                _SYNC 04C4                __end_of_lcd_write_data 15E4  
                                _beep 0062                                  _isr1 0F80  
                                _main 0015                                  _home 0386  
                                _init 08FA                                  _node 0054  
                 drive@highByteRadius 0023                                  btemp 007E  
                                start 0012                ??_findFinalDestination 0026  
                     rotateIR@stepNum 0025                           _writeEEPROM 0B50  
               _lcd_write_1_digit_bcd 07F4                     ?_driveForDistance 002C  
                         _turnRight90 0A8E                                 l11001 0E3B  
                               l11011 0E5B                                 l11003 0E42  
                               l10301 0F64                                 l11005 0E48  
                               l11013 0E5C                                 l11021 03BD  
                               l11101 0711                                 l10231 16BC  
                               l10303 0F6B                                 l10311 1621  
                               l10151 1583                                 l11007 0E4F  
                               l11015 0E6E                                 l11031 03F8  
                               l11023 03CC                                 l11111 075B  
                               l11103 0720                                 l10161 1573  
                               l10233 16C4                                 l10305 0F6C  
                               l10321 1632                                 l10313 1627  
                               l10401 1563                                 l10153 1585  
                               l11009 0E53                                 l11033 040F  
                               l11041 0429                                 l11025 03CE  
                               l11017 03B6                                 l11105 0732  
                               l11121 166C                                 l11113 1654  
                               l11201 07C5                                 l10155 1595  
                               l10235 16CA                                 l10227 16B1  
                               l10307 0F7D                                 l10147 1634  
                               l10323 1634                                 l10315 1629  
                               l10403 1567                                 l10411 1581  
                               l11051 046B                                 l11043 042F  
                               l11035 0413                                 l11027 03DD  
                               l11019 03BC                                 l11107 0740  
                               l11123 166E                                 l11115 1668  
                               l11131 062E                                 l11203 07D0  
                               l11211 0B94                                 l10157 1596  
                               l10237 16CD                                 l10229 16B3  
                               l10261 1558                                 l10309 0F7F  
                               l10325 1637                                 l10149 1636  
                               l10317 162B                                 l10405 1568  
                               l10413 1583                                 l10501 0DB3  
                               l11061 0487                                 l11053 0470  
                               l11045 0435                                 l11037 0421  
                               l11029 03F3                                 l11109 0750  
                               l11117 166A                                 l11133 0656  
                               l11125 0605                                 l11141 17D7  
                               l11205 07D4                                 l11221 0BC0  
                               l11213 0B98                                 l11301 0137  
                               l10159 156D                                 l10255 154F  
                               l10271 0F12                                 l10263 0F04  
                               l10319 162C                                 l10407 156C  
                               l10415 1586                                 l10503 0DB9  
                               l10511 0889                                 l11071 04C3  
                               l11063 048F                                 l11055 0478  
                               l11047 043F                                 l11039 0426  
                               l11119 166B                                 l11135 0666  
                               l11127 0612                                 l11143 17E3  
                               l11151 0A13                                 l11207 07DA  
                               l11223 0BCA                                 l11215 0BA2  
                               l11311 015D                                 l11303 013D  
                               l11231 002B                                 l10257 1553  
                               l10281 0F32                                 l10273 0F1C  
                               l10265 0F06                                 l10361 1789  
                               l10409 157D                                 l10513 0897  
                               l10505 0873                                 l10521 0E9B  
                               l10601 1600                                 l11081 04F1  
                               l11073 04D1                                 l11065 0493  
                               l11057 047B                                 l11049 0445  
                               l11137 0675                                 l11129 061F  
                               l11145 17E8                                 l11161 0A42  
                               l11153 0A1F                                 l11209 07E1  
                               l11225 0BD0                                 l11217 0BAC  
                               l11321 0184                                 l11313 0167  
                               l11305 0147                                 l11241 0053  
                               l11233 0037                                 l10259 1554  
                               l10291 0F4C                                 l10283 0F37  
                               l10275 0F21                                 l10267 0F0B  
                               l10371 1798                                 l10363 1791  
                               l10515 089E                                 l10507 0878  
                               l10531 0EB1                                 l10523 0E9F  
                               l10603 15D4                                 l10611 16CF  
                               l11083 04F2                                 l11075 04D7  
                               l11067 0498                                 l11059 0480  
                               l11091 06D0                                 l11139 06A4  
                               l11147 17EE                                 l11155 0A22  
                               l11171 1755                                 l11163 1739  
                               l11219 0BB6                                 l11331 01B2  
                               l11323 018C                                 l11315 016D  
                               l11307 014D                                 l11251 0073  
                               l11243 0058                                 l11235 003F  
                               l11227 0015                                 l10293 0F52  
                               l10285 0F3C                                 l10277 0F27  
                               l10269 0F11                                 l10381 17A3  
                               l10373 179B                                 l10365 1792  
                               l10509 087C                                 l10541 0ED8  
                               l10533 0EB5                                 l10525 0EA4  
                               l10517 0E8B                                 l10605 15D7  
                               l10621 16ED                                 l10613 16D1  
                               l10701 09E6                                 l11077 04E5  
                               l11069 04A3                                 l11085 04FA  
                               l11093 06E2                                 l11149 17F9  
                               l11157 0A2C                                 l11165 1745  
                               l11181 177C                                 l11173 175F  
                               l11333 01C8                                 l11317 0174  
                               l11309 0156                                 l11261 0097  
                               l11325 018D                                 l11253 0080  
                               l11245 005E                                 l11237 0045  
                               l11341 01DF                                 l11229 0025  
                               l10295 0F53                                 l10287 0F3D  
                               l10279 0F28                                 l10383 17A4  
                               l10375 179E                                 l10367 1794  
                               l10359 1786                                 l10391 155E  
                               l10551 0EF3                                 l10543 0EDE  
                               l10535 0EBC                                 l10527 0EA9  
                               l10519 0E92                                 l10607 15D9  
                               l10623 16EE                                 l10615 16DB  
                               l10631 09BF                                 l10703 09EA  
                               l10711 0933                                 l11079 04F0  
                               l11095 06F0                                 l11087 06B6  
                               l11159 0A36                                 l11167 174A  
                               l11175 176B                                 l11191 078B  
                               l11183 0763                                 l11335 01CD  
                               l11319 017E                                 l11271 00BD  
                               l11263 00A1                                 l11327 01A3  
                               l11255 0086                                 l11247 0062  
                               l11239 0049                                 l10297 0F5D  
                               l10289 0F47                                 l10377 179F  
                               l10369 1795                                 l10385 0846  
                               l10393 1562                                 l10481 0D7B  
                               l10553 0EF9                                 l10545 0EE0  
                               l10537 0EC1                                 l10529 0EAB  
                               l10561 0A5E                                 l10609 15DA  
                               l10625 16F0                                 l10617 16E5  
                               l10633 09C8                                 l10641 01FD  
                               l10705 09F7                                 l10721 095E  
                               l10713 0940                                 l10801 0CC4  
                               l11097 0700                                 l11089 06C3  
                               l11169 1750                                 l11177 1770  
                               l11193 079D                                 l11185 0775  
                               l11337 01D2                                 l11329 01A9  
                               l11281 00E7                                 l11273 00C7  
                               l11265 00A7                                 l11257 008A  
                               l11249 006E                    ??_driveForDistance 002E  
                               l10299 0F63                                 l10379 17A2  
                               l10387 1559                                 l10395 15B1  
                               l10491 0D97                                 l10483 0D81  
                               l10475 0D69                                 l10555 0F00  
                               l10547 0EE7                                 l10539 0EC7  
                               l10563 0A86                                 l10571 1612  
                               l10619 16E9                                 l10627 099F  
                               l10635 15C2                                 l10651 0245  
                               l10643 01FE                                 l10707 0A04  
                               l10715 0946                                 l10723 17B1  
                               l10731 1638                                 l10803 0CCE  
                               l10811 0BD9                                 l11099 070B  
                               l11179 1776                                 l11195 07A8  
                               l11187 0780                                 l11339 01D6  
                               l11291 010D                                 l11283 00ED  
                               l11275 00CD                                 l11267 00AD  
                               l11259 0090                                 l10389 155D  
                               l10397 15B5                                 l10493 0D9C  
                               l10485 0D87                                 l10477 0D71  
                               l10549 0EEF                                 l10565 0A8D  
                               l10557 0A4F                                 l10573 1616  
                               l10581 0B65                                 l10629 09A4  
                               l10661 028D                                 l10653 0246  
                               l10645 01FF                                 l10637 01E7  
                               l10709 0A05                                 l10717 094E  
                               l10725 17BE                                 l10733 1647  
                               l10741 0AE8                                 l10805 0CD8  
                               l10813 0C01                                 l10821 169C  
                               l10901 05C5                                 l11197 07AC  
                               l11189 0784                                 l11285 00F7  
                               l11293 0116                                 l11269 00B7  
                               l11277 00D6                                 l10399 15BB  
                               l10495 0DA2                                 l10487 0D8C  
                               l10479 0D77                                 l10559 0A55  
                               l10575 161A                                 l10567 160B  
                               l10591 0B86                                 l10583 0B6B  
                               l10671 02E3                                 l10663 029C  
                               l10655 0255                                 l10647 020E  
                               l10639 01F6                                 l10719 0956  
                               l10727 17C6                                 l10735 164D  
                               l10751 0B0D                                 l10743 0AE9  
                               l10807 0CE6                                 l10815 0C10  
                               l10823 16AB                                 l10903 05C6  
                               l10831 0503                                 l10911 16F1  
                               l11199 07B3                                 l11295 0121  
                               l11287 00FD                                 l11279 00E1  
                               l10497 0DA8                                 l10489 0D92  
                               l10569 160E                                 l10593 0B8E  
                               l10585 0B70                                 l10577 0B53  
                               l10681 0360                                 l10673 0319  
                               l10665 02D2                                 l10657 028B  
                               l10649 0244                                 l10729 17CE  
                               l10745 0AEA                                 l10737 0AD0  
                               l10753 1717                                 l10761 1673  
                               l10809 0CFE                                 l10817 168E  
                               l10825 0C6A                                 l10905 05D6  
                               l10833 0506                                 l10841 0518  
                               l10913 170C                                 l10921 0C3D  
                               l11297 0127                                 l11289 0107  
                               l10499 0DAD                                 l10587 0B76  
                               l10579 0B60                                 l10595 15FA  
                               l10691 03A8                                 l10683 0361  
                               l10675 031A                                 l10667 02D3  
                               l10659 028C                                 l10739 0AE5  
                               l10747 0AFB                                 l10755 1718  
                               l10763 167F                                 l10771 07F7  
                               l10819 1696                                 l10827 0C6B  
                               l10851 0534                                 l10843 0525  
                               l10835 050B                                 l10907 05D7  
                               l10915 1713                                 l10923 0C4D  
                               l10931 0900                                 l11299 012D  
                               l10589 0B7E                                 l10597 15FD  
                               l10693 03A9                                 l10685 0362  
                               l10677 031B                                 l10669 02D4  
                               l10749 0AFF                                 l10757 1724  
                               l10765 1685                                 l10781 0853  
                               l10773 0848                                 l10829 0CAD  
                               l10861 0553                                 l10853 0539  
                               l10845 0528                                 l10837 0511  
                               l10909 05E8                                 l10925 0C58  
                               l10917 0C20                                 l10941 0911  
                               l10933 0905                                 l10599 15FF  
                               l10695 03AE                                 l10687 0371  
                               l10679 032A                                 l10759 172B  
                               l10767 158A                                 l10791 086C  
                               l10783 0854                                 l10775 084C  
                               l10871 0569                                 l10863 0558  
                               l10855 053C                                 l10847 052A  
                               l10839 0517                                 l10919 0C2C  
                               l10951 091F                                 l10943 0913  
                               l10935 090A                                 l10927 08FA  
                               l10689 03A7                                 l10697 09DB  
                               l10769 158B                                 l10785 085A  
                               l10777 084F                                 l10793 0D0E  
                               l10881 058C                                 l10873 056F  
                               l10865 055C                                 l10857 0542  
                               l10849 0531                                 l10953 0920  
                               l10945 0917                                 l10937 090E  
                               l10929 08FD                                 l10961 08AB  
                               l10699 09DF                                 l10787 0860  
                               l10779 0850                                 l10795 0A8E  
                               l10891 05A7                                 l10883 058E  
                               l10875 057A                                 l10867 0561  
                               l10859 0543                                 l10955 0925  
                               l10947 091B                                 l10939 0910  
                               l10963 08B7                                 l10971 0DC5  
                               l10789 0866                                 l10797 0ABD  
                               l10893 05A9                                 l10885 0598  
                               l10869 0565                                 l10877 057B  
                               l10957 092A                                 l10949 091E  
                               l10965 08BD                                 l10981 0DF1  
                               l10973 0DDB                                 l10799 0CB4  
                               l10895 05AD                                 l10879 0588  
                               l10887 0599                                 l10967 08BE  
                               l10959 089F                                 l10991 0E18  
                               l10983 0DF4                                 l10975 0DE1  
                               l10897 05B1                                 l10889 05A3  
                               l10969 08C4                                 l10985 0DFA  
                               l10977 0DE7                                 l10993 0E23  
                               l10899 05B7                                 l10979 0DEB  
                               l10987 0E01                                 l10995 0E2A  
                               l10989 0E12                                 l10997 0E30  
                               l10999 0E37                                 ?_isr1 0072  
                               ?_main 0072                                 ?_init 0072  
                     __end_of___awdiv 0F01                  __size_of_checkIfHome 0020  
                               _EEADR 010D                                 _CARRY 0018  
                     ___awdiv@divisor 0026                       ___awdiv@counter 002B  
                               _RCREG 001A                                 _SPBRG 0099  
                               _PORTA 0005                                 _PORTC 0007  
                               _PORTD 0008                                 _PORTE 0009  
                               _TRISA 0085                                 _TRISB 0086  
                               _TRISC 0087                                 _TRISD 0088  
                               _TRISE 0089                                 _SSPIF 0063  
       __size_of_getSomethingInTheWay 0005                                 _TXREG 0019  
              lcd_write_data@databyte 0022                       __end_of_goRight 1786  
findFinalDestination@robotOrientation 0025                    _getSuccessfulDrive 157D  
                     __end_of_convert 03B6                                 _drive 0930  
                     ?_updateLocation 0072                                 _ready 0389  
               __size_of_writeSPIByte 000D                                 _start 0049  
                      __pbitbssCOMMON 0380                       __end_of_waitFor 17D7  
                               pclath 000A                   ?_getSuccessfulDrive 0072  
                     ?_lcd_write_data 0072                     ?_adc_read_channel 003B  
                     _successfulDrive 038B                                 status 0003  
                               wtemp0 007E                     ?_frontWallCorrect 0072  
                  ??_adc_read_channel 003D                  __end_of_goToNextCell 0BD9  
                  ??_frontWallCorrect 0043                        _initEEPROMMode 156D  
          __size_of_lcd_write_control 0014                          __end_of_isr1 1000  
                        __end_of_main 01E7                          __end_of_init 0930  
          __size_of_updateOrientation 0011                  ??_getSuccessfulDrive 0020  
                              ??_isr1 0072                                ??_main 0048  
                              ??_init 002B                          _writeSPIByte 1592  
                __size_of_getCurrentX 0005                  __size_of_getCurrentY 0005  
                     ??_updateMapData 002E                   writeEEPROM@addressH 0021  
                 writeEEPROM@addressL 0022                                _ADCON0 001F  
                              _ADCON1 009F                                ?_drive 0022  
                              _ADRESH 001E                                _ADRESL 009E  
                              _EEDATA 010C                                _EECON1 018C  
                              _EECON2 018D      findFinalDestination@virtualWallX 0027  
    findFinalDestination@virtualWallY 0024                      ___awdiv@dividend 0028  
                    __end_of_adc_read 0A8E                                i1l6700 0FF4  
                              i1l6701 0FAB                                i1l6702 0FAA  
                              i1l6703 0FB0                                i1l6704 0FCE  
                              i1l6705 0FCD                                i1l6706 0FF3  
                              i1l6707 0FF2                                i1l6708 0FF4  
                        _addressCount 0050                                u370_20 0FB4  
                              u370_21 0FB3                                u371_20 0FC8  
                              u371_21 0FC7                                u372_20 0FD2  
                              u372_21 0FD1                                u373_20 0FD8  
                              u373_21 0FD7                                u374_20 0FEE  
                              u374_21 0FED                                u367_20 0F84  
                              u367_21 0F83                                u368_20 0F8B  
                              u368_21 0F8A                                u369_20 0FA5  
                              u369_21 0FA4                                _TMR0IE 005D  
                              _TMR0IF 005A                                _SSPCON 0014  
                              _SSPBUF 0013                      convert@adc_value 0037  
                   rotateIR@direction 0020                __end_of_initEEPROMMode 1575  
                    writeSPIByte@data 0020                ?_lcd_write_1_digit_bcd 0072  
                    __end_of_findWall 1670                      __end_of_lcd_init 0873  
                              ___wmul 0873                             ??___awdiv 002A  
                              _goLeft 1739                                _finalX 005D  
                              _finalY 005E                                _xCoord 0060  
                              _yCoord 0061                                _readIR 16F1  
                    __end_of_init_adc 1621                      ___awdiv@quotient 002D  
            __end_of_lcd_write_string 1739                                _moving 0388  
                           ??_goRight 0038                                _rxfifo 00CE  
                              clrloop 1576                                _txfifo 00DE  
                              _rxiptr 007C            frontWallCorrect@distToWall 0045  
                              _rxoptr 0055                                _txiptr 007D  
                           ??_convert 0039                                _txoptr 0059  
                    __end_of_ser_init 17AE                      __end_of_ser_isrx 1638  
                              saved_w 007E                             ??_waitFor 0024  
                    __end_of_rotateIR 0A13                     lcd_write_string@s 0024  
        __end_of_clearSuccessfulDrive 0848                            _addNewData 1670  
                     ?_initEEPROMMode 0072                       writeEEPROM@data 0026  
               play_iCreate_song@song 0022                         rotateIR@steps 0024  
                      __pcstackCOMMON 0072                          __pidataBANK0 159F  
                        __pidataBANK1 08CC                          __pidataBANK3 0967  
                       __end_of_drive 0967                     _play_iCreate_song 15BF  
                  __size_of_goForward 003C                    __size_of_getFinalX 0005  
                  __size_of_getFinalY 0005                      ??_lcd_set_cursor 0023  
                  __size_of_goReverse 0047                    ?_play_iCreate_song 0072  
                  __size_of_findWalls 0091                            _goBackward 17D7  
                             ??_drive 0025                   ??_play_iCreate_song 0022  
                          __pbssBANK0 0049                            __pbssBANK1 00CE  
               __size_of_goToNextCell 0045                    __size_of_initSongs 005B  
                   drive@lowByteSpeed 0022                            __pmaintext 0015  
                        ?_writeEEPROM 0021                               ?___wmul 0020  
                             ?_goLeft 0072                            __pintentry 0004  
           __end_of_play_iCreate_song 15D1                               ?_readIR 003F  
                        ?_turnRight90 0072                            __ptext1240 1739  
                          __ptext1241 0A13                            __ptext1250 08FA  
                          __ptext1242 17D7                            __ptext1251 0C20  
                          __ptext1243 0605                            __ptext1260 0848  
                          __ptext1252 16F1                            __ptext1244 1654  
                          __ptext1261 07F4                            __ptext1253 0500  
                          __ptext1245 06B6                            __ptext1237 0B94  
                          __ptext1270 01E7                            __ptext1262 1587  
                          __ptext1254 0C67                            __ptext1246 03B6  
                          __ptext1238 0763                            __ptext1271 15BF  
                          __ptext1263 1670                            __ptext1255 168E  
                          __ptext1247 0E23                            __ptext1239 175F  
                          __ptext1280 0873                            __ptext1272 099F  
                          __ptext1264 1714                            __ptext1256 0BD9  
                          __ptext1248 0DC5                            __ptext1281 0D69  
                          __ptext1273 16CF                            __ptext1265 0ACD  
                          __ptext1257 0CB4                            __ptext1249 089F  
                          __ptext1290 1621                            __ptext1282 157D  
                          __ptext1274 15D1                            __ptext1266 1638  
                          __ptext1258 0A8E                            __ptext1291 0F01  
                          __ptext1283 1568                            __ptext1275 15F7  
                          __ptext1267 17AE                            __ptext1259 0D0E  
                          __ptext1292 1554                            __ptext1284 1563  
                          __ptext1276 0B50                            __ptext1268 0930  
                          __ptext1293 154F                            __ptext1285 15AE  
                          __ptext1277 160B                            __ptext1269 09D8  
                          __ptext1294 16AE                            __ptext1286 155E  
                          __ptext1278 0A4F                            __ptext1295 156D  
                          __ptext1287 1559                            __ptext1279 0E8B  
                          __ptext1296 1592                            __ptext1288 0846  
                          __ptext1297 0F80                            __ptext1289 1786  
                          __ptext1298 0000                    __size_of_ser_getch 0022  
                           ?_adc_read 002F                    __size_of_ser_putch 0021  
            _checkForFinalDestination 089F                               i1l10441 0F8B  
                             i1l10433 0F80                      ??_updateLocation 0024  
                             i1l10451 0FB0                               i1l10443 0F8F  
                             i1l10435 0F84                               i1l10453 0FB4  
                             i1l10461 0FCE                               i1l10445 0FA5  
                             i1l10437 0F85                               i1l10471 0FE8  
                             i1l10463 0FD2                               i1l10455 0FBC  
                             i1l10447 0FA8                               i1l10439 0F87  
                             i1l10473 0FEE                               i1l10465 0FD8  
                             i1l10457 0FC2                               i1l10449 0FAC  
                             i1l10467 0FE0                               i1l10459 0FC8  
                             i1l10469 0FE4                 __end_of_getVictimZone 0F80  
                        _goToNextCell 0B94                      ??_lcd_write_data 0020  
                           ?_findWall 0072             __size_of_driveForDistance 014A  
                      waitFor@lowByte 0023                __size_of_lookForVictim 005E  
                           ?_lcd_init 0072                               _SSPSTAT 0094  
                           ?_init_adc 0072                           ?_addNewData 0072  
                   __end_of_goForward 0A4F                     __end_of_getFinalX 1554  
                   __end_of_getFinalY 1559          __end_of_getSomethingInTheWay 156D  
                   __end_of_goReverse 0C67                            _initIRobot 1638  
                   __end_of_findWalls 07F4                             ?_ser_init 0072  
                           ?_ser_isrx 0072         __size_of_findFinalDestination 0105  
                             ___awdiv 0E8B                             ?_rotateIR 0020  
                     __size_of___wmul 002C                         ??_checkIfHome 0029  
                     __size_of_goLeft 0026                       __size_of_readIR 0023  
           __size_of_adc_read_channel 0041                               _goRight 175F  
                          ??_adc_read 0031             __size_of_frontWallCorrect 00AD  
                             _convert 01E7                           waitFor@type 0027  
                _clearSuccessfulDrive 0846                     __end_of_initSongs 0D69  
        driveForDistance@moveDistance 002C                               _waitFor 17AE  
                             _ser_tmp 0056                               _vicZone 005A  
                         ?_goBackward 0072                               _wayWent 005C  
                 driveForDistance@low 0035                           ser_putArr@i 0029  
                          ??_findWall 0043               __size_of_getOrientation 0005  
                          ??_lcd_init 0023                  end_of_initialization 0B4C  
                   __end_of_ser_getch 16F1                               init_ram 15E8  
                      _superMarioBros 00A0                            ??_init_adc 0020  
             ??_lcd_write_1_digit_bcd 0023                     __end_of_ser_putch 16CF  
                          _wallFollow 0605                            ??_ser_init 0020  
                          ??_ser_isrx 0020                            _ser_putArr 099F  
                       _lookForVictim 0DC5                            ??_rotateIR 0021  
          __size_of_play_iCreate_song 0012           __size_of_getSuccessfulDrive 000A  
                   ?_lcd_write_string 0072                         ??_getCurrentX 0020  
                       ??_getCurrentY 0020                 ?_clearSuccessfulDrive 0072  
                 __size_of_addNewData 001E                            _victimZone 005B  
                  ??_lcd_write_string 0023                   __end_of_checkIfHome 16AE  
                   adc_read@adc_value 0035                            _updateNode 0D69  
               __end_of_updateMapData 0CB4                      ??_initEEPROMMode 0020  
                         ?_initIRobot 0072                            _turnLeft90 0CB4  
                      ?_lookForVictim 0072                            _turnAround 0BD9  
                 __size_of_goBackward 0029                  __size_of_writeEEPROM 0044  
                      __end_of___wmul 089F                        __end_of_goLeft 175F  
                      __end_of_readIR 1714                  __size_of_turnRight90 003F  
                _getSomethingInTheWay 1568                   start_initialization 0B0E  
                 __end_of_getCurrentX 155E                   __end_of_getCurrentY 1563  
                    _driveForDistance 03B6           driveForDistance@virtualWall 0036  
               lcd_set_cursor@address 0023                           ?_wallFollow 0072  
                         ?_ser_putArr 0022            ??_checkForFinalDestination 0024  
                      _RTC_FLAG_500MS 0382                              ??___wmul 0024  
                            ??_goLeft 0038                           __pdataBANK0 005D  
                         __pdataBANK1 00A0                           __pdataBANK3 0190  
                         _checkIfHome 168E                              ??_readIR 0041  
                    _adc_read_channel 0ACD                ??_clearSuccessfulDrive 0020  
                    _frontWallCorrect 06B6                 ?_getSomethingInTheWay 0072  
                   __size_of_adc_read 003F                           __pbssCOMMON 007C  
                         ?_updateNode 0072                         __pcstackBANK0 0020  
                 __size_of_initIRobot 001C                        _getOrientation 1563  
                   _somethingInTheWay 005F                     __size_of_findWall 001C  
                   __size_of_lcd_init 002B                    drive@lowByteRadius 0024  
                        ??_addNewData 0027                        addNewData@data 0028  
                           _champions 00B9                     __size_of_init_adc 0016  
                     ??_lookForVictim 0024                             _goForward 0A13  
                         ?_turnLeft90 0072                             _getFinalX 154F  
                           _getFinalY 1554                           ?_turnAround 0072  
                            ?___awdiv 0026                             _goReverse 0C20  
                   __size_of_ser_init 0028                     __size_of_ser_isrx 0017  
                           _findWalls 0763                             __pstrings 0800  
                   __size_of_rotateIR 003B                              ?_goRight 0072  
                         _getCurrentX 1559                         ?_writeSPIByte 0072  
                         _getCurrentY 155E                              ?_convert 0037  
                      _finalCountdown 01AD                    __end_of_addNewData 168E  
                           _goingHome 0385              wallFollow@distanceToWall 0046  
              __end_of_getOrientation 1568          __end_of_findFinalDestination 0605  
                            ?_waitFor 0022                          ??_goBackward 0038  
                 __size_of_wallFollow 00B1                            ser_getch@c 0021  
                           _initSongs 0D0E                   __size_of_ser_putArr 0039  
                      __size_of_drive 0037                             _frontWall 0384  
             __size_of_lcd_set_cursor 000B                     interrupt_function 0004  
                      ___wmul@product 0024                            ser_putch@c 0021  
      __size_of_lcd_write_1_digit_bcd 000B         __end_of_lcd_write_1_digit_bcd 07FF  
                     waitFor@highByte 0022                             _rightWall 038A  
                      _addressCurrent 0051                             _ser_getch 16CF  
                          ?_goForward 0072                             _ser_putch 16AE  
                          ?_getFinalX 0072                            ?_getFinalY 0072  
                 __size_of_updateNode 005C                __size_of_getVictimZone 007F  
                          ?_goReverse 0072                     updateMapData@move 002D  
                  __end_of_goBackward 1800                            ?_findWalls 0072  
               driveForDistance@cliff 0037                        ??_writeSPIByte 0020  
                         __stringbase 0805                ??_getSomethingInTheWay 0020  
                   ___wmul@multiplier 0020                       ?_getOrientation 0072  
                          ?_initSongs 0072                   __size_of_turnLeft90 005A  
                 __size_of_turnAround 0047               __size_of_updateLocation 0068  
           __size_of_lcd_write_string 0025                   lookForVictim@victim 0026  
                        ??_initIRobot 0022               __size_of_lcd_write_data 0013  
                          ?_ser_getch 0072      __end_of_checkForFinalDestination 08CC  
                        _lookingForU2 0190                            ?_ser_putch 0072  
             adc_read_channel@channel 003E                         _RTC_FLAG_10MS 0380  
                       _RTC_FLAG_50MS 0383                             init_fetch 15E4  
            __end_of_driveForDistance 0500            __end_of_getSuccessfulDrive 1587  
                    __size_of___awdiv 0076                    _currentOrientation 0052  
                getVictimZone@victimX 0022                  getVictimZone@victimY 0020  
                            _adc_read 0A4F                      __size_of_goRight 0027  
                    __size_of_convert 01CF                    __end_of_initIRobot 1654  
                       _getVictimZone 0F01                      __size_of_waitFor 0029  
                            _findWall 1654                              _lcd_init 0848  
                            _leftWall 0387              __end_of_adc_read_channel 0B0E  
           lcd_write_control@databyte 0022                              _lastMove 0053  
                            _init_adc 160B                         __size_of_isr1 0080  
                       __size_of_main 01D2                         __size_of_init 0036  
            __end_of_frontWallCorrect 0763                              _longbeep 0067  
                        ??_wallFollow 0043                              clear_ram 1575  
                       ??_writeEEPROM 0023                              _ser_init 1786  
                         ??_goForward 0038                          ??_ser_putArr 0026  
                            _ser_isrx 1621                           ??_getFinalX 0020  
                         ??_getFinalY 0020                  _findFinalDestination 0500  
                driveForDistance@high 0034                           ??_goReverse 0029  
                            _rotateIR 09D8                           ??_findWalls 0043  
                        ?_checkIfHome 0072                         ??_turnRight90 0029  
               updateMapData@virtualE 002A                 updateMapData@virtualN 002B  
               updateMapData@virtualS 0029                 updateMapData@virtualW 0030  
              __size_of_updateMapData 004D                              readIR@cm 0041  
                        ??_updateNode 0020                         ?_goToNextCell 0072  
                      ?_getVictimZone 0020         driveForDistance@deltaDistance 0030  
                        _RTC_FLAG_1MS 0381                           ??_initSongs 002B  
                  __end_of_wallFollow 06B6                    __end_of_ser_putArr 09D8  
                            intlevel1 0000                        _lcd_set_cursor 1587  
                __end_of_writeSPIByte 159F                             stringcode 0800  
                         ??_ser_getch 0020                          ??_turnLeft90 0029  
               ?_findFinalDestination 0024                           ??_ser_putch 0020  
                        ??_turnAround 0029                  _stepsToPerpendicular 0058  
             __size_of_initEEPROMMode 0008                    __end_of_updateNode 0DC5  
                   _lcd_write_control 15F7                     _updateOrientation 15AE  
                 __end_of_writeEEPROM 0B94                    ?_lcd_write_control 0072  
              updateOrientation@moved 0021                          ?_getCurrentX 0072  
                        ?_getCurrentY 0072                            _OPTION_REG 0081  
                  ?_updateOrientation 0072         __size_of_clearSuccessfulDrive 0002  
                      ??_goToNextCell 0039                   __end_of_turnRight90 0ACD  
                            stringdir 0800              driveForDistance@distance 0032  
                            stringtab 0800     __size_of_checkForFinalDestination 002D  
                       _closestObject 004E             ?_checkForFinalDestination 0072  
                 updateMapData@victim 002C                   ??_lcd_write_control 0020  
              __end_of_lcd_set_cursor 1592                   ??_updateOrientation 0020  
                  __end_of_turnLeft90 0D0E                    __end_of_turnAround 0C20  
                      _updateLocation 0E23                      _lcd_write_string 1714  
                       _updateMapData 0C67                           _RTC_Counter 004C  
                      _lcd_write_data 15D1                       ser_putArr@array 0022  
                    ser_putArr@length 0024  
